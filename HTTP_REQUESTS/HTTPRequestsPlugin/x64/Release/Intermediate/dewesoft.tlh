// Created by Microsoft (R) C/C++ Compiler Version 14.16.27045.0 (c7febe33).
//
// c:\users\theoz\onedrive\documents\github\dewesoft_http_data_writer\http_requests\httprequestsplugin\x64\release\intermediate\dewesoft.tlh
//
// C++ source equivalent of type library C:\Program Files\DewesoftX\Bin64\Dewesoft.exe
// compiler-generated file created 01/05/22 at 21:15:03 - DO NOT EDIT!

#pragma once
#pragma pack(push, 8)

#include <comdef.h>

//
// Forward references and typedefs
//

struct __declspec(uuid("96d9b72c-93f3-4d0c-90bb-1466845156ef"))
/* LIBID */ __DEWESoft;
struct __declspec(uuid("45be650b-1f90-46bf-bc65-853f09a0a241"))
/* dual interface */ IData;
struct __declspec(uuid("cae48a7c-581e-4c0b-ae4f-7a2eb89c0dff"))
/* dual interface */ IChannel;
struct __declspec(uuid("788183a5-1fc0-48e8-93ec-a6ee075a42f9"))
/* dual interface */ IChannelList;
struct __declspec(uuid("efc6dff0-b694-41f8-905d-45612724bd7d"))
/* dual interface */ IChannelGroups;
struct __declspec(uuid("763e6e43-6464-4cb8-9701-a645b060f216"))
/* dual interface */ IChannelGroup;
struct __declspec(uuid("82d0cab4-6b17-4810-ba3f-06c235e76366"))
/* dual interface */ IApp;
struct __declspec(uuid("c15bab67-52bb-4664-8c9d-e8cc1a1a4c44"))
/* dispinterface */ IAppEvents;
struct /* coclass */ App;
struct __declspec(uuid("a1114daa-8d7f-4809-92f9-d6c1dcbf5d81"))
/* dual interface */ ILoadEngine;
struct __declspec(uuid("97c5783f-0b84-47d9-8294-9f33b2739076"))
/* dual interface */ IStoreEngine;
struct __declspec(uuid("f095a7a6-c7cc-4492-a4f1-25596b54c673"))
/* dual interface */ IPlugin;
struct __declspec(uuid("b06829e7-7afc-4921-b530-6ecbe286c905"))
/* dual interface */ IPlugin2;
struct __declspec(uuid("21b73cc2-ac60-4bab-bef0-fa4453894eef"))
/* dual interface */ IPluginGroup;
struct __declspec(uuid("a3923065-75e3-4dfb-b049-5ccb981c15f3"))
/* dual interface */ IScreens;
struct __declspec(uuid("8262475b-8f95-4917-a339-a343cb5d5065"))
/* dual interface */ IScreen;
struct __declspec(uuid("c30bc69b-93bd-44c2-af67-95c12865f8a1"))
/* dual interface */ IEventList;
struct __declspec(uuid("4d89cff3-0bfa-4ce1-a17f-e449b5cda72e"))
/* dual interface */ IEvent;
struct __declspec(uuid("254bf4b3-cf9c-49a3-8f75-7ce35ef01a5d"))
/* dual interface */ IMasterClock;
struct __declspec(uuid("7515b878-6b71-4020-bff3-b880451e163b"))
/* dual interface */ IDataSection;
struct __declspec(uuid("9289b1ac-5753-4d6b-b8d6-9e986194875c"))
/* dual interface */ IDataSections;
struct __declspec(uuid("66c046ab-0518-453d-9e52-06340574a1c2"))
/* interface */ ICustomExport;
struct __declspec(uuid("44f950d5-4db2-4bc8-a636-653d98cbf652"))
/* dual interface */ IChannelConnection;
struct __declspec(uuid("56102555-9e45-4ae6-b3be-a4d7f830296e"))
/* dual interface */ IAISetupScreen;
struct __declspec(uuid("158b5c24-cf4d-4edf-b2c8-68d46a5cd676"))
/* dual interface */ IDaqChannel;
struct __declspec(uuid("99edf4c9-4784-4a66-a1ca-2e395ec319d6"))
/* dual interface */ IPlugin3;
struct __declspec(uuid("6b0b2596-bc6b-4c04-8155-ed285696da7d"))
/* interface */ ICustomExport2;
struct __declspec(uuid("b2f13d39-72c9-497a-8a38-9d16ddf6d9f2"))
/* dual interface */ ITrigger;
struct __declspec(uuid("c0b4dee8-073d-4e57-9dac-8a72cbc6a51f"))
/* dual interface */ IChannelGroup2;
struct __declspec(uuid("3a2b361a-ee1b-4ceb-9848-2c0982bcac7f"))
/* interface */ ICustomDAQ;
struct __declspec(uuid("0e036530-b449-4ebc-af84-fb2ca6675735"))
/* dual interface */ IVideoLoadEngine;
struct __declspec(uuid("87d35b4c-8fa5-4080-9cde-ac49cada92c5"))
/* dual interface */ IVideoLoadEngines;
struct __declspec(uuid("78087aeb-d02b-488f-9757-ba685d03771c"))
/* dual interface */ IAOGroup;
struct __declspec(uuid("c6e7dd46-7bca-42f3-9ac7-0077d19d4ecf"))
/* dual interface */ IAOChannel;
struct __declspec(uuid("1d49da44-d8ee-4cd7-8b62-dd4e7b523b8e"))
/* dual interface */ ICAN;
struct __declspec(uuid("f560c6ca-c5fd-4921-ae58-a4f69b17a3e9"))
/* dual interface */ ICANPort;
struct __declspec(uuid("da7bd5dc-c815-4471-ada6-8b7be9126e1f"))
/* dual interface */ IModule;
struct __declspec(uuid("97ff1354-fd61-4339-94c9-b36691410c4e"))
/* dual interface */ IPadData;
struct __declspec(uuid("129fc1e1-2091-4789-978b-faa05f259260"))
/* dual interface */ IDaqData;
struct __declspec(uuid("b37a70cb-5b08-490a-ae57-3d75f1c59b1c"))
/* dual interface */ IModules;
struct __declspec(uuid("82d459fe-bc05-4ff2-8597-74bb45010608"))
/* dual interface */ IAveragedFFT;
struct __declspec(uuid("d7050b91-6a5d-4228-9378-0021325c815c"))
/* dual interface */ INothing;
struct __declspec(uuid("20627eb4-d51b-4267-a6cb-8c86112e7502"))
/* dual interface */ IPluginLicense;
struct __declspec(uuid("9d97cef7-1a44-4065-904a-28575032572d"))
/* dual interface */ ITriggerCondition;
struct __declspec(uuid("2ca6fa4f-0e5c-4b4e-9e8f-e241be14e622"))
/* dual interface */ ITriggerCondList;
struct __declspec(uuid("3e3732b1-3146-429d-8c33-f89ae5ffde92"))
/* dual interface */ ITrig;
struct __declspec(uuid("f785eaad-9fbf-40a2-8532-3ac46dc8ce28"))
/* dual interface */ IAlarms;
struct __declspec(uuid("a4d0a424-ae57-4d56-945e-3b8d1369ddec"))
/* dual interface */ IAlarmCond;
struct __declspec(uuid("fc698ce1-0973-498a-aa6b-2f82830be3a6"))
/* dual interface */ IDaqGroup;
struct __declspec(uuid("0d7e8d61-796e-47ab-9631-2fc80a5af203"))
/* dual interface */ IExportFrame;
struct __declspec(uuid("ceb1a90b-d594-47b5-a154-bb7b4603aca2"))
/* dual interface */ IFileNameSettings;
struct __declspec(uuid("aa2e8a89-aadd-4b5f-81b9-d9f76bf35c2a"))
/* dual interface */ IDaq;
struct __declspec(uuid("e39d43bc-bfb8-4d48-af5b-53eba55c8817"))
/* dual interface */ IPluginChannel;
struct __declspec(uuid("04242cbe-cf38-4a86-b54b-d78a9b64e0fb"))
/* dual interface */ IDiscreteItem;
struct __declspec(uuid("53330bbc-6b11-4805-8c41-48b13047dc42"))
/* dual interface */ IDiscreteList;
struct __declspec(uuid("14bb3a33-f7a5-4656-8c94-3b529d7306b0"))
/* dual interface */ IGlobalHeader;
struct __declspec(uuid("b2fdbf74-7a7d-4be1-bfdc-59f364f320dc"))
/* dual interface */ IGHObject;
struct __declspec(uuid("f8f34a4f-cbad-4240-9daf-c226282b8615"))
/* dual interface */ ITiming;
struct __declspec(uuid("bea4a4fb-010a-4d58-9140-729783ed0f99"))
/* dual interface */ IPlugin4;
struct __declspec(uuid("5d479bea-0369-46dc-8668-ebecc83e0b9f"))
/* dual interface */ IUserInterface;
struct __declspec(uuid("d9d2402a-73a9-47c3-a121-951a7efe4fcf"))
/* dual interface */ IVCContext;
struct __declspec(uuid("9b3ff991-2d72-4474-a82d-2464d071a715"))
/* dual interface */ IMathContext;
struct __declspec(uuid("14c2577b-0281-475a-9302-394d1fa1b473"))
/* dual interface */ IMathFrameContext;
struct __declspec(uuid("5c45f430-ee53-49dc-935b-36314a52d438"))
/* interface */ IDewePlugin;
struct __declspec(uuid("c4a25fdc-9f2e-413d-9ec8-8df43bd210ca"))
/* dual interface */ IPowerModule;
struct __declspec(uuid("2cd91570-4eef-4ab9-a24c-d3c663b4f5b1"))
/* dual interface */ IPowerModules;
struct __declspec(uuid("0db0148a-639a-4adc-b781-213b14f1f9ef"))
/* dual interface */ IArrayInfo;
struct __declspec(uuid("7a49908d-487a-4f85-96f2-d53b745e91cf"))
/* dual interface */ IAxisDef;
struct __declspec(uuid("6f188a41-ad92-4380-b560-02a07dda1339"))
/* dual interface */ IMath;
struct __declspec(uuid("b5ff31ac-f12b-4c28-adce-14874043c10a"))
/* dual interface */ IMathObject;
struct __declspec(uuid("5db01f14-c1ec-4b60-a258-5945b09eb818"))
/* dual interface */ IMathItem;
struct __declspec(uuid("e17a04ba-e047-4896-892e-a8937cc290b6"))
/* dual interface */ IMathModule;
struct __declspec(uuid("41315abf-26aa-44b6-a758-c45c3c685997"))
/* dual interface */ IMathObjContext;
struct __declspec(uuid("9d693130-279e-443a-b4ca-6c2ada913724"))
/* dual interface */ IChannelListEx;
struct __declspec(uuid("e3638e01-ed8e-40c4-baac-d00b5b023ea7"))
/* dual interface */ IPluginChannelXMLHelper;
struct __declspec(uuid("0c418a3e-cdf3-4f89-b28b-8d63aca8398f"))
/* dual interface */ IMathChannel;
struct __declspec(uuid("74e73f54-f623-4271-8071-d3e715b9ef70"))
/* dual interface */ IInputGroup;
struct __declspec(uuid("185eb8a2-805f-4b63-a1fc-bbee49a69337"))
/* dual interface */ IInputGroups;
struct __declspec(uuid("dbb2d89c-443b-4abf-838e-27cdea6e424c"))
/* dual interface */ IProperties;
struct __declspec(uuid("947bf399-9ef8-4417-a5c0-d5ccd79a0b14"))
/* dual interface */ ICustomExport3;
struct __declspec(uuid("5649e2dc-2ef0-4d1d-8e23-2a0dc041d0a5"))
/* dual interface */ IRegistrationHelper;
struct __declspec(uuid("2e02870e-2b86-40be-bad3-1ff6ff4d03c9"))
/* dual interface */ IAmplInterfaces;
struct __declspec(uuid("40aadaed-bcc1-4134-b154-de6e016de703"))
/* dual interface */ IAmplInterface;
struct __declspec(uuid("01c5e234-c56d-4fa3-8c77-e1ad0484790d"))
/* dual interface */ IAmplChainList;
struct __declspec(uuid("24428804-6902-4cc5-808c-86b362414bda"))
/* dual interface */ IAmplChain;
struct __declspec(uuid("39f60bb4-26eb-47c1-884a-d10114fa06e7"))
/* dual interface */ IAmplifier;
struct __declspec(uuid("9ea5ff19-04b2-4138-81db-88ecdab95f21"))
/* dual interface */ IImportGroup;
struct __declspec(uuid("b05e7b8b-09a8-418e-8b32-922bd729f1ad"))
/* dual interface */ IImportChannel;
struct __declspec(uuid("06ed52b2-5a28-4564-99ce-10ed7a82f933"))
/* dual interface */ IPluginLicense2;
struct __declspec(uuid("6d30b59f-0060-40db-b6b2-7f87465ce3b7"))
/* dual interface */ IOfflineCalc;
struct __declspec(uuid("89dc7c60-9fce-48d3-a70a-eb035cfc3a44"))
/* dual interface */ ICNTGroup;
struct __declspec(uuid("062c4672-b1c5-43fa-8c77-62c1dcb928f0"))
/* dual interface */ ICustomDAQ2;
struct __declspec(uuid("1bffb38d-377e-4e0a-a697-0e3d25aa768d"))
/* dual interface */ ICntChannel;
struct __declspec(uuid("df31d5d6-d4c4-47b6-84ec-73b748b67c22"))
/* dual interface */ ITrigInfo;
struct __declspec(uuid("c58c7b68-e2f7-478a-acf7-11b8d6a16509"))
/* dual interface */ IDigitalTrigLevel;
struct __declspec(uuid("aa6c3d58-ed6d-4529-aaf8-ecb0a682a270"))
/* dual interface */ ISyncSource;
struct __declspec(uuid("6dd0e754-22ab-4687-8fd4-28d9475cd02c"))
/* dual interface */ ICANContext;
struct __declspec(uuid("953fd7c5-a46c-4f92-a229-220a12a1a115"))
/* dual interface */ ICANPortContext;
struct __declspec(uuid("1d828c6f-8559-4000-84b1-570451541753"))
/* dual interface */ ICANMsg;
struct __declspec(uuid("0ab26cc9-1f8f-4289-9f0e-6fb42ba4cac0"))
/* dual interface */ IProjectManager;
struct __declspec(uuid("96a73a79-b803-4331-9204-b28708f0811b"))
/* dual interface */ IDisplayTemplate;
struct __declspec(uuid("e224aecc-b2f3-42ee-a7c1-4650d1a5d740"))
/* dual interface */ IDisplayFrameTemplate;
struct __declspec(uuid("2af787a0-cf72-41a2-a0c9-d8dc56676387"))
/* dual interface */ IDisplayFrameTemplates;
struct __declspec(uuid("a727cf4a-fbaf-45f6-bc6a-8a58e05aeb3f"))
/* dual interface */ IDIGroup;
struct __declspec(uuid("cc93ddf0-d660-47bf-97d8-368afce0a6be"))
/* dual interface */ IDIPort;
struct __declspec(uuid("1a6efdac-300e-40d7-8a4e-0f4c370993dd"))
/* dual interface */ IDIChannel;
struct __declspec(uuid("85163d18-0a7e-4844-93eb-f9a0c4c43968"))
/* dual interface */ IVideo;
struct __declspec(uuid("c102fc8b-bfde-4d2f-954c-062cf19eaa6b"))
/* dual interface */ ICamera;
struct __declspec(uuid("999f8e10-ec80-4d2a-a785-c1fd3cb87f22"))
/* dual interface */ IVideoFrame;
struct __declspec(uuid("b657e514-6aa4-4b43-af88-d5d4c8b6251c"))
/* dual interface */ IIndexChanger;
struct __declspec(uuid("f1dd1197-a2c6-478a-840c-b226864b11d3"))
/* dual interface */ ISetupMessages;
struct __declspec(uuid("daa5f907-902b-4d5b-982b-4afcb191eeb1"))
/* dual interface */ IViewInfo;
struct __declspec(uuid("0850b5b8-80c8-41a5-a34d-04adfe00a000"))
/* dual interface */ IAxisViewInfo;
struct __declspec(uuid("4e5157c0-cb61-4a6e-8183-e4d747568c21"))
/* dual interface */ ILockableCursor;
struct __declspec(uuid("b2ede09d-d64b-4ef2-aefd-6945a76dfac4"))
/* dual interface */ ILockableCursors;
struct __declspec(uuid("83054c30-0f5b-433d-9863-e521c5ca254b"))
/* dual interface */ IMathItem2;
struct __declspec(uuid("83ba9c2d-f71f-476f-ab58-27b80328d73c"))
/* dual interface */ IDwXMLDocument;
struct __declspec(uuid("44a1b53f-7d56-41dd-a654-17d9b638b77c"))
/* dual interface */ IDwXMLNode;
struct __declspec(uuid("f9c98ee1-7c70-43b6-b757-6fdc23cc58ad"))
/* dual interface */ ISequencer;
struct __declspec(uuid("b1e6cc98-e25d-4345-ab33-178874ef5e3a"))
/* dual interface */ IPermission;
struct __declspec(uuid("aee49e04-2a77-4647-b39c-99ff64b384d9"))
/* dual interface */ IVariableChannel;
struct __declspec(uuid("fa9adfd0-98d2-483e-bb09-591cfb634b01"))
/* dual interface */ IUIHelper;
struct __declspec(uuid("0d7aa807-a31e-4096-b52a-df597c053587"))
/* dual interface */ IRemoteManager;
struct __declspec(uuid("70a1113c-15c8-45df-ad86-7acbfb11b3da"))
/* dual interface */ IMeasUnit;
struct __declspec(uuid("48b39869-9b9a-4d13-8763-a595b4155c57"))
/* dual interface */ IVCProperties;
struct __declspec(uuid("46d31c0c-521f-4e84-bf6d-0551cee2c923"))
/* dual interface */ IVCPropertiesGroup;
struct __declspec(uuid("ceb5afb5-7ac3-4115-b60b-b3322b19f5d1"))
/* dual interface */ IVCProperty;
struct __declspec(uuid("6f818df3-5fb4-413b-a4c7-0e734acd7ac4"))
/* dual interface */ IVCIntegerProperty;
struct __declspec(uuid("61b5989d-5b64-42a0-bc43-631c9c6999e7"))
/* dual interface */ IVCColorProperty;
struct __declspec(uuid("a5ea1e02-f560-4db9-a85d-a7ed8be5fae5"))
/* dual interface */ IVCFloatProperty;
struct __declspec(uuid("fdb7daea-a9ea-4809-9101-a53e57e3766b"))
/* dual interface */ IVCTextProperty;
struct __declspec(uuid("332dd867-fe98-4284-9184-5c4a04e61be8"))
/* dual interface */ IVCSelectProperty;
struct __declspec(uuid("693fc2c1-ab56-4d99-ba5a-508b1956c2ea"))
/* dual interface */ IVCCheckBoxProperty;
struct __declspec(uuid("d5e34dae-a4bb-43cb-8d4e-c24d7a088b59"))
/* dual interface */ IDeviceNode;
struct __declspec(uuid("d0817355-ada8-4495-8f78-9cec87079f31"))
/* dual interface */ ISynchronization;
struct __declspec(uuid("ff17d484-f89e-4bbe-b98d-16ba390113a3"))
/* dual interface */ IXMLHelper;
struct __declspec(uuid("01451b04-cf12-4183-9681-47d59563f6fa"))
/* dual interface */ IAcqLoop;
struct __declspec(uuid("741407bd-5878-42b6-8de3-30468eab47e4"))
/* dual interface */ IVCSearchProperty;
struct __declspec(uuid("317f5d39-7aea-46fc-9398-cb96d978d73d"))
/* dual interface */ IResamplerChannel;
struct __declspec(uuid("f54b3bb3-a3a5-461a-a524-f416f10825de"))
/* dual interface */ ICanvas;
struct __declspec(uuid("c2336c94-efd4-4ef9-a982-616f2311468f"))
/* dual interface */ ICanvasBrush;
struct __declspec(uuid("dafc614c-558e-4a51-a5c9-a4ba467429b7"))
/* dual interface */ ICanvasPen;
struct __declspec(uuid("48d1b1fc-2c76-4c54-8e3c-ad9ff9c7a919"))
/* dual interface */ ICanvasFont;
struct __declspec(uuid("6cba1a35-3f2d-4736-8ea2-ae714d177a17"))
/* dual interface */ IRTModuleLoader;
struct __declspec(uuid("2525da0a-b39e-48de-a4b7-48e0f637a0c5"))
/* dual interface */ IRTModule;
struct __declspec(uuid("908cbc49-c871-4622-a041-62831e4b1c26"))
/* dual interface */ IRTCore;
struct __declspec(uuid("8e644726-47e1-47db-b65d-3a734b911301"))
/* dual interface */ IMarkerObject;
struct __declspec(uuid("148514f1-a09f-4201-9c8c-8267112586fa"))
/* dual interface */ IMarkerInput;
struct __declspec(uuid("77c5b419-4d13-4b28-8126-4f3fc0593195"))
/* dual interface */ IPairedValueMarkerInput;
struct __declspec(uuid("e499821c-932c-4f1a-9ac4-0a140abc99a1"))
/* dual interface */ IMarkerOutput;
struct __declspec(uuid("f5d0f0f2-88d6-463c-89b4-0a2eedac822c"))
/* dual interface */ IMarkerOwner;
struct __declspec(uuid("52b00a03-89c4-499f-b8c4-29b6edead12a"))
/* dual interface */ IProcessingMarker;
struct __declspec(uuid("cb6a91bb-c4f8-46a3-be89-e0d4facffdd3"))
/* dual interface */ IProcessingMarkerList;
struct __declspec(uuid("e0ff8031-73cb-4b3b-9c3c-e9581488a9c9"))
/* dual interface */ ISingleValueMarkerInput;
struct __declspec(uuid("f0bbcaa5-aba4-4a34-9760-6dbbe04ec6ab"))
/* dual interface */ IMarkerObjectsList;
struct __declspec(uuid("8349dfe4-587a-429c-bcb7-e377505fc3a4"))
/* dual interface */ IReport;
struct __declspec(uuid("154b310e-83cd-4d67-bdb6-e5073b56fcfa"))
/* dual interface */ IInputSlot;
struct __declspec(uuid("a4302d26-b5c4-4a54-b1ba-d46cf4be3769"))
/* dual interface */ IInputSlots;
struct __declspec(uuid("d590c57b-41c9-40fa-9d27-9f82ebfc75cd"))
/* dual interface */ IInputCh;
struct __declspec(uuid("7223209c-7bb1-44f6-a7d1-9be1a0ad40e9"))
/* dual interface */ IAcceptChannel;
struct __declspec(uuid("5792b1cb-b287-46a7-ae1b-ddba565035bb"))
/* dual interface */ IAcceptGroup;
struct __declspec(uuid("e67e5bf0-5dbd-4619-9c37-9cd01d701387"))
/* dual interface */ IGenericBitmap;
struct __declspec(uuid("1515619c-fe53-4a69-803e-707b131b66d6"))
/* dual interface */ IGDIBitmap;
struct __declspec(uuid("ce7001a4-9a02-427e-b38e-91fbac57ea35"))
/* dual interface */ IRTC;
struct __declspec(uuid("f60fc481-ba79-44f1-be38-7e3c0936ab81"))
/* dual interface */ IRTCController;
struct __declspec(uuid("81c0a81f-d7a5-46fd-b460-e753da4e9292"))
/* dual interface */ IRTCModule;
struct __declspec(uuid("d91f9d72-0565-4db5-b829-f831bce638e0"))
/* dual interface */ IRTCControllers;
struct __declspec(uuid("6add4b81-50fb-49ad-83d0-4b45ad8151b8"))
/* dual interface */ IRTCModules;
struct __declspec(uuid("d111aa85-8c13-41ce-9ac7-7b1bb923b0c0"))
/* dual interface */ IRTCPropertiesInfo;
struct __declspec(uuid("ea09a4c1-db94-434a-a83c-b0212dab37be"))
/* dual interface */ IRTCPropertyInfo;
struct __declspec(uuid("8a172d7b-a444-46fd-817a-f61a8ffc480e"))
/* dual interface */ ICppResamplerEngine;
enum MenuItems;
enum ExportTypes;
enum ConnTypes;
enum EventReason;
enum EventType;
enum AOOperationMode;
enum AOSweepMode;
enum AOWaveForm;
enum TSRDivType;
enum GHObjectType;
enum EventIDs;
enum CustomVCMessages;
enum CustomMathMessages;
enum CustomMathFrameMessages;
enum XMLType;
enum ModulesFunction;
enum TAxisType;
enum CustomExpEventIDs;
enum SpecDirectory;
enum CustomImpMessages;
enum ImportTypes;
enum MathMultipassType;
enum ImportStatus;
enum CustomDAQMessages;
enum CustomCANMessages;
enum ControlChFlags;
enum SetupMessageType;
enum ReportMessageType;
enum UpdateType;
enum TimeFormat;
enum TPermissionType;
enum TimingType;
enum TSyncMode;
enum CanvasPenStyle;
enum CanvasPenMode;
enum CanvasBrushStyle;
enum CanvasFontQuality;
enum CanvasFillStyle;
enum CanvasFontStyle;
enum CanvasTextFormat;
enum ComplexPresentation;
enum RTModuleLoadOptions;
enum IMarkerValueType;
enum IMarkerChannelType;
enum TimeDisplay;
enum TRTCStatus;
enum TRTCoreType;
struct T_ReducedRec;
struct T_RecordPosition;
struct T_ChIndex;
struct ITestRecord;
struct T_CANFrame;
struct DaqDeviceInfo;

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(IAppEvents, __uuidof(IAppEvents));
_COM_SMARTPTR_TYPEDEF(IScreen, __uuidof(IScreen));
_COM_SMARTPTR_TYPEDEF(IScreens, __uuidof(IScreens));
_COM_SMARTPTR_TYPEDEF(IMasterClock, __uuidof(IMasterClock));
_COM_SMARTPTR_TYPEDEF(IAISetupScreen, __uuidof(IAISetupScreen));
_COM_SMARTPTR_TYPEDEF(IDaqChannel, __uuidof(IDaqChannel));
_COM_SMARTPTR_TYPEDEF(IVideoLoadEngine, __uuidof(IVideoLoadEngine));
_COM_SMARTPTR_TYPEDEF(IVideoLoadEngines, __uuidof(IVideoLoadEngines));
_COM_SMARTPTR_TYPEDEF(IPadData, __uuidof(IPadData));
_COM_SMARTPTR_TYPEDEF(IDaqData, __uuidof(IDaqData));
_COM_SMARTPTR_TYPEDEF(IModule, __uuidof(IModule));
_COM_SMARTPTR_TYPEDEF(IModules, __uuidof(IModules));
_COM_SMARTPTR_TYPEDEF(IAveragedFFT, __uuidof(IAveragedFFT));
_COM_SMARTPTR_TYPEDEF(INothing, __uuidof(INothing));
_COM_SMARTPTR_TYPEDEF(IPluginLicense, __uuidof(IPluginLicense));
_COM_SMARTPTR_TYPEDEF(IDaqGroup, __uuidof(IDaqGroup));
_COM_SMARTPTR_TYPEDEF(IFileNameSettings, __uuidof(IFileNameSettings));
_COM_SMARTPTR_TYPEDEF(IPluginChannel, __uuidof(IPluginChannel));
_COM_SMARTPTR_TYPEDEF(IDiscreteItem, __uuidof(IDiscreteItem));
_COM_SMARTPTR_TYPEDEF(IDiscreteList, __uuidof(IDiscreteList));
_COM_SMARTPTR_TYPEDEF(IGHObject, __uuidof(IGHObject));
_COM_SMARTPTR_TYPEDEF(IGlobalHeader, __uuidof(IGlobalHeader));
_COM_SMARTPTR_TYPEDEF(ITiming, __uuidof(ITiming));
_COM_SMARTPTR_TYPEDEF(IDewePlugin, __uuidof(IDewePlugin));
_COM_SMARTPTR_TYPEDEF(IPluginChannelXMLHelper, __uuidof(IPluginChannelXMLHelper));
_COM_SMARTPTR_TYPEDEF(IRegistrationHelper, __uuidof(IRegistrationHelper));
_COM_SMARTPTR_TYPEDEF(IAmplifier, __uuidof(IAmplifier));
_COM_SMARTPTR_TYPEDEF(IAmplChain, __uuidof(IAmplChain));
_COM_SMARTPTR_TYPEDEF(IAmplChainList, __uuidof(IAmplChainList));
_COM_SMARTPTR_TYPEDEF(IAmplInterface, __uuidof(IAmplInterface));
_COM_SMARTPTR_TYPEDEF(IAmplInterfaces, __uuidof(IAmplInterfaces));
_COM_SMARTPTR_TYPEDEF(IImportChannel, __uuidof(IImportChannel));
_COM_SMARTPTR_TYPEDEF(IPluginLicense2, __uuidof(IPluginLicense2));
_COM_SMARTPTR_TYPEDEF(IOfflineCalc, __uuidof(IOfflineCalc));
_COM_SMARTPTR_TYPEDEF(ICustomDAQ2, __uuidof(ICustomDAQ2));
_COM_SMARTPTR_TYPEDEF(IDigitalTrigLevel, __uuidof(IDigitalTrigLevel));
_COM_SMARTPTR_TYPEDEF(ISyncSource, __uuidof(ISyncSource));
_COM_SMARTPTR_TYPEDEF(ICANMsg, __uuidof(ICANMsg));
_COM_SMARTPTR_TYPEDEF(ICANPortContext, __uuidof(ICANPortContext));
_COM_SMARTPTR_TYPEDEF(ICANContext, __uuidof(ICANContext));
_COM_SMARTPTR_TYPEDEF(IProjectManager, __uuidof(IProjectManager));
_COM_SMARTPTR_TYPEDEF(IDIPort, __uuidof(IDIPort));
_COM_SMARTPTR_TYPEDEF(IDIGroup, __uuidof(IDIGroup));
_COM_SMARTPTR_TYPEDEF(IDIChannel, __uuidof(IDIChannel));
_COM_SMARTPTR_TYPEDEF(IVideoFrame, __uuidof(IVideoFrame));
_COM_SMARTPTR_TYPEDEF(ICamera, __uuidof(ICamera));
_COM_SMARTPTR_TYPEDEF(IVideo, __uuidof(IVideo));
_COM_SMARTPTR_TYPEDEF(IViewInfo, __uuidof(IViewInfo));
_COM_SMARTPTR_TYPEDEF(ILockableCursor, __uuidof(ILockableCursor));
_COM_SMARTPTR_TYPEDEF(ILockableCursors, __uuidof(ILockableCursors));
_COM_SMARTPTR_TYPEDEF(IMathItem2, __uuidof(IMathItem2));
_COM_SMARTPTR_TYPEDEF(IDwXMLNode, __uuidof(IDwXMLNode));
_COM_SMARTPTR_TYPEDEF(ISequencer, __uuidof(ISequencer));
_COM_SMARTPTR_TYPEDEF(IVariableChannel, __uuidof(IVariableChannel));
_COM_SMARTPTR_TYPEDEF(IUIHelper, __uuidof(IUIHelper));
_COM_SMARTPTR_TYPEDEF(IMeasUnit, __uuidof(IMeasUnit));
_COM_SMARTPTR_TYPEDEF(IRemoteManager, __uuidof(IRemoteManager));
_COM_SMARTPTR_TYPEDEF(IVCProperty, __uuidof(IVCProperty));
_COM_SMARTPTR_TYPEDEF(IVCIntegerProperty, __uuidof(IVCIntegerProperty));
_COM_SMARTPTR_TYPEDEF(IVCColorProperty, __uuidof(IVCColorProperty));
_COM_SMARTPTR_TYPEDEF(IVCFloatProperty, __uuidof(IVCFloatProperty));
_COM_SMARTPTR_TYPEDEF(IVCTextProperty, __uuidof(IVCTextProperty));
_COM_SMARTPTR_TYPEDEF(IVCSelectProperty, __uuidof(IVCSelectProperty));
_COM_SMARTPTR_TYPEDEF(IVCCheckBoxProperty, __uuidof(IVCCheckBoxProperty));
_COM_SMARTPTR_TYPEDEF(IAcqLoop, __uuidof(IAcqLoop));
_COM_SMARTPTR_TYPEDEF(IVCSearchProperty, __uuidof(IVCSearchProperty));
_COM_SMARTPTR_TYPEDEF(IVCPropertiesGroup, __uuidof(IVCPropertiesGroup));
_COM_SMARTPTR_TYPEDEF(IVCProperties, __uuidof(IVCProperties));
_COM_SMARTPTR_TYPEDEF(IResamplerChannel, __uuidof(IResamplerChannel));
_COM_SMARTPTR_TYPEDEF(IRTModule, __uuidof(IRTModule));
_COM_SMARTPTR_TYPEDEF(IRTCore, __uuidof(IRTCore));
_COM_SMARTPTR_TYPEDEF(IReport, __uuidof(IReport));
_COM_SMARTPTR_TYPEDEF(IGenericBitmap, __uuidof(IGenericBitmap));
_COM_SMARTPTR_TYPEDEF(IGDIBitmap, __uuidof(IGDIBitmap));
_COM_SMARTPTR_TYPEDEF(IStoreEngine, __uuidof(IStoreEngine));
_COM_SMARTPTR_TYPEDEF(IAOChannel, __uuidof(IAOChannel));
_COM_SMARTPTR_TYPEDEF(IPlugin4, __uuidof(IPlugin4));
_COM_SMARTPTR_TYPEDEF(IPowerModule, __uuidof(IPowerModule));
_COM_SMARTPTR_TYPEDEF(IPowerModules, __uuidof(IPowerModules));
_COM_SMARTPTR_TYPEDEF(ICustomExport3, __uuidof(ICustomExport3));
_COM_SMARTPTR_TYPEDEF(ISetupMessages, __uuidof(ISetupMessages));
_COM_SMARTPTR_TYPEDEF(IDwXMLDocument, __uuidof(IDwXMLDocument));
_COM_SMARTPTR_TYPEDEF(IProperties, __uuidof(IProperties));
_COM_SMARTPTR_TYPEDEF(IInputGroup, __uuidof(IInputGroup));
_COM_SMARTPTR_TYPEDEF(IInputGroups, __uuidof(IInputGroups));
_COM_SMARTPTR_TYPEDEF(IXMLHelper, __uuidof(IXMLHelper));
_COM_SMARTPTR_TYPEDEF(IPermission, __uuidof(IPermission));
_COM_SMARTPTR_TYPEDEF(ISynchronization, __uuidof(ISynchronization));
_COM_SMARTPTR_TYPEDEF(IDeviceNode, __uuidof(IDeviceNode));
_COM_SMARTPTR_TYPEDEF(ICanvasPen, __uuidof(ICanvasPen));
_COM_SMARTPTR_TYPEDEF(ICanvasBrush, __uuidof(ICanvasBrush));
_COM_SMARTPTR_TYPEDEF(ICanvasFont, __uuidof(ICanvasFont));
_COM_SMARTPTR_TYPEDEF(ICanvas, __uuidof(ICanvas));
_COM_SMARTPTR_TYPEDEF(IRTModuleLoader, __uuidof(IRTModuleLoader));
_COM_SMARTPTR_TYPEDEF(IMarkerObject, __uuidof(IMarkerObject));
_COM_SMARTPTR_TYPEDEF(IMarkerInput, __uuidof(IMarkerInput));
_COM_SMARTPTR_TYPEDEF(IPairedValueMarkerInput, __uuidof(IPairedValueMarkerInput));
_COM_SMARTPTR_TYPEDEF(ISingleValueMarkerInput, __uuidof(ISingleValueMarkerInput));
_COM_SMARTPTR_TYPEDEF(IMarkerObjectsList, __uuidof(IMarkerObjectsList));
_COM_SMARTPTR_TYPEDEF(IRTCPropertyInfo, __uuidof(IRTCPropertyInfo));
_COM_SMARTPTR_TYPEDEF(IRTCPropertiesInfo, __uuidof(IRTCPropertiesInfo));
_COM_SMARTPTR_TYPEDEF(IRTCModule, __uuidof(IRTCModule));
_COM_SMARTPTR_TYPEDEF(IRTCModules, __uuidof(IRTCModules));
_COM_SMARTPTR_TYPEDEF(IRTCController, __uuidof(IRTCController));
_COM_SMARTPTR_TYPEDEF(IRTCControllers, __uuidof(IRTCControllers));
_COM_SMARTPTR_TYPEDEF(IRTC, __uuidof(IRTC));
_COM_SMARTPTR_TYPEDEF(ICANPort, __uuidof(ICANPort));
_COM_SMARTPTR_TYPEDEF(ICAN, __uuidof(ICAN));
_COM_SMARTPTR_TYPEDEF(IDaq, __uuidof(IDaq));
_COM_SMARTPTR_TYPEDEF(IData, __uuidof(IData));
_COM_SMARTPTR_TYPEDEF(IChannel, __uuidof(IChannel));
_COM_SMARTPTR_TYPEDEF(IChannelList, __uuidof(IChannelList));
_COM_SMARTPTR_TYPEDEF(IChannelGroup, __uuidof(IChannelGroup));
_COM_SMARTPTR_TYPEDEF(IChannelGroups, __uuidof(IChannelGroups));
_COM_SMARTPTR_TYPEDEF(IPluginGroup, __uuidof(IPluginGroup));
_COM_SMARTPTR_TYPEDEF(IDataSection, __uuidof(IDataSection));
_COM_SMARTPTR_TYPEDEF(IDataSections, __uuidof(IDataSections));
_COM_SMARTPTR_TYPEDEF(ILoadEngine, __uuidof(ILoadEngine));
_COM_SMARTPTR_TYPEDEF(IChannelConnection, __uuidof(IChannelConnection));
_COM_SMARTPTR_TYPEDEF(IChannelGroup2, __uuidof(IChannelGroup2));
_COM_SMARTPTR_TYPEDEF(IAOGroup, __uuidof(IAOGroup));
_COM_SMARTPTR_TYPEDEF(ITriggerCondition, __uuidof(ITriggerCondition));
_COM_SMARTPTR_TYPEDEF(ITriggerCondList, __uuidof(ITriggerCondList));
_COM_SMARTPTR_TYPEDEF(ITrig, __uuidof(ITrig));
_COM_SMARTPTR_TYPEDEF(ITrigger, __uuidof(ITrigger));
_COM_SMARTPTR_TYPEDEF(IAlarmCond, __uuidof(IAlarmCond));
_COM_SMARTPTR_TYPEDEF(IAlarms, __uuidof(IAlarms));
_COM_SMARTPTR_TYPEDEF(IUserInterface, __uuidof(IUserInterface));
_COM_SMARTPTR_TYPEDEF(IMathItem, __uuidof(IMathItem));
_COM_SMARTPTR_TYPEDEF(IChannelListEx, __uuidof(IChannelListEx));
_COM_SMARTPTR_TYPEDEF(IImportGroup, __uuidof(IImportGroup));
_COM_SMARTPTR_TYPEDEF(ICNTGroup, __uuidof(ICNTGroup));
_COM_SMARTPTR_TYPEDEF(ICntChannel, __uuidof(ICntChannel));
_COM_SMARTPTR_TYPEDEF(ITrigInfo, __uuidof(ITrigInfo));
_COM_SMARTPTR_TYPEDEF(IEvent, __uuidof(IEvent));
_COM_SMARTPTR_TYPEDEF(IEventList, __uuidof(IEventList));
_COM_SMARTPTR_TYPEDEF(IDisplayFrameTemplate, __uuidof(IDisplayFrameTemplate));
_COM_SMARTPTR_TYPEDEF(IDisplayFrameTemplates, __uuidof(IDisplayFrameTemplates));
_COM_SMARTPTR_TYPEDEF(IDisplayTemplate, __uuidof(IDisplayTemplate));
_COM_SMARTPTR_TYPEDEF(IIndexChanger, __uuidof(IIndexChanger));
_COM_SMARTPTR_TYPEDEF(IAxisViewInfo, __uuidof(IAxisViewInfo));
_COM_SMARTPTR_TYPEDEF(IAxisDef, __uuidof(IAxisDef));
_COM_SMARTPTR_TYPEDEF(IArrayInfo, __uuidof(IArrayInfo));
_COM_SMARTPTR_TYPEDEF(IMarkerOutput, __uuidof(IMarkerOutput));
_COM_SMARTPTR_TYPEDEF(IMarkerOwner, __uuidof(IMarkerOwner));
_COM_SMARTPTR_TYPEDEF(IProcessingMarker, __uuidof(IProcessingMarker));
_COM_SMARTPTR_TYPEDEF(IProcessingMarkerList, __uuidof(IProcessingMarkerList));
_COM_SMARTPTR_TYPEDEF(IInputCh, __uuidof(IInputCh));
_COM_SMARTPTR_TYPEDEF(ICppResamplerEngine, __uuidof(ICppResamplerEngine));
_COM_SMARTPTR_TYPEDEF(IApp, __uuidof(IApp));
_COM_SMARTPTR_TYPEDEF(IPlugin, __uuidof(IPlugin));
_COM_SMARTPTR_TYPEDEF(IPlugin2, __uuidof(IPlugin2));
_COM_SMARTPTR_TYPEDEF(ICustomExport, __uuidof(ICustomExport));
_COM_SMARTPTR_TYPEDEF(IPlugin3, __uuidof(IPlugin3));
_COM_SMARTPTR_TYPEDEF(ICustomExport2, __uuidof(ICustomExport2));
_COM_SMARTPTR_TYPEDEF(ICustomDAQ, __uuidof(ICustomDAQ));
_COM_SMARTPTR_TYPEDEF(IExportFrame, __uuidof(IExportFrame));
_COM_SMARTPTR_TYPEDEF(IVCContext, __uuidof(IVCContext));
_COM_SMARTPTR_TYPEDEF(IMathContext, __uuidof(IMathContext));
_COM_SMARTPTR_TYPEDEF(IMathFrameContext, __uuidof(IMathFrameContext));
_COM_SMARTPTR_TYPEDEF(IMath, __uuidof(IMath));
_COM_SMARTPTR_TYPEDEF(IMathObject, __uuidof(IMathObject));
_COM_SMARTPTR_TYPEDEF(IMathModule, __uuidof(IMathModule));
_COM_SMARTPTR_TYPEDEF(IMathObjContext, __uuidof(IMathObjContext));
_COM_SMARTPTR_TYPEDEF(IMathChannel, __uuidof(IMathChannel));
_COM_SMARTPTR_TYPEDEF(IInputSlot, __uuidof(IInputSlot));
_COM_SMARTPTR_TYPEDEF(IInputSlots, __uuidof(IInputSlots));
_COM_SMARTPTR_TYPEDEF(IAcceptChannel, __uuidof(IAcceptChannel));
_COM_SMARTPTR_TYPEDEF(IAcceptGroup, __uuidof(IAcceptGroup));

//
// Type library items
//

struct __declspec(uuid("c15bab67-52bb-4664-8c9d-e8cc1a1a4c44"))
IAppEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT OnGetData ( );
    HRESULT OnStartStoring ( );
    HRESULT OnStopStoring ( );
    HRESULT OnTrigger (
        long Mid,
        long Dir,
        double Time );
    HRESULT OnException (
        _bstr_t Str );
    HRESULT OnTriggerStop (
        long Mid,
        long Dir,
        double Time );
    HRESULT OnAlarm (
        long CondIndex,
        VARIANT_BOOL Status );
    HRESULT OnExit ( );
    HRESULT OnEvent (
        enum EventReason Reason,
        const _variant_t & Param );
    HRESULT OnDataLost ( );
    HRESULT OnGetTime (
        long * TimeLo,
        long * TimeHi );
    HRESULT OnMessageBox (
        _bstr_t Tex,
        _bstr_t Caption,
        long MsgType,
        long * Result );
    HRESULT OnProgress (
        long PercentDone );
};

struct __declspec(uuid("58a7d77d-64f1-4db8-a6cb-f2b4cab84056"))
App;
    // [ default ] interface IApp
    // [ default, source ] dispinterface IAppEvents

struct __declspec(uuid("8262475b-8f95-4917-a339-a343cb5d5065"))
IScreen : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetId))
    long Id;
    __declspec(property(get=GetIsCurrent))
    VARIANT_BOOL IsCurrent;
    __declspec(property(get=GetTemplateName))
    _bstr_t TemplateName;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    long GetId ( );
    HRESULT Show ( );
    VARIANT_BOOL GetIsCurrent ( );
    HRESULT SetCursor (
        long ACursor,
        double Time,
        VARIANT_BOOL AbsTime );
    HRESULT ZoomIn ( );
    HRESULT ZoomOut ( );
    double GetCursor (
        long ACursor,
        VARIANT_BOOL AbsTime );
    HRESULT AddControl (
        long Id );
    HRESULT RemoveControl (
        long Index );
    HRESULT AssignChannel (
        long ControlIndex,
        _bstr_t ChannelName );
    HRESULT UnassignChannel (
        long ControlIndex,
        long ControlChannelIndex );
    _bstr_t GetTemplateName ( );
    VARIANT_BOOL IsChannelAssigned (
        long ControlIndex,
        long ControlChannelIndex );
    HRESULT CopyImageToFile (
        long Width,
        long Height,
        long Background,
        _bstr_t FileName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_Show ( ) = 0;
      virtual HRESULT __stdcall get_IsCurrent (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall raw_SetCursor (
        /*[in]*/ long ACursor,
        /*[in]*/ double Time,
        /*[in]*/ VARIANT_BOOL AbsTime ) = 0;
      virtual HRESULT __stdcall raw_ZoomIn ( ) = 0;
      virtual HRESULT __stdcall raw_ZoomOut ( ) = 0;
      virtual HRESULT __stdcall raw_GetCursor (
        /*[in]*/ long ACursor,
        /*[in]*/ VARIANT_BOOL AbsTime,
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall raw_AddControl (
        /*[in]*/ long Id ) = 0;
      virtual HRESULT __stdcall raw_RemoveControl (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_AssignChannel (
        /*[in]*/ long ControlIndex,
        /*[in]*/ BSTR ChannelName ) = 0;
      virtual HRESULT __stdcall raw_UnassignChannel (
        /*[in]*/ long ControlIndex,
        /*[in]*/ long ControlChannelIndex ) = 0;
      virtual HRESULT __stdcall get_TemplateName (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall raw_IsChannelAssigned (
        /*[in]*/ long ControlIndex,
        /*[in]*/ long ControlChannelIndex,
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall raw_CopyImageToFile (
        /*[in]*/ long Width,
        /*[in]*/ long Height,
        /*[in]*/ long Background,
        /*[in]*/ BSTR FileName ) = 0;
};

struct __declspec(uuid("a3923065-75e3-4dfb-b049-5ccb981c15f3"))
IScreens : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IScreenPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetCurrent))
    IScreenPtr Current;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IScreenPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    IScreenPtr GetCurrent ( );
    HRESULT FindWidgetByID (
        _bstr_t WidgetUniqueID );
    VARIANT_BOOL IsReportGroupOwner (
        _bstr_t Datafile,
        _bstr_t GroupName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IScreen * * Value ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Value ) = 0;
      virtual HRESULT __stdcall get_Current (
        /*[out,retval]*/ struct IScreen * * Value ) = 0;
      virtual HRESULT __stdcall raw_FindWidgetByID (
        /*[in]*/ BSTR WidgetUniqueID ) = 0;
      virtual HRESULT __stdcall raw_IsReportGroupOwner (
        /*[in]*/ BSTR Datafile,
        /*[in]*/ BSTR GroupName,
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
};

struct __declspec(uuid("254bf4b3-cf9c-49a3-8f75-7ce35ef01a5d"))
IMasterClock : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    double GetCurrentTime ( );
    double GetAcqTime ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetCurrentTime (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall raw_GetAcqTime (
        /*[out,retval]*/ double * Value ) = 0;
};

struct __declspec(uuid("56102555-9e45-4ae6-b3be-a4d7f830296e"))
IAISetupScreen : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT ShowChannelSetup (
        long ChNo );
    HRESULT SetColumnVisible (
        long ColNo,
        VARIANT_BOOL Visible );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_ShowChannelSetup (
        /*[in]*/ long ChNo ) = 0;
      virtual HRESULT __stdcall raw_SetColumnVisible (
        /*[in]*/ long ColNo,
        /*[in]*/ VARIANT_BOOL Visible ) = 0;
};

struct __declspec(uuid("158b5c24-cf4d-4edf-b2c8-68d46a5cd676"))
IDaqChannel : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCardBitResolution))
    long CardBitResolution;
    __declspec(property(get=GetCustomSensorScale,put=PutCustomSensorScale))
    float CustomSensorScale;
    __declspec(property(get=GetCustomSensorOffset,put=PutCustomSensorOffset))
    float CustomSensorOffset;
    __declspec(property(get=GetCardGain))
    double CardGain;
    __declspec(property(get=GetCardOffset))
    double CardOffset;
    __declspec(property(get=GetModuleGain))
    double ModuleGain;
    __declspec(property(get=GetModuleOffset))
    double ModuleOffset;
    __declspec(property(get=GetModuleType))
    long ModuleType;
    __declspec(property(get=GetAutoZero,put=PutAutoZero))
    VARIANT_BOOL AutoZero;

    //
    // Wrapper methods for error-handling
    //

    double GetCardGain ( );
    double GetCardOffset ( );
    double GetModuleGain ( );
    double GetModuleOffset ( );
    long GetModuleType ( );
    VARIANT_BOOL GetAutoZero ( );
    void PutAutoZero (
        VARIANT_BOOL Value );
    HRESULT SetCardGain (
        float Gain );
    unsigned short GetBoardOpt (
        long Index );
    long GetCardBitResolution ( );
    float GetCustomSensorScale ( );
    void PutCustomSensorScale (
        float Value );
    float GetCustomSensorOffset ( );
    void PutCustomSensorOffset (
        float Value );
    HRESULT SetBoardOpt (
        long Index,
        unsigned short Used );
    VARIANT_BOOL SetSensor (
        _bstr_t SensorName );
    _bstr_t GetSensor ( );
    _bstr_t GetSensorType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CardGain (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall get_CardOffset (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall get_ModuleGain (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall get_ModuleOffset (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall get_ModuleType (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_AutoZero (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_AutoZero (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall raw_SetCardGain (
        /*[in]*/ float Gain ) = 0;
      virtual HRESULT __stdcall raw_GetBoardOpt (
        /*[in]*/ long Index,
        /*[out,retval]*/ unsigned short * Value ) = 0;
      virtual HRESULT __stdcall get_CardBitResolution (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_CustomSensorScale (
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall put_CustomSensorScale (
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall get_CustomSensorOffset (
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall put_CustomSensorOffset (
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetBoardOpt (
        /*[in]*/ long Index,
        /*[in]*/ unsigned short Used ) = 0;
      virtual HRESULT __stdcall raw_SetSensor (
        /*[in]*/ BSTR SensorName,
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall raw_GetSensor (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall raw_GetSensorType (
        /*[out,retval]*/ BSTR * Value ) = 0;
};

struct __declspec(uuid("0e036530-b449-4ebc-af84-fb2ca6675735"))
IVideoLoadEngine : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT GetFramesInfo (
        VARIANT * Frames );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetFramesInfo (
        /*[out]*/ VARIANT * Frames ) = 0;
};

struct __declspec(uuid("87d35b4c-8fa5-4080-9cde-ac49cada92c5"))
IVideoLoadEngines : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IVideoLoadEnginePtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    IVideoLoadEnginePtr GetItem (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Value ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IVideoLoadEngine * * Value ) = 0;
};

struct __declspec(uuid("97ff1354-fd61-4339-94c9-b36691410c4e"))
IPadData : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRangesCount))
    long RangesCount;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetModuleType))
    short ModuleType;
    __declspec(property(get=GetRangeCode,put=PutRangeCode))
    short RangeCode;
    __declspec(property(get=GetSpeedCode))
    short SpeedCode;
    __declspec(property(get=GetConfigCode))
    short ConfigCode;
    __declspec(property(get=GetData))
    float Data[];
    __declspec(property(get=GetAddress,put=PutAddress))
    short Address;
    __declspec(property(get=GetRanges))
    _bstr_t Ranges[];
    __declspec(property(get=GetRangeIndex))
    long RangeIndex[];

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    short GetModuleType ( );
    short GetSpeedCode ( );
    short GetConfigCode ( );
    _bstr_t CopyToString ( );
    float ModuleAmpl ( );
    float ModuleOffset ( );
    _bstr_t CopyUnitToString ( );
    _bstr_t ShortCopyToString ( );
    float GetData (
        long Index );
    short GetRangeCode ( );
    void PutRangeCode (
        short Value );
    short GetAddress ( );
    void PutAddress (
        short Value );
    _bstr_t GetRanges (
        long Index );
    long GetRangesCount ( );
    long GetRangeIndex (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall get_ModuleType (
        /*[out,retval]*/ short * Value ) = 0;
      virtual HRESULT __stdcall get_SpeedCode (
        /*[out,retval]*/ short * Value ) = 0;
      virtual HRESULT __stdcall get_ConfigCode (
        /*[out,retval]*/ short * Value ) = 0;
      virtual HRESULT __stdcall raw_CopyToString (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall raw_ModuleAmpl (
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall raw_ModuleOffset (
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall raw_CopyUnitToString (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall raw_ShortCopyToString (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall get_Data (
        /*[in]*/ long Index,
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall get_RangeCode (
        /*[out,retval]*/ short * Value ) = 0;
      virtual HRESULT __stdcall put_RangeCode (
        /*[in]*/ short Value ) = 0;
      virtual HRESULT __stdcall get_Address (
        /*[out,retval]*/ short * Value ) = 0;
      virtual HRESULT __stdcall put_Address (
        /*[in]*/ short Value ) = 0;
      virtual HRESULT __stdcall get_Ranges (
        /*[in]*/ long Index,
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall get_RangesCount (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_RangeIndex (
        /*[in]*/ long Index,
        /*[out,retval]*/ long * Value ) = 0;
};

struct __declspec(uuid("129fc1e1-2091-4789-978b-faa05f259260"))
IDaqData : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetModuleType,put=PutModuleType))
    short ModuleType;
    __declspec(property(get=GetAddress,put=PutAddress))
    short Address;
    __declspec(property(get=GetRangeCode,put=PutRangeCode))
    unsigned char RangeCode;
    __declspec(property(get=GetFilterCode,put=PutFilterCode))
    unsigned char FilterCode;
    __declspec(property(get=GetICPInput,put=PutICPInput))
    unsigned char ICPInput;
    __declspec(property(get=GetDaqNNamesCount))
    long DaqNNamesCount;
    __declspec(property(get=GetVRange,put=PutVRange))
    unsigned char VRange;
    __declspec(property(get=GetDaqNNames))
    _bstr_t DaqNNames[];
    __declspec(property(get=GetOverflow,put=PutOverflow))
    unsigned char Overflow;
    __declspec(property(get=GetCurrentSource,put=PutCurrentSource))
    unsigned char CurrentSource;
    __declspec(property(get=GetHighpassType,put=PutHighpassType))
    unsigned char HighpassType;
    __declspec(property(get=GetModuleError,put=PutModuleError))
    unsigned char ModuleError;
    __declspec(property(get=GetFREQAInputCoupling,put=PutFREQAInputCoupling))
    char FREQAInputCoupling;
    __declspec(property(get=GetRemote,put=PutRemote))
    unsigned char Remote;
    __declspec(property(get=GetRanges))
    _bstr_t Ranges[];
    __declspec(property(get=GetRangesCount))
    long RangesCount;
    __declspec(property(get=GetFREQAOutputFilter,put=PutFREQAOutputFilter))
    char FREQAOutputFilter;
    __declspec(property(get=GetFilters))
    _bstr_t Filters[];
    __declspec(property(get=GetFiltersCount))
    long FiltersCount;
    __declspec(property(get=GetFREQATriggerLevel,put=PutFREQATriggerLevel))
    float FREQATriggerLevel;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    _bstr_t CopyToString ( );
    _bstr_t ShortCopyToString ( );
    _bstr_t CopyUnitToString ( );
    float ModuleAmpl ( );
    float ModuleOffset ( );
    short GetAddress ( );
    void PutAddress (
        short Value );
    unsigned char GetRangeCode ( );
    void PutRangeCode (
        unsigned char Value );
    unsigned char GetFilterCode ( );
    void PutFilterCode (
        unsigned char Value );
    unsigned char GetICPInput ( );
    void PutICPInput (
        unsigned char Value );
    unsigned char GetVRange ( );
    void PutVRange (
        unsigned char Value );
    unsigned char GetOverflow ( );
    void PutOverflow (
        unsigned char Value );
    unsigned char GetCurrentSource ( );
    void PutCurrentSource (
        unsigned char Value );
    unsigned char GetHighpassType ( );
    void PutHighpassType (
        unsigned char Value );
    unsigned char GetModuleError ( );
    void PutModuleError (
        unsigned char Value );
    unsigned char GetRemote ( );
    void PutRemote (
        unsigned char Value );
    _bstr_t GetRanges (
        long ARangeCode );
    long GetRangesCount ( );
    _bstr_t GetFilters (
        unsigned char AFilterCode );
    long GetFiltersCount ( );
    short GetModuleType ( );
    void PutModuleType (
        short Value );
    long GetDaqNNamesCount ( );
    _bstr_t GetDaqNNames (
        short ANameCode );
    double ThermLinearize (
        double InputVoltage );
    char GetFREQAInputCoupling ( );
    void PutFREQAInputCoupling (
        char Value );
    char GetFREQAOutputFilter ( );
    void PutFREQAOutputFilter (
        char Value );
    float GetFREQATriggerLevel ( );
    void PutFREQATriggerLevel (
        float Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall raw_CopyToString (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall raw_ShortCopyToString (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall raw_CopyUnitToString (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall raw_ModuleAmpl (
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall raw_ModuleOffset (
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall get_Address (
        /*[out,retval]*/ short * Value ) = 0;
      virtual HRESULT __stdcall put_Address (
        /*[in]*/ short Value ) = 0;
      virtual HRESULT __stdcall get_RangeCode (
        /*[out,retval]*/ unsigned char * Value ) = 0;
      virtual HRESULT __stdcall put_RangeCode (
        /*[in]*/ unsigned char Value ) = 0;
      virtual HRESULT __stdcall get_FilterCode (
        /*[out,retval]*/ unsigned char * Value ) = 0;
      virtual HRESULT __stdcall put_FilterCode (
        /*[in]*/ unsigned char Value ) = 0;
      virtual HRESULT __stdcall get_ICPInput (
        /*[out,retval]*/ unsigned char * Value ) = 0;
      virtual HRESULT __stdcall put_ICPInput (
        /*[in]*/ unsigned char Value ) = 0;
      virtual HRESULT __stdcall get_VRange (
        /*[out,retval]*/ unsigned char * Value ) = 0;
      virtual HRESULT __stdcall put_VRange (
        /*[in]*/ unsigned char Value ) = 0;
      virtual HRESULT __stdcall get_Overflow (
        /*[out,retval]*/ unsigned char * Value ) = 0;
      virtual HRESULT __stdcall put_Overflow (
        /*[in]*/ unsigned char Value ) = 0;
      virtual HRESULT __stdcall get_CurrentSource (
        /*[out,retval]*/ unsigned char * Value ) = 0;
      virtual HRESULT __stdcall put_CurrentSource (
        /*[in]*/ unsigned char Value ) = 0;
      virtual HRESULT __stdcall get_HighpassType (
        /*[out,retval]*/ unsigned char * Value ) = 0;
      virtual HRESULT __stdcall put_HighpassType (
        /*[in]*/ unsigned char Value ) = 0;
      virtual HRESULT __stdcall get_ModuleError (
        /*[out,retval]*/ unsigned char * Value ) = 0;
      virtual HRESULT __stdcall put_ModuleError (
        /*[in]*/ unsigned char Value ) = 0;
      virtual HRESULT __stdcall get_Remote (
        /*[out,retval]*/ unsigned char * Value ) = 0;
      virtual HRESULT __stdcall put_Remote (
        /*[in]*/ unsigned char Value ) = 0;
      virtual HRESULT __stdcall get_Ranges (
        /*[in]*/ long ARangeCode,
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall get_RangesCount (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_Filters (
        /*[in]*/ unsigned char AFilterCode,
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall get_FiltersCount (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_ModuleType (
        /*[out,retval]*/ short * Value ) = 0;
      virtual HRESULT __stdcall put_ModuleType (
        /*[in]*/ short Value ) = 0;
      virtual HRESULT __stdcall get_DaqNNamesCount (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_DaqNNames (
        /*[in]*/ short ANameCode,
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall raw_ThermLinearize (
        /*[in]*/ double InputVoltage,
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall get_FREQAInputCoupling (
        /*[out,retval]*/ char * Value ) = 0;
      virtual HRESULT __stdcall put_FREQAInputCoupling (
        /*[in]*/ char Value ) = 0;
      virtual HRESULT __stdcall get_FREQAOutputFilter (
        /*[out,retval]*/ char * Value ) = 0;
      virtual HRESULT __stdcall put_FREQAOutputFilter (
        /*[in]*/ char Value ) = 0;
      virtual HRESULT __stdcall get_FREQATriggerLevel (
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall put_FREQATriggerLevel (
        /*[in]*/ float Value ) = 0;
};

struct __declspec(uuid("da7bd5dc-c815-4471-ada6-8b7be9126e1f"))
IModule : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIndex))
    short Index;
    __declspec(property(get=GetModuleType,put=PutModuleType))
    short ModuleType;
    __declspec(property(get=GetPadData))
    IPadDataPtr PadData;
    __declspec(property(get=GetDaqData))
    IDaqDataPtr DaqData;

    //
    // Wrapper methods for error-handling
    //

    short GetIndex ( );
    IPadDataPtr GetPadData ( );
    HRESULT SetPad (
        long NewAddress );
    HRESULT GetDataPad ( );
    IDaqDataPtr GetDaqData ( );
    VARIANT_BOOL SetDaq ( );
    HRESULT SetDaqAddress (
        long Address,
        long Timeout );
    VARIANT_BOOL FillModule (
        long Address,
        long Timeout );
    HRESULT DetectModule (
        long Address );
    short GetModuleType ( );
    void PutModuleType (
        short Value );
    HRESULT ClearModule ( );
    _bstr_t GetSerialNumber ( );
    HRESULT FREQAFindTriggerLevel ( );
    HRESULT SetModule (
        long SetType );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ short * Value ) = 0;
      virtual HRESULT __stdcall get_PadData (
        /*[out,retval]*/ struct IPadData * * Value ) = 0;
      virtual HRESULT __stdcall raw_SetPad (
        /*[in]*/ long NewAddress ) = 0;
      virtual HRESULT __stdcall raw_GetDataPad ( ) = 0;
      virtual HRESULT __stdcall get_DaqData (
        /*[out,retval]*/ struct IDaqData * * Value ) = 0;
      virtual HRESULT __stdcall raw_SetDaq (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall raw_SetDaqAddress (
        /*[in]*/ long Address,
        /*[in]*/ long Timeout ) = 0;
      virtual HRESULT __stdcall raw_FillModule (
        /*[in]*/ long Address,
        /*[in]*/ long Timeout,
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall raw_DetectModule (
        /*[in]*/ long Address ) = 0;
      virtual HRESULT __stdcall get_ModuleType (
        /*[out,retval]*/ short * Value ) = 0;
      virtual HRESULT __stdcall put_ModuleType (
        /*[in]*/ short Value ) = 0;
      virtual HRESULT __stdcall raw_ClearModule ( ) = 0;
      virtual HRESULT __stdcall raw_GetSerialNumber (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall raw_FREQAFindTriggerLevel ( ) = 0;
      virtual HRESULT __stdcall raw_SetModule (
        /*[in]*/ long SetType ) = 0;
};

struct __declspec(uuid("b37a70cb-5b08-490a-ae57-3d75f1c59b1c"))
IModules : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IModulePtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    IModulePtr GetItem (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Value ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IModule * * Value ) = 0;
};

struct __declspec(uuid("82d459fe-bc05-4ff2-8597-74bb45010608"))
IAveragedFFT : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLines,put=PutLines))
    long Lines;
    __declspec(property(get=GetAveCount,put=PutAveCount))
    long AveCount;
    __declspec(property(get=GetWindow,put=PutWindow))
    long Window;
    __declspec(property(get=GetAverageType,put=PutAverageType))
    long AverageType;
    __declspec(property(get=GetOverlap,put=PutOverlap))
    long Overlap;

    //
    // Wrapper methods for error-handling
    //

    long GetAverageType ( );
    void PutAverageType (
        long Value );
    long GetWindow ( );
    void PutWindow (
        long Value );
    long GetLines ( );
    void PutLines (
        long Value );
    long GetAveCount ( );
    void PutAveCount (
        long Value );
    HRESULT GetData (
        long ChNo,
        long OctaveDivider,
        long Weighting,
        long * BandCount,
        VARIANT * Data );
    HRESULT GetChannels (
        VARIANT * Channels );
    VARIANT_BOOL CalculateFromPos (
        long Mid,
        long Dir );
    long GetOverlap ( );
    void PutOverlap (
        long Value );
    HRESULT GetFFTData (
        long ChNo,
        long Weighting,
        long DCCutoff,
        VARIANT * Data );
    HRESULT GetCPBData (
        long ChNo,
        long OctaveDivider,
        long Weighting,
        long * BandCount,
        VARIANT * Data );
    HRESULT GetCPBXData (
        long ChNo,
        long OctaveDivider,
        long Weighting,
        long * BandCount,
        VARIANT * Data );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AverageType (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_AverageType (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Window (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Window (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Lines (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Lines (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_AveCount (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_AveCount (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_GetData (
        /*[in]*/ long ChNo,
        /*[in]*/ long OctaveDivider,
        /*[in]*/ long Weighting,
        /*[out]*/ long * BandCount,
        /*[out]*/ VARIANT * Data ) = 0;
      virtual HRESULT __stdcall raw_GetChannels (
        /*[out]*/ VARIANT * Channels ) = 0;
      virtual HRESULT __stdcall raw_CalculateFromPos (
        /*[in]*/ long Mid,
        /*[in]*/ long Dir,
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall get_Overlap (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Overlap (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_GetFFTData (
        /*[in]*/ long ChNo,
        /*[in]*/ long Weighting,
        /*[in]*/ long DCCutoff,
        /*[out]*/ VARIANT * Data ) = 0;
      virtual HRESULT __stdcall raw_GetCPBData (
        /*[in]*/ long ChNo,
        /*[in]*/ long OctaveDivider,
        /*[in]*/ long Weighting,
        /*[out]*/ long * BandCount,
        /*[out]*/ VARIANT * Data ) = 0;
      virtual HRESULT __stdcall raw_GetCPBXData (
        /*[in]*/ long ChNo,
        /*[in]*/ long OctaveDivider,
        /*[in]*/ long Weighting,
        /*[out]*/ long * BandCount,
        /*[out]*/ VARIANT * Data ) = 0;
};

struct __declspec(uuid("d7050b91-6a5d-4228-9378-0021325c815c"))
INothing : IDispatch
{};

struct __declspec(uuid("20627eb4-d51b-4267-a6cb-8c86112e7502"))
IPluginLicense : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    long GetRegTypeWanted ( );
    long GetTrustedCode (
        long Param );
    _bstr_t GetHardwareCode ( );
    VARIANT_BOOL SetLicenseCode (
        _bstr_t LicenseCode );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetRegTypeWanted (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_GetTrustedCode (
        /*[in]*/ long Param,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_GetHardwareCode (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall raw_SetLicenseCode (
        /*[in]*/ BSTR LicenseCode,
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
};

struct __declspec(uuid("fc698ce1-0973-498a-aa6b-2f82830be3a6"))
IDaqGroup : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IDaqChannelPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IDaqChannelPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IDaqChannel * * Value ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Value ) = 0;
};

struct __declspec(uuid("ceb1a90b-d594-47b5-a154-bb7b4603aca2"))
IFileNameSettings : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAutoCreate,put=PutAutoCreate))
    VARIANT_BOOL AutoCreate;
    __declspec(property(get=GetUseMultiFile,put=PutUseMultiFile))
    VARIANT_BOOL UseMultiFile;
    __declspec(property(get=GetBaseFileName,put=PutBaseFileName))
    _bstr_t BaseFileName;
    __declspec(property(get=GetUseTime,put=PutUseTime))
    VARIANT_BOOL UseTime;
    __declspec(property(get=GetUseDate,put=PutUseDate))
    VARIANT_BOOL UseDate;
    __declspec(property(get=GetAutoFlipFile,put=PutAutoFlipFile))
    short AutoFlipFile;
    __declspec(property(get=GetAutoFlipSize,put=PutAutoFlipSize))
    float AutoFlipSize;
    __declspec(property(get=GetAutoFlipUnit,put=PutAutoFlipUnit))
    long AutoFlipUnit;
    __declspec(property(get=GetAutoFlipAbsTime,put=PutAutoFlipAbsTime))
    VARIANT_BOOL AutoFlipAbsTime;
    __declspec(property(get=GetMultiFileStartIndex,put=PutMultiFileStartIndex))
    long MultiFileStartIndex;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetAutoCreate ( );
    void PutAutoCreate (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetUseMultiFile ( );
    void PutUseMultiFile (
        VARIANT_BOOL Value );
    _bstr_t GetBaseFileName ( );
    void PutBaseFileName (
        _bstr_t Value );
    VARIANT_BOOL GetUseTime ( );
    void PutUseTime (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetUseDate ( );
    void PutUseDate (
        VARIANT_BOOL Value );
    short GetAutoFlipFile ( );
    void PutAutoFlipFile (
        short Value );
    float GetAutoFlipSize ( );
    void PutAutoFlipSize (
        float Value );
    long GetAutoFlipUnit ( );
    void PutAutoFlipUnit (
        long Value );
    VARIANT_BOOL GetAutoFlipAbsTime ( );
    void PutAutoFlipAbsTime (
        VARIANT_BOOL Value );
    long GetMultiFileStartIndex ( );
    void PutMultiFileStartIndex (
        long Value );
    HRESULT AutoFlipUnits (
        _bstr_t PluginGUID,
        VARIANT * Units );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AutoCreate (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_AutoCreate (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_UseMultiFile (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_UseMultiFile (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_BaseFileName (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_BaseFileName (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_UseTime (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_UseTime (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_UseDate (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_UseDate (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_AutoFlipFile (
        /*[out,retval]*/ short * Value ) = 0;
      virtual HRESULT __stdcall put_AutoFlipFile (
        /*[in]*/ short Value ) = 0;
      virtual HRESULT __stdcall get_AutoFlipSize (
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall put_AutoFlipSize (
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall get_AutoFlipUnit (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_AutoFlipUnit (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_AutoFlipAbsTime (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_AutoFlipAbsTime (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_MultiFileStartIndex (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_MultiFileStartIndex (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_AutoFlipUnits (
        /*[in]*/ BSTR PluginGUID,
        /*[out]*/ VARIANT * Units ) = 0;
};

struct __declspec(uuid("e39d43bc-bfb8-4d48-af5b-53eba55c8817"))
IPluginChannel : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLongName,put=PutLongName))
    _bstr_t LongName;
    __declspec(property(get=GetPluginGUID))
    _bstr_t PluginGUID;
    __declspec(property(get=GetDefaultRes,put=PutDefaultRes))
    long DefaultRes;
    __declspec(property(get=GetAlwaysReserveMemoryInSetup,put=PutAlwaysReserveMemoryInSetup))
    VARIANT_BOOL AlwaysReserveMemoryInSetup;
    __declspec(property(get=GetDefaultMax,put=PutDefaultMax))
    double DefaultMax;
    __declspec(property(get=GetDefaultMin,put=PutDefaultMin))
    double DefaultMin;
    __declspec(property(get=GetAsyncBufSize,put=PutAsyncBufSize))
    long AsyncBufSize;

    //
    // Wrapper methods for error-handling
    //

    HRESULT ReserveMemory (
        long DBSize );
    HRESULT FreeMemory ( );
    HRESULT SetIndex (
        long Level,
        const _variant_t & Ind );
    HRESULT SetChNo (
        _bstr_t Value );
    HRESULT SetSettings (
        _bstr_t Value );
    _bstr_t GetLongName ( );
    void PutLongName (
        _bstr_t Value );
    HRESULT MarkAsOffline ( );
    _bstr_t GetPluginGUID ( );
    long GetDefaultRes ( );
    void PutDefaultRes (
        long Value );
    VARIANT_BOOL GetAlwaysReserveMemoryInSetup ( );
    void PutAlwaysReserveMemoryInSetup (
        VARIANT_BOOL Value );
    double GetDefaultMax ( );
    void PutDefaultMax (
        double Value );
    double GetDefaultMin ( );
    void PutDefaultMin (
        double Value );
    long GetAsyncBufSize ( );
    void PutAsyncBufSize (
        long Value );
    HRESULT SetCalcSingleValue (
        VARIANT_BOOL Value );
    HRESULT SetCanOverload (
        VARIANT_BOOL Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_ReserveMemory (
        /*[in]*/ long DBSize ) = 0;
      virtual HRESULT __stdcall raw_FreeMemory ( ) = 0;
      virtual HRESULT __stdcall raw_SetIndex (
        /*[in]*/ long Level,
        /*[in]*/ VARIANT Ind ) = 0;
      virtual HRESULT __stdcall raw_SetChNo (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall raw_SetSettings (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_LongName (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_LongName (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall raw_MarkAsOffline ( ) = 0;
      virtual HRESULT __stdcall get_PluginGUID (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall get_DefaultRes (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_DefaultRes (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_AlwaysReserveMemoryInSetup (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_AlwaysReserveMemoryInSetup (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_DefaultMax (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_DefaultMax (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_DefaultMin (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_DefaultMin (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_AsyncBufSize (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_AsyncBufSize (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetCalcSingleValue (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall raw_SetCanOverload (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
};

struct __declspec(uuid("04242cbe-cf38-4a86-b54b-d78a9b64e0fb"))
IDiscreteItem : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetColor,put=PutColor))
    long Color;

    //
    // Wrapper methods for error-handling
    //

    long GetValue ( );
    void PutValue (
        long Value );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t Value );
    long GetColor ( );
    void PutColor (
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ long Value ) = 0;
};

struct __declspec(uuid("53330bbc-6b11-4805-8c41-48b13047dc42"))
IDiscreteList : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IDiscreteItemPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    HRESULT Remove (
        long Ind );
    IDiscreteItemPtr GetItem (
        long Index );
    IDiscreteItemPtr Add ( );
    IDiscreteItemPtr Find (
        long Val );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Value ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ long Ind ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IDiscreteItem * * Value ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IDiscreteItem * * Value ) = 0;
      virtual HRESULT __stdcall raw_Find (
        /*[in]*/ long Val,
        /*[out,retval]*/ struct IDiscreteItem * * Value ) = 0;
};

struct __declspec(uuid("b2fdbf74-7a7d-4be1-bfdc-59f364f320dc"))
IGHObject : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetData,put=PutData))
    _bstr_t Data;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetObjType))
    long ObjType;
    __declspec(property(get=GetSubList,put=PutSubList))
    _variant_t SubList;
    __declspec(property(get=GetUniqueID,put=PutUniqueID))
    _bstr_t UniqueID;
    __declspec(property(get=GetDataType,put=PutDataType))
    long DataType;
    __declspec(property(get=GetDefaultData,put=PutDefaultData))
    _bstr_t DefaultData;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetData ( );
    void PutData (
        _bstr_t Value );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t Value );
    long GetObjType ( );
    _variant_t GetSubList ( );
    void PutSubList (
        const _variant_t & Value );
    HRESULT SetObjType (
        long Value );
    _bstr_t GetUniqueID ( );
    void PutUniqueID (
        _bstr_t Value );
    long GetDataType ( );
    void PutDataType (
        long Value );
    _bstr_t GetDefaultData ( );
    void PutDefaultData (
        _bstr_t Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Data (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_Data (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_ObjType (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_SubList (
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall put_SubList (
        /*[in]*/ VARIANT Value ) = 0;
      virtual HRESULT __stdcall raw_SetObjType (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_UniqueID (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_UniqueID (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_DataType (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_DataType (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_DefaultData (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_DefaultData (
        /*[in]*/ BSTR Value ) = 0;
};

struct __declspec(uuid("14bb3a33-f7a5-4656-8c94-3b529d7306b0"))
IGlobalHeader : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IGHObjectPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    IGHObjectPtr GetItem (
        long Ind );
    IGHObjectPtr Add ( );
    HRESULT Remove (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Value ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Ind,
        /*[out,retval]*/ struct IGHObject * * Value ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IGHObject * * Value ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ long Index ) = 0;
};

struct __declspec(uuid("f8f34a4f-cbad-4240-9daf-c226282b8615"))
ITiming : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTracking))
    VARIANT_BOOL Tracking;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetTracking ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Tracking (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
};

struct __declspec(uuid("5c45f430-ee53-49dc-935b-36314a52d438"))
IDewePlugin : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT OnMessage (
        long Msg,
        const _variant_t & InParam,
        VARIANT * OutParam );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_OnMessage (
        /*[in]*/ long Msg,
        /*[in]*/ VARIANT InParam,
        /*[in,out]*/ VARIANT * OutParam ) = 0;
};

struct __declspec(uuid("e3638e01-ed8e-40c4-baac-d00b5b023ea7"))
IPluginChannelXMLHelper : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    _variant_t FindNode (
        long IndexLevel,
        const _variant_t & Ind,
        VARIANT_BOOL ChannelNode,
        VARIANT_BOOL AllowCreate );
    HRESULT StartExtractChannels ( );
    VARIANT_BOOL ExtractNextChannel (
        long * IndexLevel,
        VARIANT * Ind );
    HRESULT MountAllChannels ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_FindNode (
        /*[in]*/ long IndexLevel,
        /*[in]*/ VARIANT Ind,
        /*[in]*/ VARIANT_BOOL ChannelNode,
        /*[in]*/ VARIANT_BOOL AllowCreate,
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall raw_StartExtractChannels ( ) = 0;
      virtual HRESULT __stdcall raw_ExtractNextChannel (
        /*[out]*/ long * IndexLevel,
        /*[out]*/ VARIANT * Ind,
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall raw_MountAllChannels ( ) = 0;
};

struct __declspec(uuid("5649e2dc-2ef0-4d1d-8e23-2a0dc041d0a5"))
IRegistrationHelper : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT CheckRegistration ( );
    VARIANT_BOOL ActiveLicenseIncludes (
        GUID Guid );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_CheckRegistration ( ) = 0;
      virtual HRESULT __stdcall raw_ActiveLicenseIncludes (
        /*[in]*/ GUID Guid,
        /*[out,retval]*/ VARIANT_BOOL * Allows ) = 0;
};

struct __declspec(uuid("39f60bb4-26eb-47c1-884a-d10114fa06e7"))
IAmplifier : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    long IOControl (
        long IOCode,
        const _variant_t & InParam,
        VARIANT * OutParam );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_IOControl (
        /*[in]*/ long IOCode,
        /*[in]*/ VARIANT InParam,
        /*[out]*/ VARIANT * OutParam,
        /*[out,retval]*/ long * Value ) = 0;
};

struct __declspec(uuid("24428804-6902-4cc5-808c-86b362414bda"))
IAmplChain : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAmplifierPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    IAmplifierPtr GetItem (
        long Index );
    long IOControl (
        long IOCode,
        const _variant_t & InParam,
        VARIANT * OutParam );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Value ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAmplifier * * Value ) = 0;
      virtual HRESULT __stdcall raw_IOControl (
        /*[in]*/ long IOCode,
        /*[in]*/ VARIANT InParam,
        /*[out]*/ VARIANT * OutParam,
        /*[out,retval]*/ long * Value ) = 0;
};

struct __declspec(uuid("01c5e234-c56d-4fa3-8c77-e1ad0484790d"))
IAmplChainList : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAmplChainPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    IAmplChainPtr GetItem (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Value ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAmplChain * * Value ) = 0;
};

struct __declspec(uuid("40aadaed-bcc1-4134-b154-de6e016de703"))
IAmplInterface : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetChainList))
    IAmplChainListPtr ChainList;
    __declspec(property(get=GetSubInterface))
    IAmplInterfacePtr SubInterface;

    //
    // Wrapper methods for error-handling
    //

    IAmplChainListPtr GetChainList ( );
    IAmplInterfacePtr GetSubInterface ( );
    long IOControl (
        long IOCode,
        const _variant_t & InParam,
        VARIANT * OutParam );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ChainList (
        /*[out,retval]*/ struct IAmplChainList * * Value ) = 0;
      virtual HRESULT __stdcall get_SubInterface (
        /*[out,retval]*/ struct IAmplInterface * * Value ) = 0;
      virtual HRESULT __stdcall raw_IOControl (
        /*[in]*/ long IOCode,
        /*[in]*/ VARIANT InParam,
        /*[out]*/ VARIANT * OutParam,
        /*[out,retval]*/ long * Value ) = 0;
};

struct __declspec(uuid("2e02870e-2b86-40be-bad3-1ff6ff4d03c9"))
IAmplInterfaces : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMainInterface))
    IAmplInterfacePtr MainInterface;

    //
    // Wrapper methods for error-handling
    //

    IAmplInterfacePtr GetMainInterface ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MainInterface (
        /*[out,retval]*/ struct IAmplInterface * * Value ) = 0;
};

struct __declspec(uuid("b05e7b8b-09a8-418e-8b32-922bd729f1ad"))
IImportChannel : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDefaultRes,put=PutDefaultRes))
    long DefaultRes;

    //
    // Wrapper methods for error-handling
    //

    long GetDefaultRes ( );
    void PutDefaultRes (
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DefaultRes (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_DefaultRes (
        /*[in]*/ long Value ) = 0;
};

struct __declspec(uuid("06ed52b2-5a28-4564-99ce-10ed7a82f933"))
IPluginLicense2 : IPluginLicense
{
    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetLicenseCode (
        VARIANT_BOOL Builtin );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetLicenseCode (
        /*[in]*/ VARIANT_BOOL Builtin,
        /*[out,retval]*/ BSTR * Value ) = 0;
};

struct __declspec(uuid("6d30b59f-0060-40db-b6b2-7f87465ce3b7"))
IOfflineCalc : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT StoreCalculatedChannels ( );
    HRESULT Calculate ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_StoreCalculatedChannels ( ) = 0;
      virtual HRESULT __stdcall raw_Calculate ( ) = 0;
};

struct __declspec(uuid("062c4672-b1c5-43fa-8c77-62c1dcb928f0"))
ICustomDAQ2 : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT OnMessage (
        long Msg,
        const _variant_t & InParam,
        VARIANT * OutParam );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_OnMessage (
        /*[in]*/ long Msg,
        /*[in]*/ VARIANT InParam,
        /*[in,out]*/ VARIANT * OutParam,
        /*[out,retval]*/ HRESULT * Value ) = 0;
};

struct __declspec(uuid("c58c7b68-e2f7-478a-acf7-11b8d6a16509"))
IDigitalTrigLevel : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTrigType))
    long TrigType;
    __declspec(property(get=GetCoupling))
    long Coupling;
    __declspec(property(get=GetTrigLevel))
    long TrigLevel;
    __declspec(property(get=GetReTrigLevel))
    long ReTrigLevel;

    //
    // Wrapper methods for error-handling
    //

    long GetTrigType ( );
    long GetCoupling ( );
    long GetTrigLevel ( );
    long GetReTrigLevel ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TrigType (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_Coupling (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_TrigLevel (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_ReTrigLevel (
        /*[out,retval]*/ long * Value ) = 0;
};

struct __declspec(uuid("aa6c3d58-ed6d-4529-aaf8-ecb0a682a270"))
ISyncSource : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSampleRate,put=PutSampleRate))
    double SampleRate;
    __declspec(property(get=GetIsSyncSource,put=PutIsSyncSource))
    VARIANT_BOOL IsSyncSource;

    //
    // Wrapper methods for error-handling
    //

    double GetSampleRate ( );
    void PutSampleRate (
        double Value );
    VARIANT_BOOL GetIsSyncSource ( );
    void PutIsSyncSource (
        VARIANT_BOOL Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SampleRate (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_SampleRate (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_IsSyncSource (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_IsSyncSource (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
};

struct __declspec(uuid("1d828c6f-8559-4000-84b1-570451541753"))
ICANMsg : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT AddData (
        const _variant_t & Data,
        double TimeStamp );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AddData (
        /*[in]*/ VARIANT Data,
        /*[in]*/ double TimeStamp ) = 0;
};

struct __declspec(uuid("953fd7c5-a46c-4f92-a229-220a12a1a115"))
ICANPortContext : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetListenOnly))
    VARIANT_BOOL ListenOnly;
    __declspec(property(get=GetUsed))
    VARIANT_BOOL Used;
    __declspec(property(get=GetBaudRate))
    long BaudRate;
    __declspec(property(get=GetTermination))
    VARIANT_BOOL Termination;
    __declspec(property(get=GetCaptured))
    VARIANT_BOOL Captured;

    //
    // Wrapper methods for error-handling
    //

    ICANMsgPtr GetMsg (
        long ArbId,
        VARIANT_BOOL Extended,
        long DLC );
    HRESULT SetTotalMsgCount (
        long Value );
    HRESULT SetErrMsgCount (
        long Value );
    VARIANT_BOOL GetListenOnly ( );
    VARIANT_BOOL GetUsed ( );
    long GetBaudRate ( );
    VARIANT_BOOL GetTermination ( );
    VARIANT_BOOL GetCaptured ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetMsg (
        /*[in]*/ long ArbId,
        /*[in]*/ VARIANT_BOOL Extended,
        /*[in]*/ long DLC,
        /*[out,retval]*/ struct ICANMsg * * Value ) = 0;
      virtual HRESULT __stdcall raw_SetTotalMsgCount (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetErrMsgCount (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_ListenOnly (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall get_Used (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall get_BaudRate (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_Termination (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall get_Captured (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
};

struct __declspec(uuid("6dd0e754-22ab-4687-8fd4-28d9475cd02c"))
ICANContext : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetPorts))
    ICANPortContextPtr Ports[];
    __declspec(property(get=GetPortCount))
    long PortCount;

    //
    // Wrapper methods for error-handling
    //

    ICANPortContextPtr GetPorts (
        long Index );
    long GetPortCount ( );
    double GetClock ( );
    double GetClockOffset ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Ports (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct ICANPortContext * * Value ) = 0;
      virtual HRESULT __stdcall get_PortCount (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_GetClock (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall raw_GetClockOffset (
        /*[out,retval]*/ double * Value ) = 0;
};

struct __declspec(uuid("0ab26cc9-1f8f-4289-9f0e-6fb42ba4cac0"))
IProjectManager : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL ChangeProject (
        _bstr_t ProjectName );
    _bstr_t GetCurrentProject ( );
    _variant_t GetProjects ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_ChangeProject (
        /*[in]*/ BSTR ProjectName,
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall raw_GetCurrentProject (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall raw_GetProjects (
        /*[out,retval]*/ VARIANT * Value ) = 0;
};

struct __declspec(uuid("cc93ddf0-d660-47bf-97d8-368afce0a6be"))
IDIPort : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT ApplyDBBuf ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_ApplyDBBuf ( ) = 0;
};

struct __declspec(uuid("a727cf4a-fbaf-45f6-bc6a-8a58e05aeb3f"))
IDIGroup : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IDIPortPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    IDIPortPtr GetItem (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Value ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IDIPort * * Value ) = 0;
};

struct __declspec(uuid("1a6efdac-300e-40d7-8a4e-0f4c370993dd"))
IDIChannel : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDIFilter))
    long DIFilter;
    __declspec(property(get=GetDIInvert))
    VARIANT_BOOL DIInvert;
    __declspec(property(get=GetTrigLevels))
    IDigitalTrigLevelPtr TrigLevels;

    //
    // Wrapper methods for error-handling
    //

    long GetDIFilter ( );
    VARIANT_BOOL GetDIInvert ( );
    IDigitalTrigLevelPtr GetTrigLevels ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DIFilter (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_DIInvert (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall get_TrigLevels (
        /*[out,retval]*/ struct IDigitalTrigLevel * * Value ) = 0;
};

struct __declspec(uuid("999f8e10-ec80-4d2a-a785-c1fd3cb87f22"))
IVideoFrame : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBufSize))
    long BufSize;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetData ( );
    long GetBufSize ( );
    double GetTS ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetData (
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall get_BufSize (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_GetTS (
        /*[out,retval]*/ double * Value ) = 0;
};

struct __declspec(uuid("c102fc8b-bfde-4d2f-954c-062cf19eaa6b"))
ICamera : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFrameList))
    IVideoFramePtr FrameList[];
    __declspec(property(get=GetFrameBufSize))
    long FrameBufSize;
    __declspec(property(get=GetFramePos))
    long FramePos;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetFrameDataSize))
    long FrameDataSize;
    __declspec(property(get=GetFrameSizeInBytes))
    long FrameSizeInBytes;
    __declspec(property(get=GetUsed))
    VARIANT_BOOL Used;
    __declspec(property(get=GetDisplayName))
    _bstr_t DisplayName;

    //
    // Wrapper methods for error-handling
    //

    IVideoFramePtr GetFrameList (
        long Index );
    _variant_t GetBitmapInfoHeader ( );
    long GetFrameBufSize ( );
    long GetFramePos ( );
    _bstr_t GetName ( );
    long GetFrameDataSize ( );
    long GetFrameSizeInBytes ( );
    VARIANT_BOOL GetUsed ( );
    HRESULT Start ( );
    HRESULT Stop ( );
    _variant_t TakeSnapshot ( );
    _bstr_t GetDisplayName ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FrameList (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IVideoFrame * * Value ) = 0;
      virtual HRESULT __stdcall raw_GetBitmapInfoHeader (
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall get_FrameBufSize (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_FramePos (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall get_FrameDataSize (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_FrameSizeInBytes (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_Used (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall raw_Start ( ) = 0;
      virtual HRESULT __stdcall raw_Stop ( ) = 0;
      virtual HRESULT __stdcall raw_TakeSnapshot (
        /*[out,retval]*/ VARIANT * Param1 ) = 0;
      virtual HRESULT __stdcall get_DisplayName (
        /*[out,retval]*/ BSTR * Value ) = 0;
};

struct __declspec(uuid("85163d18-0a7e-4844-93eb-f9a0c4c43968"))
IVideo : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCameraCount))
    long CameraCount;
    __declspec(property(get=GetCameras))
    ICameraPtr Cameras[];

    //
    // Wrapper methods for error-handling
    //

    long GetCameraCount ( );
    ICameraPtr GetCameras (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CameraCount (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_Cameras (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct ICamera * * Value ) = 0;
};

struct __declspec(uuid("daa5f907-902b-4d5b-982b-4afcb191eeb1"))
IViewInfo : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAxisViewType,put=PutAxisViewType))
    long AxisViewType;
    __declspec(property(get=GetDefaultVC,put=PutDefaultVC))
    long DefaultVC;

    //
    // Wrapper methods for error-handling
    //

    long GetAxisViewType ( );
    void PutAxisViewType (
        long Value );
    long GetDefaultVC ( );
    void PutDefaultVC (
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AxisViewType (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_AxisViewType (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_DefaultVC (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_DefaultVC (
        /*[in]*/ long Value ) = 0;
};

struct __declspec(uuid("4e5157c0-cb61-4a6e-8183-e4d747568c21"))
ILockableCursor : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetPosition,put=PutPosition))
    double Position;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetLocked ( );
    double GetPosition ( );
    void PutPosition (
        double Value );
    HRESULT Lock ( );
    HRESULT Unlock ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall raw_Lock ( ) = 0;
      virtual HRESULT __stdcall raw_Unlock ( ) = 0;
};

struct __declspec(uuid("b2ede09d-d64b-4ef2-aefd-6945a76dfac4"))
ILockableCursors : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    ILockableCursorPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    ILockableCursorPtr GetItem (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Value ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct ILockableCursor * * Value ) = 0;
};

struct __declspec(uuid("83054c30-0f5b-433d-9863-e521c5ca254b"))
IMathItem2 : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    long IOControl (
        long Msg,
        const _variant_t & InParam,
        VARIANT * OutParam );
    IUnknownPtr GetImplObject ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_IOControl (
        /*[in]*/ long Msg,
        /*[in]*/ VARIANT InParam,
        /*[in,out]*/ VARIANT * OutParam,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_GetImplObject (
        /*[out,retval]*/ IUnknown * * Data ) = 0;
};

struct __declspec(uuid("44a1b53f-7d56-41dd-a654-17d9b638b77c"))
IDwXMLNode : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT SetValue (
        _bstr_t Value );
    HRESULT AddChild (
        struct IDwXMLNode * Node );
    HRESULT RemoveChildNode (
        struct IDwXMLNode * Node );
    HRESULT ClearChildNodes ( );
    IDwXMLNodePtr FindChildNode (
        _bstr_t NodeName );
    IDwXMLNodePtr GetChild (
        long I );
    long GetChildCount ( );
    IDwXMLNodePtr Clone ( );
    IDwXMLNodePtr GetNextSibling ( );
    HRESULT AddAttrNode (
        struct IDwXMLNode * AttrNode );
    HRESULT RemoveAttrNode (
        struct IDwXMLNode * AttrNode );
    IDwXMLNodePtr FindAttrNode (
        _bstr_t AttrNodeName );
    IDwXMLNodePtr GetAttr (
        long I );
    long GetAttrCount ( );
    HRESULT ClearAttrNodes ( );
    _bstr_t GetName ( );
    _bstr_t GetValue ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SetValue (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall raw_AddChild (
        /*[in]*/ struct IDwXMLNode * Node ) = 0;
      virtual HRESULT __stdcall raw_RemoveChildNode (
        /*[in]*/ struct IDwXMLNode * Node ) = 0;
      virtual HRESULT __stdcall raw_ClearChildNodes ( ) = 0;
      virtual HRESULT __stdcall raw_FindChildNode (
        /*[in]*/ BSTR NodeName,
        /*[out,retval]*/ struct IDwXMLNode * * Node ) = 0;
      virtual HRESULT __stdcall raw_GetChild (
        /*[in]*/ long I,
        /*[out,retval]*/ struct IDwXMLNode * * Node ) = 0;
      virtual HRESULT __stdcall raw_GetChildCount (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_Clone (
        /*[out,retval]*/ struct IDwXMLNode * * Node ) = 0;
      virtual HRESULT __stdcall raw_GetNextSibling (
        /*[out,retval]*/ struct IDwXMLNode * * Node ) = 0;
      virtual HRESULT __stdcall raw_AddAttrNode (
        /*[in]*/ struct IDwXMLNode * AttrNode ) = 0;
      virtual HRESULT __stdcall raw_RemoveAttrNode (
        /*[in]*/ struct IDwXMLNode * AttrNode ) = 0;
      virtual HRESULT __stdcall raw_FindAttrNode (
        /*[in]*/ BSTR AttrNodeName,
        /*[out,retval]*/ struct IDwXMLNode * * Node ) = 0;
      virtual HRESULT __stdcall raw_GetAttr (
        /*[in]*/ long I,
        /*[out,retval]*/ struct IDwXMLNode * * Node ) = 0;
      virtual HRESULT __stdcall raw_GetAttrCount (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_ClearAttrNodes ( ) = 0;
      virtual HRESULT __stdcall raw_GetName (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall raw_GetValue (
        /*[out,retval]*/ BSTR * Value ) = 0;
};

struct __declspec(uuid("f9c98ee1-7c70-43b6-b757-6fdc23cc58ad"))
ISequencer : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;

    //
    // Wrapper methods for error-handling
    //

    HRESULT ImportSeqVariables (
        _bstr_t FileName );
    HRESULT ExportSeqVariables (
        _bstr_t FileName );
    HRESULT StopSequence ( );
    _bstr_t GetName ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_ImportSeqVariables (
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall raw_ExportSeqVariables (
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall raw_StopSequence ( ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Value ) = 0;
};

struct __declspec(uuid("aee49e04-2a77-4647-b39c-99ff64b384d9"))
IVariableChannel : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT SetControlValue (
        double Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SetControlValue (
        /*[in]*/ double Value ) = 0;
};

struct __declspec(uuid("fa9adfd0-98d2-483e-bb09-591cfb634b01"))
IUIHelper : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT AddMUI (
        void * Param1 );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AddMUI (
        /*[in]*/ void * Param1 ) = 0;
};

struct __declspec(uuid("70a1113c-15c8-45df-ad86-7acbfb11b3da"))
IMeasUnit : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetUsed,put=PutUsed))
    VARIANT_BOOL Used;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetUsed ( );
    void PutUsed (
        VARIANT_BOOL Value );
    HRESULT SendCustomCommand (
        _bstr_t CmdIn,
        _bstr_t DataIn,
        BSTR * CmdOut,
        BSTR * DataOut );
    HRESULT EnterSync ( );
    HRESULT LeaveSync ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Used (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Used (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall raw_SendCustomCommand (
        /*[in]*/ BSTR CmdIn,
        /*[in]*/ BSTR DataIn,
        /*[out]*/ BSTR * CmdOut,
        /*[out]*/ BSTR * DataOut ) = 0;
      virtual HRESULT __stdcall raw_EnterSync ( ) = 0;
      virtual HRESULT __stdcall raw_LeaveSync ( ) = 0;
};

struct __declspec(uuid("0d7aa807-a31e-4096-b52a-df597c053587"))
IRemoteManager : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IMeasUnitPtr Item[];
    __declspec(property(get=GetConnected))
    VARIANT_BOOL Connected;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetConnected ( );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    IMeasUnitPtr GetItem (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Connected (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Value ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IMeasUnit * * Value ) = 0;
};

struct __declspec(uuid("ceb5afb5-7ac3-4115-b60b-b3322b19f5d1"))
IVCProperty : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetId))
    _bstr_t Id;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetRightText,put=PutRightText))
    _bstr_t RightText;
    __declspec(property(get=GetDescription,put=PutDescription))
    _bstr_t Description;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetIndent,put=PutIndent))
    long Indent;
    __declspec(property(get=GetAllowUnified,put=PutAllowUnified))
    VARIANT_BOOL AllowUnified;
    __declspec(property(get=GetDefaultButtonIndex,put=PutDefaultButtonIndex))
    long DefaultButtonIndex;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetId ( );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t Value );
    _bstr_t GetRightText ( );
    void PutRightText (
        _bstr_t Value );
    _bstr_t GetDescription ( );
    void PutDescription (
        _bstr_t Value );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL Value );
    long GetIndent ( );
    void PutIndent (
        long Value );
    HRESULT AddButton (
        _bstr_t Hint,
        _bstr_t IconName );
    VARIANT_BOOL GetAllowUnified ( );
    void PutAllowUnified (
        VARIANT_BOOL Value );
    long GetDefaultButtonIndex ( );
    void PutDefaultButtonIndex (
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_RightText (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_RightText (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_Description (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Indent (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Indent (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_AddButton (
        /*[in]*/ BSTR Hint,
        /*[in]*/ BSTR IconName ) = 0;
      virtual HRESULT __stdcall get_AllowUnified (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_AllowUnified (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_DefaultButtonIndex (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_DefaultButtonIndex (
        /*[in]*/ long Value ) = 0;
};

struct __declspec(uuid("6f818df3-5fb4-413b-a4c7-0e734acd7ac4"))
IVCIntegerProperty : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetMinValue,put=PutMinValue))
    long MinValue;
    __declspec(property(get=GetMaxValue,put=PutMaxValue))
    long MaxValue;

    //
    // Wrapper methods for error-handling
    //

    long GetValue ( );
    void PutValue (
        long Value );
    long GetMinValue ( );
    void PutMinValue (
        long Value );
    long GetMaxValue ( );
    void PutMaxValue (
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_MinValue (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_MinValue (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_MaxValue (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_MaxValue (
        /*[in]*/ long Value ) = 0;
};

struct __declspec(uuid("61b5989d-5b64-42a0-bc43-631c9c6999e7"))
IVCColorProperty : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetColor,put=PutColor))
    long Color;

    //
    // Wrapper methods for error-handling
    //

    long GetColor ( );
    void PutColor (
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ long Value ) = 0;
};

struct __declspec(uuid("a5ea1e02-f560-4db9-a85d-a7ed8be5fae5"))
IVCFloatProperty : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetValue,put=PutValue))
    double Value;
    __declspec(property(get=GetMinValue,put=PutMinValue))
    double MinValue;
    __declspec(property(get=GetMaxValue,put=PutMaxValue))
    double MaxValue;

    //
    // Wrapper methods for error-handling
    //

    double GetValue ( );
    void PutValue (
        double Value );
    double GetMinValue ( );
    void PutMinValue (
        double Value );
    double GetMaxValue ( );
    void PutMaxValue (
        double Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_MinValue (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_MinValue (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_MaxValue (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_MaxValue (
        /*[in]*/ double Value ) = 0;
};

struct __declspec(uuid("fdb7daea-a9ea-4809-9101-a53e57e3766b"))
IVCTextProperty : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetValue,put=PutValue))
    _bstr_t Value;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetValue ( );
    void PutValue (
        _bstr_t Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ BSTR Value ) = 0;
};

struct __declspec(uuid("332dd867-fe98-4284-9184-5c4a04e61be8"))
IVCSelectProperty : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItemIndex,put=PutItemIndex))
    long ItemIndex;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    long GetItemIndex ( );
    void PutItemIndex (
        long Value );
    long GetCount ( );
    HRESULT Add (
        _bstr_t Item );
    HRESULT Clear ( );
    _bstr_t Item (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ItemIndex (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_ItemIndex (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Item ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ BSTR * Value ) = 0;
};

struct __declspec(uuid("693fc2c1-ab56-4d99-ba5a-508b1956c2ea"))
IVCCheckBoxProperty : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetChecked,put=PutChecked))
    VARIANT_BOOL Checked;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetChecked ( );
    void PutChecked (
        VARIANT_BOOL Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Checked (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Checked (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
};

struct __declspec(uuid("01451b04-cf12-4183-9681-47d59563f6fa"))
IAcqLoop : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMaxUpdateRateMode,put=PutMaxUpdateRateMode))
    VARIANT_BOOL MaxUpdateRateMode;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetMaxUpdateRateMode ( );
    void PutMaxUpdateRateMode (
        VARIANT_BOOL Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MaxUpdateRateMode (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_MaxUpdateRateMode (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
};

struct __declspec(uuid("741407bd-5878-42b6-8de3-30468eab47e4"))
IVCSearchProperty : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItemIndex,put=PutItemIndex))
    long ItemIndex;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    long GetItemIndex ( );
    void PutItemIndex (
        long Value );
    long GetCount ( );
    HRESULT Add (
        _bstr_t Item );
    HRESULT Clear ( );
    _bstr_t Item (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ItemIndex (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_ItemIndex (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Item ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ BSTR * Value ) = 0;
};

struct __declspec(uuid("46d31c0c-521f-4e84-bf6d-0551cee2c923"))
IVCPropertiesGroup : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetId))
    _bstr_t Id;
    __declspec(property(get=GetExpanded,put=PutExpanded))
    VARIANT_BOOL Expanded;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetMinPropertyTextWidth,put=PutMinPropertyTextWidth))
    long MinPropertyTextWidth;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    void PutName (
        _bstr_t Value );
    IVCIntegerPropertyPtr AddIntegerProperty (
        _bstr_t PropertyID,
        _bstr_t Name );
    IVCPropertyPtr FindProperty (
        _bstr_t PropertyID );
    _bstr_t GetId ( );
    IVCColorPropertyPtr AddColorProperty (
        _bstr_t PropertyID,
        _bstr_t Name );
    IVCFloatPropertyPtr AddFloatProperty (
        _bstr_t PropertyID,
        _bstr_t Name );
    IVCTextPropertyPtr AddTextProperty (
        _bstr_t PropertyID,
        _bstr_t Name );
    IVCSelectPropertyPtr AddSelectProperty (
        _bstr_t PropertyID,
        _bstr_t Name );
    IVCCheckBoxPropertyPtr AddCheckBoxProperty (
        _bstr_t PropertyID,
        _bstr_t Name );
    IVCPropertyPtr AddLabelProperty (
        _bstr_t PropertyID,
        _bstr_t Name );
    VARIANT_BOOL GetExpanded ( );
    void PutExpanded (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL Value );
    IVCSearchPropertyPtr AddSearchProperty (
        _bstr_t PropertyID,
        _bstr_t Name );
    long GetMinPropertyTextWidth ( );
    void PutMinPropertyTextWidth (
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall raw_AddIntegerProperty (
        /*[in]*/ BSTR PropertyID,
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IVCIntegerProperty * * Value ) = 0;
      virtual HRESULT __stdcall raw_FindProperty (
        /*[in]*/ BSTR PropertyID,
        /*[out,retval]*/ struct IVCProperty * * Value ) = 0;
      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall raw_AddColorProperty (
        /*[in]*/ BSTR PropertyID,
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IVCColorProperty * * Value ) = 0;
      virtual HRESULT __stdcall raw_AddFloatProperty (
        /*[in]*/ BSTR PropertyID,
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IVCFloatProperty * * Value ) = 0;
      virtual HRESULT __stdcall raw_AddTextProperty (
        /*[in]*/ BSTR PropertyID,
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IVCTextProperty * * Value ) = 0;
      virtual HRESULT __stdcall raw_AddSelectProperty (
        /*[in]*/ BSTR PropertyID,
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IVCSelectProperty * * Value ) = 0;
      virtual HRESULT __stdcall raw_AddCheckBoxProperty (
        /*[in]*/ BSTR PropertyID,
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IVCCheckBoxProperty * * Value ) = 0;
      virtual HRESULT __stdcall raw_AddLabelProperty (
        /*[in]*/ BSTR PropertyID,
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IVCProperty * * Value ) = 0;
      virtual HRESULT __stdcall get_Expanded (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Expanded (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall raw_AddSearchProperty (
        /*[in]*/ BSTR PropertyID,
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IVCSearchProperty * * Value ) = 0;
      virtual HRESULT __stdcall get_MinPropertyTextWidth (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_MinPropertyTextWidth (
        /*[in]*/ long Value ) = 0;
};

struct __declspec(uuid("48b39869-9b9a-4d13-8763-a595b4155c57"))
IVCProperties : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IVCPropertiesGroupPtr FindGroup (
        _bstr_t GroupID );
    IVCPropertyPtr FindProperty (
        _bstr_t GroupID,
        _bstr_t PropertyID );
    IVCPropertiesGroupPtr AddOrFindGroup (
        _bstr_t GroupID );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_FindGroup (
        /*[in]*/ BSTR GroupID,
        /*[out,retval]*/ struct IVCPropertiesGroup * * Value ) = 0;
      virtual HRESULT __stdcall raw_FindProperty (
        /*[in]*/ BSTR GroupID,
        /*[in]*/ BSTR PropertyID,
        /*[out,retval]*/ struct IVCProperty * * Value ) = 0;
      virtual HRESULT __stdcall raw_AddOrFindGroup (
        /*[in]*/ BSTR GroupID,
        /*[out,retval]*/ struct IVCPropertiesGroup * * Value ) = 0;
};

struct __declspec(uuid("317f5d39-7aea-46fc-9398-cb96d978d73d"))
IResamplerChannel : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT SetInterpolate (
        long InterpolationType );
    _variant_t GetTimesBuffer ( );
    _variant_t GetDoubleValuesBuffer ( );
    _variant_t GetBinaryPointersBuffer ( );
    _variant_t GetBinarySizesBuffer ( );
    _variant_t GetDirectDataBuffer ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SetInterpolate (
        /*[in]*/ long InterpolationType ) = 0;
      virtual HRESULT __stdcall raw_GetTimesBuffer (
        /*[out,retval]*/ VARIANT * Pointer ) = 0;
      virtual HRESULT __stdcall raw_GetDoubleValuesBuffer (
        /*[out,retval]*/ VARIANT * Pointer ) = 0;
      virtual HRESULT __stdcall raw_GetBinaryPointersBuffer (
        /*[out,retval]*/ VARIANT * Pointer ) = 0;
      virtual HRESULT __stdcall raw_GetBinarySizesBuffer (
        /*[out,retval]*/ VARIANT * Pointer ) = 0;
      virtual HRESULT __stdcall raw_GetDirectDataBuffer (
        /*[out,retval]*/ VARIANT * Pointer ) = 0;
};

struct __declspec(uuid("2525da0a-b39e-48de-a4b7-48e0f637a0c5"))
IRTModule : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetDataModule))
    IUnknownPtr DataModule;
    __declspec(property(get=GetModuleId))
    _bstr_t ModuleId;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr GetDataModule ( );
    _bstr_t GetModuleId ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DataModule (
        /*[out,retval]*/ IUnknown * * Value ) = 0;
      virtual HRESULT __stdcall get_ModuleId (
        /*[out,retval]*/ BSTR * Value ) = 0;
};

struct __declspec(uuid("908cbc49-c871-4622-a041-62831e4b1c26"))
IRTCore : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetData))
    IUnknownPtr Data;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr GetData ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Data (
        /*[out,retval]*/ IUnknown * * Value ) = 0;
};

struct __declspec(uuid("8349dfe4-587a-429c-bcb7-e377505fc3a4"))
IReport : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsInReportingMode))
    VARIANT_BOOL IsInReportingMode;

    //
    // Wrapper methods for error-handling
    //

    HRESULT OpenWidgetInCurrentWordDocument (
        _bstr_t WidgetID );
    HRESULT SetActiveDocument (
        _bstr_t DocumentFilePath );
    HRESULT OnWordShutdown ( );
    _bstr_t GetActiveDocument ( );
    HRESULT LinkDewesoftToWord (
        _bstr_t DocumentName );
    HRESULT UpdateSelectedWidget ( );
    VARIANT_BOOL GetIsInReportingMode ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_OpenWidgetInCurrentWordDocument (
        /*[in]*/ BSTR WidgetID ) = 0;
      virtual HRESULT __stdcall raw_SetActiveDocument (
        /*[in]*/ BSTR DocumentFilePath ) = 0;
      virtual HRESULT __stdcall raw_OnWordShutdown ( ) = 0;
      virtual HRESULT __stdcall raw_GetActiveDocument (
        /*[out,retval]*/ BSTR * DocumentName ) = 0;
      virtual HRESULT __stdcall raw_LinkDewesoftToWord (
        /*[in]*/ BSTR DocumentName ) = 0;
      virtual HRESULT __stdcall raw_UpdateSelectedWidget ( ) = 0;
      virtual HRESULT __stdcall get_IsInReportingMode (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
};

struct __declspec(uuid("e67e5bf0-5dbd-4619-9c37-9cd01d701387"))
IGenericBitmap : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetWidth))
    long Width;
    __declspec(property(get=GetHeight))
    long Height;
    __declspec(property(get=GetBitDepth))
    long BitDepth;
    __declspec(property(get=GetScanLineSize))
    long ScanLineSize;
    __declspec(property(get=GetReferenceCount))
    long ReferenceCount;

    //
    // Wrapper methods for error-handling
    //

    long AddReference ( );
    long ReleaseReference ( );
    HRESULT Resize (
        long W,
        long H );
    HRESULT SetData (
        __int64 Data );
    long GetWidth ( );
    long GetHeight ( );
    long GetBitDepth ( );
    long GetScanLineSize ( );
    __int64 GetScanLine (
        long I );
    long GetReferenceCount ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AddReference (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_ReleaseReference (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_Resize (
        /*[in]*/ long W,
        /*[in]*/ long H ) = 0;
      virtual HRESULT __stdcall raw_SetData (
        /*[in]*/ __int64 Data ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_BitDepth (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_ScanLineSize (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_GetScanLine (
        /*[in]*/ long I,
        /*[out,retval]*/ __int64 * Value ) = 0;
      virtual HRESULT __stdcall get_ReferenceCount (
        /*[out,retval]*/ long * Value ) = 0;
};

struct __declspec(uuid("1515619c-fe53-4a69-803e-707b131b66d6"))
IGDIBitmap : IGenericBitmap
{
    //
    // Property data
    //

    __declspec(property(get=GetDC))
    __int64 DC;

    //
    // Wrapper methods for error-handling
    //

    __int64 GetDC ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DC (
        /*[out,retval]*/ __int64 * Value ) = 0;
};

enum __declspec(uuid("c98512aa-1356-44f6-aacb-a466a6998d93"))
MenuItems
{
    ItemSaveSetup = 0,
    ItemSaveSetupAs = 1,
    ItemLoadSetup = 2
};

enum __declspec(uuid("fef026de-47e5-475f-bbe2-90fd45416dd1"))
ExportTypes
{
    etValueBased = 0,
    etChannelBased = 1
};

enum __declspec(uuid("41973fe5-943d-43e2-8f5f-b8c0a34e22c3"))
ConnTypes
{
    ctLast = 0,
    ctOverlap = 1,
    ctTrigger = 2,
    ctNew = 3
};

enum __declspec(uuid("6e384ac0-ca49-4130-9f8a-ab4f974513e0"))
EventReason
{
    erGetData = 0,
    erStartStoring = 1,
    erStopStoring = 2,
    erTrigger = 3,
    erException = 4,
    erTriggerStop = 5,
    erAlarm = 6,
    erExit = 7,
    erDataLost = 8,
    erMessageBox = 9,
    erProgress = 10,
    erStopAcquisition = 11
};

enum __declspec(uuid("75f3611e-bb01-4f33-892c-55fe5a11de96"))
EventType
{
    etText = 21,
    etKeyboard = 20,
    etVoice = 22,
    etPicture = 23,
    etModule = 24,
    etStart = 1,
    etStop = 2,
    etTrigger = 3,
    etVStart = 11,
    etVStop = 12
};

struct __declspec(uuid("97c5783f-0b84-47d9-8294-9f33b2739076"))
IStoreEngine : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStoring))
    VARIANT_BOOL Storing;
    __declspec(property(get=GetStoreMode))
    long StoreMode;
    __declspec(property(get=GetIsTriggering))
    VARIANT_BOOL IsTriggering;
    __declspec(property(get=GetFileSize))
    unsigned __int64 FileSize;
    __declspec(property(get=GetFileName))
    _bstr_t FileName;
    __declspec(property(get=GetTrackingOffset))
    double TrackingOffset;
    __declspec(property(get=GetPaused))
    VARIANT_BOOL Paused;
    __declspec(property(get=GetAllowIBSkipping,put=PutAllowIBSkipping))
    VARIANT_BOOL AllowIBSkipping;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetStoring ( );
    long GetStoreMode ( );
    VARIANT_BOOL GetIsTriggering ( );
    unsigned __int64 GetFileSize ( );
    HRESULT AddNewEvent (
        enum EventType Type_,
        const _variant_t & Data );
    _bstr_t GetFileName ( );
    double GetTrackingOffset ( );
    HRESULT StartStoreTimeChanged ( );
    VARIANT_BOOL GetPaused ( );
    VARIANT_BOOL GetAllowIBSkipping ( );
    void PutAllowIBSkipping (
        VARIANT_BOOL Value );
    HRESULT StartNewMultifile ( );
    HRESULT AddNewEventWithTime (
        enum EventType Type_,
        const _variant_t & Data,
        double Time );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Storing (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall get_StoreMode (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_IsTriggering (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall get_FileSize (
        /*[out,retval]*/ unsigned __int64 * Value ) = 0;
      virtual HRESULT __stdcall raw_AddNewEvent (
        /*[in]*/ enum EventType Type_,
        /*[in]*/ VARIANT Data ) = 0;
      virtual HRESULT __stdcall get_FileName (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall get_TrackingOffset (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall raw_StartStoreTimeChanged ( ) = 0;
      virtual HRESULT __stdcall get_Paused (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall get_AllowIBSkipping (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_AllowIBSkipping (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall raw_StartNewMultifile ( ) = 0;
      virtual HRESULT __stdcall raw_AddNewEventWithTime (
        /*[in]*/ enum EventType Type_,
        /*[in]*/ VARIANT Data,
        /*[in]*/ double Time ) = 0;
};

enum __declspec(uuid("d1b0a3f4-1f61-48ef-87bf-5b11727d706d"))
AOOperationMode
{
    aomFixed = 0,
    aomSweep = 1,
    aomStepSweep = 2,
    aomBurst = 3,
    aomChirp = 4
};

enum __declspec(uuid("12f8dd91-00ea-4fb5-b72f-64261bc6e4c5"))
AOSweepMode
{
    aosSingle = 0,
    aosLoop = 1
};

enum __declspec(uuid("1f6111e5-7777-4a16-b9f3-e9f03e71a7e8"))
AOWaveForm
{
    aowSine = 0,
    aowTrian = 1,
    aowRect = 2,
    aowSaw = 3,
    aowWhiteNoise = 4,
    aowArbitrary = 5
};

struct __declspec(uuid("c6e7dd46-7bca-42f3-9ac7-0077d19d4ecf"))
IAOChannel : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetWaveForm,put=PutWaveForm))
    enum AOWaveForm WaveForm;
    __declspec(property(get=GetAmpl,put=PutAmpl))
    float Ampl;
    __declspec(property(get=GetOffset,put=PutOffset))
    float Offset;
    __declspec(property(get=GetPhase,put=PutPhase))
    float Phase;
    __declspec(property(get=GetFilterType,put=PutFilterType))
    long FilterType;
    __declspec(property(get=GetFilterProtoType,put=PutFilterProtoType))
    long FilterProtoType;
    __declspec(property(get=GetFilterOrder,put=PutFilterOrder))
    long FilterOrder;
    __declspec(property(get=GetFilterFreq2,put=PutFilterFreq2))
    float FilterFreq2;
    __declspec(property(get=GetFilterFreq1,put=PutFilterFreq1))
    float FilterFreq1;
    __declspec(property(get=GetRange,put=PutRange))
    long Range;

    //
    // Wrapper methods for error-handling
    //

    enum AOWaveForm GetWaveForm ( );
    void PutWaveForm (
        enum AOWaveForm Value );
    float GetAmpl ( );
    void PutAmpl (
        float Value );
    float GetOffset ( );
    void PutOffset (
        float Value );
    float GetPhase ( );
    void PutPhase (
        float Value );
    long GetFilterType ( );
    void PutFilterType (
        long Value );
    long GetFilterProtoType ( );
    void PutFilterProtoType (
        long Value );
    long GetFilterOrder ( );
    void PutFilterOrder (
        long Value );
    float GetFilterFreq2 ( );
    void PutFilterFreq2 (
        float Value );
    float GetFilterFreq1 ( );
    void PutFilterFreq1 (
        float Value );
    long GetRange ( );
    void PutRange (
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_WaveForm (
        /*[out,retval]*/ enum AOWaveForm * Value ) = 0;
      virtual HRESULT __stdcall put_WaveForm (
        /*[in]*/ enum AOWaveForm Value ) = 0;
      virtual HRESULT __stdcall get_Ampl (
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall put_Ampl (
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall get_Offset (
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall put_Offset (
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall get_Phase (
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall put_Phase (
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall get_FilterType (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_FilterType (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_FilterProtoType (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_FilterProtoType (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_FilterOrder (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_FilterOrder (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_FilterFreq2 (
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall put_FilterFreq2 (
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall get_FilterFreq1 (
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall put_FilterFreq1 (
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall get_Range (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Range (
        /*[in]*/ long Value ) = 0;
};

enum __declspec(uuid("7c31b33e-796e-48a9-9d29-3f64c5201079"))
TSRDivType
{
    sdSkip = 0,
    sdFilter = 2
};

enum __declspec(uuid("6ee206ab-a139-4604-b7bc-4d8c56f62d10"))
GHObjectType
{
    gtInput = 1,
    gtFileName = 5,
    gtSelection = 2,
    gtDir = 4,
    gtMemo = 3,
    gtDivision = 6,
    gtSound = 7
};

enum __declspec(uuid("9f3f5561-398e-4916-b71e-eefc0aefed88"))
EventIDs
{
    evOnInitiateAcq = 100,
    evOnAlarmEx = 101,
    evOnGetSampleRates = 102,
    evOnSetSampleRate = 103,
    evOnInitiateSetup = 104,
    evOnInitiateHardware = 105,
    evHasAbsoluteClock = 106,
    evOnCheckSampleRate = 107,
    evOnUpdateXML = 108,
    evIsMasterClock = 109,
    evShowAnalysisFrame = 110,
    evUpdateAnalysisFrame = 111,
    evRepaintAnalysisFrame = 112,
    evHideAnalysisFrame = 113,
    evResizeAnalysisFrame = 114,
    evStartAnalysis = 115,
    evStopAnalysis = 116,
    evCalculateAnalysis = 117,
    evPrepareAnalysis = 118,
    evAfterLoadFile = 119,
    evPreInitiate = 120,
    evOnUpdateHWXML = 121,
    evGetIndexLevelName = 122,
    evGetInputGroups = 123,
    evGetReplayMode = 124,
    evSetRegistrationHelper = 125,
    evSetDWVersion = 126,
    evNewDataFileCreated = 127,
    evGetStartErrorParams = 128,
    evEstablishConnections = 129,
    evEnterHardwareSetup = 130,
    evChannelRemoved = 131,
    evGetDisabledChannels = 132,
    evOnEnterPluginSetupScreen = 133,
    evOnLeavePluginSetupScreen = 134,
    evGetFreeCode = 135,
    evGetMaxCalcDelay = 136,
    evOnPrepareAcq = 137,
    evFileStoringFinished = 138,
    evEnableZero = 139,
    evOnSetZero = 140,
    evOnClearData = 141,
    evHasDisplayTemplate = 142,
    evUpdateDisplayTemplate = 143,
    evOnChannelValueChanged = 144,
    evOnChannelEnabled = 145,
    evChangeIndex = 146,
    evGetDisplayName = 147,
    evOnBeforeGetData = 148,
    evReadBuildInLicense = 149,
    evWriteBuildInLicense = 150,
    evSupportsBuildInLicense = 151,
    evSampleRateChanged = 152,
    evIsFullOfflineCalc = 153,
    evOnEnterAnalysisPluginSetupScreen = 154,
    evOnLeaveAnalysisPluginSetupScreen = 155,
    evGetDataStarted = 156,
    evResizeHWFrame = 157,
    evOnUpdateDwXML = 158,
    evOnUpdateDwHWXML = 159,
    evNeedsCalcSingleValue = 160,
    evOnEnterAnalysisMode = 161,
    evOnEnterMeasureMode = 162,
    evClearCalc = 163,
    evStopCalc = 164,
    evUpdatePermissions = 165,
    evNeedsUpdateSetup = 166,
    evCustomNetCommandRecieved = 167,
    evSendCustomNetCommand = 168,
    evHasMUI = 169,
    evSetMUI = 170,
    evMeasUnitsConnected = 171,
    evMeasUnitsDisconnected = 172,
    evUseDebugMUI = 173,
    evOnBeforeStartSetup = 174,
    evGetAuthSecret = 175,
    evGetAuthCode = 176,
    evUpdateTopology = 177,
    evMUIVersion = 178,
    evShowSetupMUI = 179,
    evHideSetupMUI = 180,
    evShowSettingsMUI = 181,
    evHideSettingsMUI = 182,
    evOnEnterDisplay = 183,
    evOnLeaveDisplay = 184,
    evShowAnalysisMUI = 185,
    evHideAnalysisMUI = 186,
    evRTLoadDependencies = 187,
    evBinaryLicenseSupport = 188,
    evReadBuildInLicenseBinary = 189,
    evWriteBuildInLicenseBinary = 190,
    evOnShowChannelSettings = 191,
    evOnHideChannelSettings = 192,
    evOnResizeChannelSettings = 193,
    evIsRtClock = 194,
    evShowDeviceSettingsMUI = 202,
    evHideDeviceSettingsMUI = 203,
    evShowDeviceSettings = 204,
    evHideDeviceSettings = 205
};

struct __declspec(uuid("bea4a4fb-010a-4d58-9140-729783ed0f99"))
IPlugin4 : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT OnEvent (
        enum EventIDs EventID,
        const _variant_t & InParam,
        VARIANT * OutParam );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_OnEvent (
        /*[in]*/ enum EventIDs EventID,
        /*[in]*/ VARIANT InParam,
        /*[in,out]*/ VARIANT * OutParam ) = 0;
};

enum __declspec(uuid("4081a3cb-4839-4f96-a040-308a7df50ec2"))
CustomVCMessages
{
    vcVersionCheck = 0,
    vcDrawData = 1,
    vcInit = 2,
    vcAcceptChannel = 3,
    vcSave = 4,
    vcLoad = 5,
    vcGetDataRegion = 6,
    vcMouseWheel = 7,
    vcMouseWheelUp = 8,
    vcMouseWheelDown = 9,
    vcMouseUp = 10,
    vcMouseDown = 11,
    vcMouseMove = 12,
    vcMouseClick = 13,
    vcMouseDblClick = 14,
    vcKeyDown = 15,
    vcKeyUp = 16,
    vcKeyChar = 17,
    vcStartAcq = 18,
    vcShowFrame = 19,
    vcHideFrame = 20,
    vcInitFrame = 21,
    vcResizeFrame = 22,
    vcResize = 23,
    vcAcceptInputGroup = 24,
    vcMouseEnter = 25,
    vcMouseLeave = 26,
    vcInitScreen = 27,
    vcAddChannel = 28,
    vcAddInputGroup = 29,
    vcSupportsCopyDataToClipboard = 30,
    vcCopyDataToClipboard = 31,
    vcUpdateXML = 32,
    vcUpdateDwXML = 33,
    vcInitVisualProperties = 34,
    vcUpdateVisualProperties = 35,
    vcVisualPropertyChanged = 36,
    vcVisualPropertyButtonClick = 37,
    vcEnterDisplay = 38,
    vcLeaveDisplay = 39,
    vcSupportsCopyDataToString = 40,
    vcCopyDataToString = 41,
    vcDrawCanvasData = 42,
    vcInitInputSlots = 43,
    vcUpdateInputSlots = 44,
    vcInputSlotChanged = 45,
    vcInputSlotCountChanged = 46,
    vcInputSlotAdded = 47,
    vcInputSlotRemoved = 48,
    vcInputSlotInserted = 49,
    vcInputSlotConnected = 50,
    vcInputSlotDisconnected = 51,
    vcImportXML = 52
};

enum __declspec(uuid("f3cf5784-0639-41d7-a6bc-80212c6527b1"))
CustomMathMessages
{
    mthVersionCheck = 0,
    mthInit = 1,
    mthInitiate = 2,
    mthCalculate = 3,
    mthReset = 4,
    mthMountChannels = 5,
    mthGetProps = 6,
    mthSetProps = 7,
    mthGetDescription = 8,
    mthSampleRateChanged = 9,
    mthAcceptInputChannel = 10,
    mthGetOutChDescription = 11,
    mthGetInputChannels = 12,
    mthUpdateXML = 13,
    mthPreInitiate = 14,
    mthGetInputGroups = 15,
    mthClearCalc = 16,
    mthStopCalc = 17,
    mthDeinit = 18,
    mthGetDefaultChannelName = 19,
    mthGetDefaultChannelColor = 20,
    mthGetRecalcOnPosChanged = 21,
    mthGetRegistration = 22,
    mthGetCurrentPass = 23,
    mthPassStarted = 24,
    mthPassCompleted = 25,
    mthUpdateDisplayTemplate = 26,
    mthSetCalcDelay = 27,
    mthMountDynamicChannels = 28,
    mthClearInstances = 29,
    mthChannelsChangedAfterCopyProps = 30,
    mthHasDynamicChannels = 31,
    mthIsFullOfflineCalc = 32,
    mthGetCustomError = 33,
    mthHasCalcDelay = 34,
    mthChannelRemoved = 35,
    mthGetInputUsed = 36,
    mthIsMultipass = 37,
    mthBeforePreInitiate = 38,
    mthGetPointer = 39,
    mthReadProjectSettings = 40,
    mthHandleAlarm = 41,
    mthHandleOleMsg = 42,
    mthCustomNetCommandRecieved = 43,
    mthInitMarker = 44,
    mthEstablishConnections = 45,
    mthMarkerInputChanged = 46,
    mthMessageReceived = 47,
    mthGetWarning = 48,
    mthMarkerSetupChanged = 49
};

enum __declspec(uuid("7d1500d2-b292-4781-897d-364c41b47b56"))
CustomMathFrameMessages
{
    mfrVersionCheck = 0,
    mfrShowFrame = 1,
    mfrHideFrame = 2,
    mfrResizeFrame = 3,
    mfrSetFrame = 4,
    mfrInitFrame = 5,
    mfrSetContext = 6,
    mfrSetObject = 7,
    mfrSetModule = 8,
    mfrSampleRateChanged = 9,
    mfrUpdateXML = 10
};

enum __declspec(uuid("b56de8ed-f8da-4859-9307-1ced09b40088"))
XMLType
{
    xmlFile = 0,
    xmlString = 1,
    xmlMSXML = 2
};

struct __declspec(uuid("c4a25fdc-9f2e-413d-9ec8-8df43bd210ca"))
IPowerModule : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFFTSampleRate))
    float FFTSampleRate;
    __declspec(property(get=GetFFTBlockSize))
    long FFTBlockSize;
    __declspec(property(get=GetModuleIndex))
    long ModuleIndex;

    //
    // Wrapper methods for error-handling
    //

    HRESULT LoadFromXML (
        enum XMLType AType,
        const _variant_t & XML );
    HRESULT SaveToXML (
        enum XMLType AType,
        VARIANT * XML );
    HRESULT GetFFT (
        long ValueType,
        long Phase,
        VARIANT * Data );
    float GetFFTSampleRate ( );
    long GetFFTBlockSize ( );
    long GetModuleIndex ( );
    HRESULT SaveToXML1 (
        long AType,
        VARIANT * XML );
    HRESULT LoadFromXML1 (
        long AType,
        const _variant_t & XML );
    _variant_t GetVectorScopeData ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_LoadFromXML (
        /*[in]*/ enum XMLType AType,
        /*[in]*/ VARIANT XML ) = 0;
      virtual HRESULT __stdcall raw_SaveToXML (
        /*[in]*/ enum XMLType AType,
        /*[in,out]*/ VARIANT * XML ) = 0;
      virtual HRESULT __stdcall raw_GetFFT (
        /*[in]*/ long ValueType,
        /*[in]*/ long Phase,
        /*[out]*/ VARIANT * Data ) = 0;
      virtual HRESULT __stdcall get_FFTSampleRate (
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall get_FFTBlockSize (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_ModuleIndex (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_SaveToXML1 (
        /*[in]*/ long AType,
        /*[out]*/ VARIANT * XML ) = 0;
      virtual HRESULT __stdcall raw_LoadFromXML1 (
        /*[in]*/ long AType,
        /*[in]*/ VARIANT XML ) = 0;
      virtual HRESULT __stdcall raw_GetVectorScopeData (
        /*[out,retval]*/ VARIANT * Value ) = 0;
};

struct __declspec(uuid("2cd91570-4eef-4ab9-a24c-d3c663b4f5b1"))
IPowerModules : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IPowerModulePtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    IPowerModulePtr GetItem (
        long Index );
    IPowerModulePtr Add ( );
    HRESULT Remove (
        long Ind );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Value ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IPowerModule * * Value ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IPowerModule * * Value ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ long Ind ) = 0;
};

enum __declspec(uuid("da607018-e48b-4c72-8e3d-1ab24c664b7e"))
ModulesFunction
{
    mfBridgeZeroAll = 0,
    mfAmplZeroAll = 1,
    mfShortOnOffAll = 2,
    mfShuntOnOffAll = 3,
    mfShuntCalCheckAll = 4,
    mfChargeBZeroAll = 5,
    mfFreqAFindTriggerAll = 6,
    mfDAQP_MDAQ_SetPowerOnDefaultAll = 7,
    mfDAQP_ResetPowerOnDefaultAll = 8,
    mfMDAQ_CalFileClearAll = 9,
    mfBridgeZeroByGroupID = 10,
    mfAmplZeroByGroupID = 11,
    mfShuntCalCheckByGroupID = 12,
    mfSetHighestRangeAll = 13,
    mfSetBestRangeAll = 14,
    mfSetHighestFilterAll = 15,
    mfSetFilter40PerOfSRAll = 16,
    mfSetFilterCustomAll = 17,
    mfSetHighestRangeByGroupID = 18,
    mfSetBestRangeByGroupID = 19,
    mfSetHighestFilterByGroupID = 20,
    mfSetFilter40PerOfSRByGroupID = 21,
    mfSetFilterCustomByGroupID = 22,
    mfRescanDAQPAt = 23,
    mfRescanMDAQAt = 24,
    mfRescanPADAt = 25,
    mfRescanDAQPMDAQAll = 26,
    mfRescanPADAll = 27,
    mfRescanMSIAt = 28,
    mfRescanMSIAll = 29,
    mfRescanDLRAll = 30,
    mfResetFirstScan = 31,
    mfBridgeZeroResetAll = 32,
    mfBridgeZeroResetByGroupID = 33
};

enum __declspec(uuid("ebc2e683-d112-4e3b-a0a4-901114559390"))
TAxisType
{
    atString = 0,
    atFloat = 1,
    atFloatLinearFunc = 2
};

enum __declspec(uuid("8a811bfe-f440-498f-b20e-79a18e10d550"))
CustomExpEventIDs
{
    evStartDataFolderEx = 0,
    evWriteEventTrigInfo = 1,
    evWriteArray = 2,
    evWriteArrayDouble = 3,
    evWriteAsyncArray = 4,
    evWriteAsyncArrayDouble = 5,
    evSupportsArray = 6,
    evSetTelemetryTime = 7,
    evWriteAsyncBinaryData = 8,
    evSupportsBinary = 9,
    evSupportsComplex = 10,
    evWriteComplex = 11,
    evWriteComplexDouble = 12,
    evWriteArrayComplex = 13,
    evWriteArrayComplexDouble = 14,
    evWriteAsyncComplex = 15,
    evWriteAsyncComplexDouble = 16,
    evWriteAsyncArrayComplex = 17,
    evWriteAsyncArrayComplexDouble = 18,
    evSetExportPerChannel = 19,
    evGetExportPerChannel = 20,
    evSetStopExport = 21,
    evGetStopExport = 22,
    evShowExportMui = 23,
    evSupportsPerChannel = 24,
    evHideExportMui = 25,
    evEndDataBlock = 26,
    evSetExpDataType = 27,
    evSetExpTimePresentation = 28
};

struct __declspec(uuid("947bf399-9ef8-4417-a5c0-d5ccd79a0b14"))
ICustomExport3 : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT OnEvent (
        enum CustomExpEventIDs EventIDs,
        const _variant_t & InParam,
        VARIANT * OutParam );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_OnEvent (
        /*[in]*/ enum CustomExpEventIDs EventIDs,
        /*[in]*/ VARIANT InParam,
        /*[in,out]*/ VARIANT * OutParam,
        /*[out,retval]*/ HRESULT * Value ) = 0;
};

enum __declspec(uuid("81a9e08b-9841-4eaa-9aac-f7928e8ca127"))
SpecDirectory
{
    sdSystemDir = 0,
    sdLogDir = 1,
    sdScriptsDir = 2,
    sdTempDir = 3,
    sdDataDir = 4,
    sdSetupDataDir = 5,
    sdExportDataDir = 6,
    sdIniDir = 7,
    sdAddonsDir = 8,
    sdAppDir = 9,
    sdSeqBaseDir = 10
};

enum __declspec(uuid("19b8a8ba-8168-403d-a9fc-ad4b08fa98f0"))
CustomImpMessages
{
    impVersionCheck = 0,
    impInit = 1,
    impDeinit = 2,
    impOpenFile = 3,
    impCloseFile = 4,
    impShowFrame = 5,
    impHideFrame = 6,
    impPrepareImport = 7,
    impClearImport = 8,
    impStartImport = 9,
    impEndImport = 10,
    impImport = 11,
    impGetBlockSize = 12,
    impGetSampleRate = 13,
    impGetBlockCount = 14,
    impGetAbsStartTime = 15,
    impGetImportType = 16,
    impResizeFrame = 17,
    impGetTrustedCode = 18,
    impUpdateXML = 19,
    impHasMUI = 20,
    impShowMUI = 21,
    impHideMUI = 22,
    impUpdateDwXML = 23,
    impRTLoadDependencies = 24
};

enum __declspec(uuid("8afbe66e-2a57-481f-90db-c536bbe9f9ad"))
ImportTypes
{
    itValueBased = 0,
    itChannelBased = 1
};

enum __declspec(uuid("bd8d187f-854c-40db-89e8-1cbca3854173"))
MathMultipassType
{
    mptNone = 0,
    mptForward = 1,
    mptBackward = 2
};

enum __declspec(uuid("dc731cf8-dc9e-4c40-afe5-a63c60804328"))
ImportStatus
{
    impsFinished = 0,
    impsData = 1,
    impsGap = 2
};

enum __declspec(uuid("8258387f-4239-48af-93c4-e0a99e474d5d"))
CustomDAQMessages
{
    daqGetDeviceType = 0,
    daqUpdateXMLAISetup = 1,
    daqAmplMeasurementsCount = 2,
    daqAmplGetMeasurement = 3,
    daqAmplSetMeasurementCode = 4,
    daqSetNamePrefix = 50000
};

enum __declspec(uuid("8f5f3785-5355-413c-9a9c-0a10a6736b45"))
CustomCANMessages
{
    canGetDeviceType = 0,
    canStartAcq = 1,
    canStopAcq = 2,
    canPrepareAcq = 3,
    canGetData = 4,
    canGetCardCount = 5,
    canGetCardCodes = 6,
    canportStartAcq = 7,
    canportStopAcq = 8,
    canportPrepareAcq = 9,
    canportGetData = 10,
    canportClearBuffers = 11,
    canportGetBaudRates = 12,
    canInit = 13,
    canShowFrame = 14,
    canHideFrame = 15,
    canportEnableOutput = 16,
    canportGetOutputEnabled = 17,
    canportWriteFrame = 18,
    canSupportsOutput = 19,
    canportCaptureSet = 20,
    canportCaptureStartRead = 21,
    canportCaptureEndRead = 22,
    canportCaptureGetMessageCount = 23,
    canportCaptureReadMessage = 24
};

enum __declspec(uuid("ee5b7b9f-75fa-41b9-8b22-637fa80441b0"))
ControlChFlags
{
    ctrlCh_NumType_Mask = 7,
    ctrlCh_NumType_Bool = 0,
    ctrlCh_NumType_Int = 1,
    ctrlCh_NumType_Float = 2,
    ctrlCh_AllowAlarmDO = 8
};

enum __declspec(uuid("d4f87eef-f063-43e9-a3c3-ee201d3b437d"))
SetupMessageType
{
    smsgHint = 0,
    smsgWarning = 1,
    smsgError = 2
};

struct __declspec(uuid("f1dd1197-a2c6-478a-840c-b226864b11d3"))
ISetupMessages : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Add (
        enum SetupMessageType MsgType,
        _bstr_t Header,
        _bstr_t Text );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ enum SetupMessageType MsgType,
        /*[in]*/ BSTR Header,
        /*[in]*/ BSTR Text ) = 0;
};

enum __declspec(uuid("bb9f970a-e054-4aa3-8875-299dbd575ef8"))
ReportMessageType
{
    rmtError = 0,
    rmtWarning = 1,
    rmtInformation = 2,
    rmtDeveloper = 3
};

enum __declspec(uuid("5a792fbb-c101-4fc9-b6c0-0267cc863d73"))
UpdateType
{
    utRead = 0,
    utWrite = 1
};

struct __declspec(uuid("83ba9c2d-f71f-476f-ab58-27b80328d73c"))
IDwXMLDocument : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetWriteDefault,put=PutWriteDefault))
    VARIANT_BOOL WriteDefault;
    __declspec(property(get=GetSearchForExistingNodes,put=PutSearchForExistingNodes))
    VARIANT_BOOL SearchForExistingNodes;
    __declspec(property(get=GetUpdateOperation,put=PutUpdateOperation))
    enum UpdateType UpdateOperation;

    //
    // Wrapper methods for error-handling
    //

    IDwXMLNodePtr GetStartNode ( );
    HRESULT SetStartNode (
        struct IDwXMLNode * Node );
    IDwXMLNodePtr CreateNode (
        _bstr_t NodeName,
        _bstr_t NodeValue );
    HRESULT WriteInteger (
        struct IDwXMLNode * Node,
        _bstr_t Name,
        long Value,
        long Default );
    VARIANT_BOOL GetWriteDefault ( );
    void PutWriteDefault (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetSearchForExistingNodes ( );
    void PutSearchForExistingNodes (
        VARIANT_BOOL Value );
    HRESULT ReadInteger (
        struct IDwXMLNode * Node,
        _bstr_t Name,
        long * Value,
        long Default );
    HRESULT WriteString (
        struct IDwXMLNode * Node,
        _bstr_t Name,
        _bstr_t Value,
        _bstr_t Default );
    HRESULT ReadString (
        struct IDwXMLNode * Node,
        _bstr_t Name,
        BSTR * Value,
        _bstr_t Default );
    HRESULT UpdateString (
        struct IDwXMLNode * Node,
        _bstr_t Name,
        BSTR * Value,
        _bstr_t Default );
    enum UpdateType GetUpdateOperation ( );
    void PutUpdateOperation (
        enum UpdateType Value );
    HRESULT UpdateInteger (
        struct IDwXMLNode * Node,
        _bstr_t Name,
        long * Value,
        long Default );
    HRESULT ReadBoolean (
        struct IDwXMLNode * Node,
        _bstr_t Name,
        VARIANT_BOOL * Value,
        VARIANT_BOOL Default );
    HRESULT WriteBoolean (
        struct IDwXMLNode * Node,
        _bstr_t Name,
        VARIANT_BOOL Value,
        VARIANT_BOOL Default );
    HRESULT UpdateBoolean (
        struct IDwXMLNode * Node,
        _bstr_t Name,
        VARIANT_BOOL * Value,
        VARIANT_BOOL Default );
    HRESULT ReadByte (
        struct IDwXMLNode * Node,
        _bstr_t Name,
        unsigned char * Value,
        unsigned char Default );
    HRESULT WriteByte (
        struct IDwXMLNode * Node,
        _bstr_t Name,
        unsigned char Value,
        unsigned char Default );
    HRESULT UpdateByte (
        struct IDwXMLNode * Node,
        _bstr_t Name,
        unsigned char * Value,
        unsigned char Default );
    HRESULT ReadLongWord (
        struct IDwXMLNode * Node,
        _bstr_t Name,
        unsigned long * Value,
        unsigned long Default );
    HRESULT WriteLongWord (
        struct IDwXMLNode * Node,
        _bstr_t Name,
        unsigned long Value,
        unsigned long Default );
    HRESULT UpdateLongWord (
        struct IDwXMLNode * Node,
        _bstr_t Name,
        unsigned long * Value,
        unsigned long Default );
    HRESULT ReadWord (
        struct IDwXMLNode * Node,
        _bstr_t Name,
        unsigned short * Value,
        unsigned short Default );
    HRESULT WriteWord (
        struct IDwXMLNode * Node,
        _bstr_t Name,
        unsigned short Value,
        unsigned short Default );
    HRESULT UpdateWord (
        struct IDwXMLNode * Node,
        _bstr_t Name,
        unsigned short * Value,
        unsigned short Default );
    HRESULT ReadSmallInt (
        struct IDwXMLNode * Node,
        _bstr_t Name,
        short * Value,
        short Default );
    HRESULT WriteSmallInt (
        struct IDwXMLNode * Node,
        _bstr_t Name,
        short Value,
        short Default );
    HRESULT UpdateSmallInt (
        struct IDwXMLNode * Node,
        _bstr_t Name,
        short * Value,
        short Default );
    HRESULT ReadSingle (
        struct IDwXMLNode * Node,
        _bstr_t Name,
        float * Value,
        float Default );
    HRESULT WriteSingle (
        struct IDwXMLNode * Node,
        _bstr_t Name,
        float Value,
        float Default );
    HRESULT UpdateSingle (
        struct IDwXMLNode * Node,
        _bstr_t Name,
        float * Value,
        float Default );
    HRESULT ReadDouble (
        struct IDwXMLNode * Node,
        _bstr_t Name,
        double * Value,
        double Default );
    HRESULT WriteDouble (
        struct IDwXMLNode * Node,
        _bstr_t Name,
        double Value,
        double Default );
    HRESULT UpdateDouble (
        struct IDwXMLNode * Node,
        _bstr_t Name,
        double * Value,
        double Default );
    HRESULT ReadByteArray (
        struct IDwXMLNode * Node,
        _bstr_t Name,
        VARIANT * Value );
    HRESULT WriteByteArray (
        struct IDwXMLNode * Node,
        _bstr_t Name,
        const _variant_t & Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetStartNode (
        /*[out,retval]*/ struct IDwXMLNode * * Node ) = 0;
      virtual HRESULT __stdcall raw_SetStartNode (
        /*[in]*/ struct IDwXMLNode * Node ) = 0;
      virtual HRESULT __stdcall raw_CreateNode (
        /*[in]*/ BSTR NodeName,
        /*[in]*/ BSTR NodeValue,
        /*[out,retval]*/ struct IDwXMLNode * * Node ) = 0;
      virtual HRESULT __stdcall raw_WriteInteger (
        /*[in]*/ struct IDwXMLNode * Node,
        /*[in]*/ BSTR Name,
        /*[in]*/ long Value,
        /*[in]*/ long Default ) = 0;
      virtual HRESULT __stdcall get_WriteDefault (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_WriteDefault (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_SearchForExistingNodes (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_SearchForExistingNodes (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall raw_ReadInteger (
        /*[in]*/ struct IDwXMLNode * Node,
        /*[in]*/ BSTR Name,
        /*[in,out]*/ long * Value,
        /*[in]*/ long Default ) = 0;
      virtual HRESULT __stdcall raw_WriteString (
        /*[in]*/ struct IDwXMLNode * Node,
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Value,
        /*[in]*/ BSTR Default ) = 0;
      virtual HRESULT __stdcall raw_ReadString (
        /*[in]*/ struct IDwXMLNode * Node,
        /*[in]*/ BSTR Name,
        /*[in,out]*/ BSTR * Value,
        /*[in]*/ BSTR Default ) = 0;
      virtual HRESULT __stdcall raw_UpdateString (
        /*[in]*/ struct IDwXMLNode * Node,
        /*[in]*/ BSTR Name,
        /*[in,out]*/ BSTR * Value,
        /*[in]*/ BSTR Default ) = 0;
      virtual HRESULT __stdcall get_UpdateOperation (
        /*[out,retval]*/ enum UpdateType * Value ) = 0;
      virtual HRESULT __stdcall put_UpdateOperation (
        /*[in]*/ enum UpdateType Value ) = 0;
      virtual HRESULT __stdcall raw_UpdateInteger (
        /*[in]*/ struct IDwXMLNode * Node,
        /*[in]*/ BSTR Name,
        /*[in,out]*/ long * Value,
        /*[in]*/ long Default ) = 0;
      virtual HRESULT __stdcall raw_ReadBoolean (
        /*[in]*/ struct IDwXMLNode * Node,
        /*[in]*/ BSTR Name,
        /*[in,out]*/ VARIANT_BOOL * Value,
        /*[in]*/ VARIANT_BOOL Default ) = 0;
      virtual HRESULT __stdcall raw_WriteBoolean (
        /*[in]*/ struct IDwXMLNode * Node,
        /*[in]*/ BSTR Name,
        /*[in]*/ VARIANT_BOOL Value,
        /*[in]*/ VARIANT_BOOL Default ) = 0;
      virtual HRESULT __stdcall raw_UpdateBoolean (
        /*[in]*/ struct IDwXMLNode * Node,
        /*[in]*/ BSTR Name,
        /*[in,out]*/ VARIANT_BOOL * Value,
        /*[in]*/ VARIANT_BOOL Default ) = 0;
      virtual HRESULT __stdcall raw_ReadByte (
        /*[in]*/ struct IDwXMLNode * Node,
        /*[in]*/ BSTR Name,
        /*[in,out]*/ unsigned char * Value,
        /*[in]*/ unsigned char Default ) = 0;
      virtual HRESULT __stdcall raw_WriteByte (
        /*[in]*/ struct IDwXMLNode * Node,
        /*[in]*/ BSTR Name,
        /*[in]*/ unsigned char Value,
        /*[in]*/ unsigned char Default ) = 0;
      virtual HRESULT __stdcall raw_UpdateByte (
        /*[in]*/ struct IDwXMLNode * Node,
        /*[in]*/ BSTR Name,
        /*[in,out]*/ unsigned char * Value,
        /*[in]*/ unsigned char Default ) = 0;
      virtual HRESULT __stdcall raw_ReadLongWord (
        /*[in]*/ struct IDwXMLNode * Node,
        /*[in]*/ BSTR Name,
        /*[in,out]*/ unsigned long * Value,
        /*[in]*/ unsigned long Default ) = 0;
      virtual HRESULT __stdcall raw_WriteLongWord (
        /*[in]*/ struct IDwXMLNode * Node,
        /*[in]*/ BSTR Name,
        /*[in]*/ unsigned long Value,
        /*[in]*/ unsigned long Default ) = 0;
      virtual HRESULT __stdcall raw_UpdateLongWord (
        /*[in]*/ struct IDwXMLNode * Node,
        /*[in]*/ BSTR Name,
        /*[in,out]*/ unsigned long * Value,
        /*[in]*/ unsigned long Default ) = 0;
      virtual HRESULT __stdcall raw_ReadWord (
        /*[in]*/ struct IDwXMLNode * Node,
        /*[in]*/ BSTR Name,
        /*[in,out]*/ unsigned short * Value,
        /*[in]*/ unsigned short Default ) = 0;
      virtual HRESULT __stdcall raw_WriteWord (
        /*[in]*/ struct IDwXMLNode * Node,
        /*[in]*/ BSTR Name,
        /*[in]*/ unsigned short Value,
        /*[in]*/ unsigned short Default ) = 0;
      virtual HRESULT __stdcall raw_UpdateWord (
        /*[in]*/ struct IDwXMLNode * Node,
        /*[in]*/ BSTR Name,
        /*[in,out]*/ unsigned short * Value,
        /*[in]*/ unsigned short Default ) = 0;
      virtual HRESULT __stdcall raw_ReadSmallInt (
        /*[in]*/ struct IDwXMLNode * Node,
        /*[in]*/ BSTR Name,
        /*[in,out]*/ short * Value,
        /*[in]*/ short Default ) = 0;
      virtual HRESULT __stdcall raw_WriteSmallInt (
        /*[in]*/ struct IDwXMLNode * Node,
        /*[in]*/ BSTR Name,
        /*[in]*/ short Value,
        /*[in]*/ short Default ) = 0;
      virtual HRESULT __stdcall raw_UpdateSmallInt (
        /*[in]*/ struct IDwXMLNode * Node,
        /*[in]*/ BSTR Name,
        /*[in,out]*/ short * Value,
        /*[in]*/ short Default ) = 0;
      virtual HRESULT __stdcall raw_ReadSingle (
        /*[in]*/ struct IDwXMLNode * Node,
        /*[in]*/ BSTR Name,
        /*[in,out]*/ float * Value,
        /*[in]*/ float Default ) = 0;
      virtual HRESULT __stdcall raw_WriteSingle (
        /*[in]*/ struct IDwXMLNode * Node,
        /*[in]*/ BSTR Name,
        /*[in]*/ float Value,
        /*[in]*/ float Default ) = 0;
      virtual HRESULT __stdcall raw_UpdateSingle (
        /*[in]*/ struct IDwXMLNode * Node,
        /*[in]*/ BSTR Name,
        /*[in,out]*/ float * Value,
        /*[in]*/ float Default ) = 0;
      virtual HRESULT __stdcall raw_ReadDouble (
        /*[in]*/ struct IDwXMLNode * Node,
        /*[in]*/ BSTR Name,
        /*[in,out]*/ double * Value,
        /*[in]*/ double Default ) = 0;
      virtual HRESULT __stdcall raw_WriteDouble (
        /*[in]*/ struct IDwXMLNode * Node,
        /*[in]*/ BSTR Name,
        /*[in]*/ double Value,
        /*[in]*/ double Default ) = 0;
      virtual HRESULT __stdcall raw_UpdateDouble (
        /*[in]*/ struct IDwXMLNode * Node,
        /*[in]*/ BSTR Name,
        /*[in,out]*/ double * Value,
        /*[in]*/ double Default ) = 0;
      virtual HRESULT __stdcall raw_ReadByteArray (
        /*[in]*/ struct IDwXMLNode * Node,
        /*[in]*/ BSTR Name,
        /*[in,out]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall raw_WriteByteArray (
        /*[in]*/ struct IDwXMLNode * Node,
        /*[in]*/ BSTR Name,
        /*[in]*/ VARIANT Value ) = 0;
};

struct __declspec(uuid("dbb2d89c-443b-4abf-838e-27cdea6e424c"))
IProperties : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem,put=PutItem))
    _variant_t Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetXmlItem))
    IDwXMLDocumentPtr XmlItem[];
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    _variant_t GetItem (
        const _variant_t & Index );
    void PutItem (
        const _variant_t & Index,
        const _variant_t & Value );
    HRESULT Add (
        _bstr_t Name,
        const _variant_t & Value );
    IDwXMLDocumentPtr GetXmlItem (
        _bstr_t Name );
    IDwXMLDocumentPtr AddXmlItem (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Value ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall put_Item (
        /*[in]*/ VARIANT Index,
        /*[in]*/ VARIANT Value ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Name,
        /*[in]*/ VARIANT Value ) = 0;
      virtual HRESULT __stdcall get_XmlItem (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IDwXMLDocument * * Value ) = 0;
      virtual HRESULT __stdcall raw_AddXmlItem (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IDwXMLDocument * * Value ) = 0;
};

struct __declspec(uuid("74e73f54-f623-4271-8071-d3e715b9ef70"))
IInputGroup : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIndex))
    _variant_t Index;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetGuid,put=PutGuid))
    _bstr_t Guid;
    __declspec(property(get=GetProperties))
    IPropertiesPtr Properties;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetIndex ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t Value );
    _bstr_t GetGuid ( );
    void PutGuid (
        _bstr_t Value );
    IPropertiesPtr GetProperties ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_Guid (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_Guid (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_Properties (
        /*[out,retval]*/ struct IProperties * * Value ) = 0;
};

struct __declspec(uuid("185eb8a2-805f-4b63-a1fc-bbee49a69337"))
IInputGroups : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IInputGroupPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    IInputGroupPtr GetItem (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Value ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IInputGroup * * Value ) = 0;
};

struct __declspec(uuid("ff17d484-f89e-4bbe-b98d-16ba390113a3"))
IXMLHelper : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IDwXMLDocumentPtr GetCustomIDwXMLDocument (
        VARIANT_BOOL Write );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetCustomIDwXMLDocument (
        /*[in]*/ VARIANT_BOOL Write,
        /*[out,retval]*/ struct IDwXMLDocument * * Document ) = 0;
};

enum __declspec(uuid("69c86dce-2ac0-41d4-9692-bd2392698293"))
TimeFormat
{
    tfLocal = 0,
    tfUTC = 1,
    tfTelemetry = 2
};

enum __declspec(uuid("961c5cff-9bec-4363-8fd9-a3d1931ae772"))
TPermissionType
{
    ptModify = 0,
    ptReadOnly = 1,
    ptHidden = 2
};

struct __declspec(uuid("b1e6cc98-e25d-4345-ab33-178874ef5e3a"))
IPermission : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetUniqueID))
    _bstr_t UniqueID;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetPermissionType,put=PutPermissionType))
    enum TPermissionType PermissionType;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetUniqueID ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t Value );
    enum TPermissionType GetPermissionType ( );
    void PutPermissionType (
        enum TPermissionType Value );
    IPermissionPtr GetOrCreatePermission (
        _bstr_t UniqueID );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_UniqueID (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_PermissionType (
        /*[out,retval]*/ enum TPermissionType * Value ) = 0;
      virtual HRESULT __stdcall put_PermissionType (
        /*[in]*/ enum TPermissionType Value ) = 0;
      virtual HRESULT __stdcall raw_GetOrCreatePermission (
        /*[in]*/ BSTR UniqueID,
        /*[out,retval]*/ struct IPermission * * Permission ) = 0;
};

enum __declspec(uuid("6f46213c-9305-47db-a3ef-c67fb97e3470"))
TimingType
{
    None = 0,
    TimingDevice = 1,
    PluginDevice = 2,
    DAQDevice = 3
};

enum __declspec(uuid("83a6688d-86b5-4bac-bbed-485dd940e736"))
TSyncMode
{
    syncNotDefined = 0,
    syncCustom = 1,
    syncSoftSync = 2,
    syncStandAlone = 3,
    syncClockTrigger = 4,
    syncIRIG_A_DC = 5,
    syncIRIG_B_DC = 6,
    syncIRIG_G_DC = 7,
    syncIRIG_A_AC = 8,
    syncIRIG_B_AC = 9,
    syncIRIG_G_AC = 10,
    syncNTP = 11,
    syncGPS_PPS = 12,
    syncEtherCAT_PPS = 13
};

struct __declspec(uuid("d0817355-ada8-4495-8f78-9cec87079f31"))
ISynchronization : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCurrentMode,put=PutCurrentMode))
    enum TSyncMode CurrentMode;
    __declspec(property(get=GetCurrentCustomModeValue,put=PutCurrentCustomModeValue))
    int CurrentCustomModeValue;
    __declspec(property(get=GetSupportsAutomaticMode,put=PutSupportsAutomaticMode))
    VARIANT_BOOL SupportsAutomaticMode;
    __declspec(property(get=GetIsClockSource,put=PutIsClockSource))
    VARIANT_BOOL IsClockSource;
    __declspec(property(get=GetCurrentCustomModeIdx,put=PutCurrentCustomModeIdx))
    int CurrentCustomModeIdx;
    __declspec(property(get=GetAutomaticMode,put=PutAutomaticMode))
    VARIANT_BOOL AutomaticMode;

    //
    // Wrapper methods for error-handling
    //

    HRESULT AddSourceMode (
        enum TSyncMode SyncMode );
    HRESULT RemoveSourceMode (
        enum TSyncMode SyncMode );
    HRESULT AddSlaveMode (
        enum TSyncMode SyncMode );
    HRESULT RemoveSlaveMode (
        enum TSyncMode SyncMode );
    HRESULT CustomSourceModeAdd (
        _bstr_t CustomMode );
    long CustomSourceModeCount ( );
    _bstr_t CustomSourceModeItem (
        long I );
    HRESULT CustomSlaveModeAdd (
        _bstr_t SyncMode );
    long CustomSlaveModeCount ( );
    _bstr_t CustomSlaveModeItem (
        long I );
    VARIANT_BOOL GetIsClockSource ( );
    void PutIsClockSource (
        VARIANT_BOOL Value );
    enum TSyncMode GetCurrentMode ( );
    void PutCurrentMode (
        enum TSyncMode Value );
    int GetCurrentCustomModeValue ( );
    void PutCurrentCustomModeValue (
        int Value );
    int GetCurrentCustomModeIdx ( );
    void PutCurrentCustomModeIdx (
        int Value );
    VARIANT_BOOL GetSupportsAutomaticMode ( );
    void PutSupportsAutomaticMode (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetAutomaticMode ( );
    void PutAutomaticMode (
        VARIANT_BOOL Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AddSourceMode (
        /*[in]*/ enum TSyncMode SyncMode ) = 0;
      virtual HRESULT __stdcall raw_RemoveSourceMode (
        /*[in]*/ enum TSyncMode SyncMode ) = 0;
      virtual HRESULT __stdcall raw_AddSlaveMode (
        /*[in]*/ enum TSyncMode SyncMode ) = 0;
      virtual HRESULT __stdcall raw_RemoveSlaveMode (
        /*[in]*/ enum TSyncMode SyncMode ) = 0;
      virtual HRESULT __stdcall raw_CustomSourceModeAdd (
        /*[in]*/ BSTR CustomMode ) = 0;
      virtual HRESULT __stdcall raw_CustomSourceModeCount (
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall raw_CustomSourceModeItem (
        /*[in]*/ long I,
        /*[out,retval]*/ BSTR * Return ) = 0;
      virtual HRESULT __stdcall raw_CustomSlaveModeAdd (
        /*[in]*/ BSTR SyncMode ) = 0;
      virtual HRESULT __stdcall raw_CustomSlaveModeCount (
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall raw_CustomSlaveModeItem (
        /*[in]*/ long I,
        /*[out,retval]*/ BSTR * Result ) = 0;
      virtual HRESULT __stdcall get_IsClockSource (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_IsClockSource (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_CurrentMode (
        /*[out,retval]*/ enum TSyncMode * Value ) = 0;
      virtual HRESULT __stdcall put_CurrentMode (
        /*[in]*/ enum TSyncMode Value ) = 0;
      virtual HRESULT __stdcall get_CurrentCustomModeValue (
        /*[out,retval]*/ int * Value ) = 0;
      virtual HRESULT __stdcall put_CurrentCustomModeValue (
        /*[in]*/ int Value ) = 0;
      virtual HRESULT __stdcall get_CurrentCustomModeIdx (
        /*[out,retval]*/ int * Value ) = 0;
      virtual HRESULT __stdcall put_CurrentCustomModeIdx (
        /*[in]*/ int Value ) = 0;
      virtual HRESULT __stdcall get_SupportsAutomaticMode (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_SupportsAutomaticMode (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_AutomaticMode (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_AutomaticMode (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
};

struct __declspec(uuid("d5e34dae-a4bb-43cb-8d4e-c24d7a088b59"))
IDeviceNode : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    void PutName (
        _bstr_t Value );
    IDeviceNodePtr AddSubDevice (
        _bstr_t Name );
    ISynchronizationPtr CreateSynchronization ( );
    HRESULT SetSynchronization (
        struct ISynchronization * Sync );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall raw_AddSubDevice (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IDeviceNode * * Return ) = 0;
      virtual HRESULT __stdcall raw_CreateSynchronization (
        /*[out,retval]*/ struct ISynchronization * * Return ) = 0;
      virtual HRESULT __stdcall raw_SetSynchronization (
        /*[in]*/ struct ISynchronization * Sync ) = 0;
};

enum __declspec(uuid("2c2ad6a3-6347-4b89-a846-b00550330780"))
CanvasPenStyle
{
    cpsSolid = 0,
    cpsDash = 1,
    cpsDot = 2,
    cpsDashDot = 3,
    cpsDashDotDot = 4,
    cpsClear = 5,
    cpsInsideFrame = 6,
    cpsUserStyle = 7,
    cpsAlternate = 8
};

enum __declspec(uuid("dd2c87ed-2461-4f77-8217-fb48de3ef308"))
CanvasPenMode
{
    cpmBlack = 0,
    cpmWhite = 1,
    cpmNop = 2,
    cpmNot = 3,
    cpmCopy = 4,
    cpmNotCopy = 5,
    cpmMergePenNot = 6,
    cpmMaskPenNot = 7,
    cpmMergeNotPen = 8,
    cpmMaskNotPen = 9,
    cpmMerge = 10,
    cpmNotMerge = 11,
    cpmMask = 12,
    cpmNotMask = 13,
    cpmXor = 14,
    cpmNotXor = 15
};

struct __declspec(uuid("dafc614c-558e-4a51-a5c9-a4ba467429b7"))
ICanvasPen : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetColor,put=PutColor))
    long Color;
    __declspec(property(get=GetWidth,put=PutWidth))
    long Width;
    __declspec(property(get=GetStyle,put=PutStyle))
    enum CanvasPenStyle Style;
    __declspec(property(get=GetMode,put=PutMode))
    enum CanvasPenMode Mode;

    //
    // Wrapper methods for error-handling
    //

    long GetColor ( );
    void PutColor (
        long Value );
    long GetWidth ( );
    void PutWidth (
        long Value );
    enum CanvasPenStyle GetStyle ( );
    void PutStyle (
        enum CanvasPenStyle Value );
    enum CanvasPenMode GetMode ( );
    void PutMode (
        enum CanvasPenMode Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ enum CanvasPenStyle * Value ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ enum CanvasPenStyle Value ) = 0;
      virtual HRESULT __stdcall get_Mode (
        /*[out,retval]*/ enum CanvasPenMode * Value ) = 0;
      virtual HRESULT __stdcall put_Mode (
        /*[in]*/ enum CanvasPenMode Value ) = 0;
};

enum __declspec(uuid("75194b98-dbad-4a04-9333-d1a698ff0190"))
CanvasBrushStyle
{
    cbsSolid = 0,
    cbsClear = 1,
    cbsHorizontal = 2,
    cbsVertical = 3,
    cbsFDiagonal = 4,
    cbsBDiagonal = 5,
    cbsCross = 6,
    cbsDiagCross = 7
};

struct __declspec(uuid("c2336c94-efd4-4ef9-a982-616f2311468f"))
ICanvasBrush : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetColor,put=PutColor))
    long Color;
    __declspec(property(get=GetStyle,put=PutStyle))
    enum CanvasBrushStyle Style;

    //
    // Wrapper methods for error-handling
    //

    long GetColor ( );
    void PutColor (
        long Value );
    enum CanvasBrushStyle GetStyle ( );
    void PutStyle (
        enum CanvasBrushStyle Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ enum CanvasBrushStyle * Value ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ enum CanvasBrushStyle Value ) = 0;
};

enum __declspec(uuid("9c437a41-7b55-4c9a-9752-5da56bcb8406"))
CanvasFontQuality
{
    cfqDefault = 0,
    cfqDraft = 1,
    cfqProof = 2,
    cfqNonAntialiased = 3,
    cfqAntialiased = 4,
    cfqClearType = 5,
    cfqClearTypeNatural = 6
};

struct __declspec(uuid("48d1b1fc-2c76-4c54-8e3c-ad9ff9c7a919"))
ICanvasFont : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetColor,put=PutColor))
    long Color;
    __declspec(property(get=GetSize,put=PutSize))
    long Size;
    __declspec(property(get=GetHeight,put=PutHeight))
    long Height;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    long Orientation;
    __declspec(property(get=GetAngle,put=PutAngle))
    long Angle;
    __declspec(property(get=GetStyle,put=PutStyle))
    long Style;
    __declspec(property(get=GetQuality,put=PutQuality))
    enum CanvasFontQuality Quality;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    void PutName (
        _bstr_t Value );
    long GetColor ( );
    void PutColor (
        long Value );
    long GetSize ( );
    void PutSize (
        long Value );
    long GetHeight ( );
    void PutHeight (
        long Value );
    long GetOrientation ( );
    void PutOrientation (
        long Value );
    long GetAngle ( );
    void PutAngle (
        long Value );
    long GetStyle ( );
    void PutStyle (
        long Value );
    enum CanvasFontQuality GetQuality ( );
    void PutQuality (
        enum CanvasFontQuality Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Size (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Size (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Quality (
        /*[out,retval]*/ enum CanvasFontQuality * Value ) = 0;
      virtual HRESULT __stdcall put_Quality (
        /*[in]*/ enum CanvasFontQuality Value ) = 0;
};

enum __declspec(uuid("c67b4fc2-88a0-4fa8-bd4a-8e206190fe05"))
CanvasFillStyle
{
    cfsSurface = 0,
    cfsBorder = 1
};

struct __declspec(uuid("f54b3bb3-a3a5-461a-a524-f416f10825de"))
ICanvas : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBrush))
    ICanvasBrushPtr Brush;
    __declspec(property(get=GetPen))
    ICanvasPenPtr Pen;
    __declspec(property(get=GetFont))
    ICanvasFontPtr Font;

    //
    // Wrapper methods for error-handling
    //

    HRESULT LineTo (
        long X,
        long Y );
    HRESULT MoveTo (
        long X,
        long Y );
    HRESULT CircleRadius (
        long X,
        long Y,
        long R );
    HRESULT Ellipse (
        long X1,
        long Y1,
        long X2,
        long Y2 );
    HRESULT Rectangle (
        long X1,
        long Y1,
        long X2,
        long Y2 );
    HRESULT TextOut (
        long X,
        long Y,
        _bstr_t Text );
    ICanvasBrushPtr GetBrush ( );
    ICanvasPenPtr GetPen ( );
    ICanvasFontPtr GetFont ( );
    HRESULT Arc (
        long X1,
        long Y1,
        long X2,
        long Y2,
        long X3,
        long Y3,
        long X4,
        long Y4 );
    HRESULT FillRect (
        long Left,
        long Top,
        long Right,
        long Bottom );
    HRESULT FloodFill (
        long X,
        long Y,
        long Color,
        enum CanvasFillStyle FillStyle );
    HRESULT Pie (
        long X1,
        long Y1,
        long X2,
        long Y2,
        long X3,
        long Y3,
        long X4,
        long Y4 );
    long TextWidth (
        _bstr_t Text );
    long TextHeight (
        _bstr_t Text );
    HRESULT TextRect (
        long Left,
        long Top,
        long Right,
        long Bottom,
        _bstr_t Text,
        long TextFormat );
    HRESULT Polygon (
        VARIANT * Points,
        long Count );
    HRESULT Polyline (
        VARIANT * Points,
        long Count );
    HRESULT SetClipRegion (
        long Left,
        long Top,
        long Right,
        long Bottom );
    HRESULT ClearClipRegion ( );
    VARIANT_BOOL BitBlt (
        long X,
        long Y,
        long Width,
        long Height,
        __int64 SrcDC,
        long XSrc,
        long YSrc );
    VARIANT_BOOL StretchBlt (
        long DestX,
        long DestY,
        long DestW,
        long DestH,
        __int64 SrcDC,
        long SrcX,
        long SrcY,
        long SrcW,
        long SrcH );
    IGDIBitmapPtr CreateGDIBitmap (
        long Width,
        long Height,
        long BitDepth );
    HRESULT Draw (
        long X,
        long Y,
        struct IGenericBitmap * Bmp );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_LineTo (
        /*[in]*/ long X,
        /*[in]*/ long Y ) = 0;
      virtual HRESULT __stdcall raw_MoveTo (
        /*[in]*/ long X,
        /*[in]*/ long Y ) = 0;
      virtual HRESULT __stdcall raw_CircleRadius (
        /*[in]*/ long X,
        /*[in]*/ long Y,
        /*[in]*/ long R ) = 0;
      virtual HRESULT __stdcall raw_Ellipse (
        /*[in]*/ long X1,
        /*[in]*/ long Y1,
        /*[in]*/ long X2,
        /*[in]*/ long Y2 ) = 0;
      virtual HRESULT __stdcall raw_Rectangle (
        /*[in]*/ long X1,
        /*[in]*/ long Y1,
        /*[in]*/ long X2,
        /*[in]*/ long Y2 ) = 0;
      virtual HRESULT __stdcall raw_TextOut (
        /*[in]*/ long X,
        /*[in]*/ long Y,
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_Brush (
        /*[out,retval]*/ struct ICanvasBrush * * Value ) = 0;
      virtual HRESULT __stdcall get_Pen (
        /*[out,retval]*/ struct ICanvasPen * * Value ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct ICanvasFont * * Value ) = 0;
      virtual HRESULT __stdcall raw_Arc (
        /*[in]*/ long X1,
        /*[in]*/ long Y1,
        /*[in]*/ long X2,
        /*[in]*/ long Y2,
        /*[in]*/ long X3,
        /*[in]*/ long Y3,
        /*[in]*/ long X4,
        /*[in]*/ long Y4 ) = 0;
      virtual HRESULT __stdcall raw_FillRect (
        /*[in]*/ long Left,
        /*[in]*/ long Top,
        /*[in]*/ long Right,
        /*[in]*/ long Bottom ) = 0;
      virtual HRESULT __stdcall raw_FloodFill (
        /*[in]*/ long X,
        /*[in]*/ long Y,
        /*[in]*/ long Color,
        /*[in]*/ enum CanvasFillStyle FillStyle ) = 0;
      virtual HRESULT __stdcall raw_Pie (
        /*[in]*/ long X1,
        /*[in]*/ long Y1,
        /*[in]*/ long X2,
        /*[in]*/ long Y2,
        /*[in]*/ long X3,
        /*[in]*/ long Y3,
        /*[in]*/ long X4,
        /*[in]*/ long Y4 ) = 0;
      virtual HRESULT __stdcall raw_TextWidth (
        /*[in]*/ BSTR Text,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_TextHeight (
        /*[in]*/ BSTR Text,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_TextRect (
        /*[in]*/ long Left,
        /*[in]*/ long Top,
        /*[in]*/ long Right,
        /*[in]*/ long Bottom,
        /*[in]*/ BSTR Text,
        /*[in]*/ long TextFormat ) = 0;
      virtual HRESULT __stdcall raw_Polygon (
        /*[in]*/ VARIANT * Points,
        /*[in]*/ long Count ) = 0;
      virtual HRESULT __stdcall raw_Polyline (
        /*[in]*/ VARIANT * Points,
        /*[in]*/ long Count ) = 0;
      virtual HRESULT __stdcall raw_SetClipRegion (
        /*[in]*/ long Left,
        /*[in]*/ long Top,
        /*[in]*/ long Right,
        /*[in]*/ long Bottom ) = 0;
      virtual HRESULT __stdcall raw_ClearClipRegion ( ) = 0;
      virtual HRESULT __stdcall raw_BitBlt (
        /*[in]*/ long X,
        /*[in]*/ long Y,
        /*[in]*/ long Width,
        /*[in]*/ long Height,
        /*[in]*/ __int64 SrcDC,
        /*[in]*/ long XSrc,
        /*[in]*/ long YSrc,
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall raw_StretchBlt (
        /*[in]*/ long DestX,
        /*[in]*/ long DestY,
        /*[in]*/ long DestW,
        /*[in]*/ long DestH,
        /*[in]*/ __int64 SrcDC,
        /*[in]*/ long SrcX,
        /*[in]*/ long SrcY,
        /*[in]*/ long SrcW,
        /*[in]*/ long SrcH,
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall raw_CreateGDIBitmap (
        /*[in]*/ long Width,
        /*[in]*/ long Height,
        /*[in]*/ long BitDepth,
        /*[out,retval]*/ struct IGDIBitmap * * Value ) = 0;
      virtual HRESULT __stdcall raw_Draw (
        /*[in]*/ long X,
        /*[in]*/ long Y,
        /*[in]*/ struct IGenericBitmap * Bmp ) = 0;
};

enum __declspec(uuid("03bd250b-de12-4c3e-b598-ddcd9b88d689"))
CanvasFontStyle
{
    cfsBold = 1,
    cfsItalic = 2,
    cfsUnderline = 4,
    cfsStrikeOut = 8
};

enum __declspec(uuid("41853a97-fad4-46a7-9c51-6a7cf55a4621"))
CanvasTextFormat
{
    ctfBottom = 1,
    ctfCalcRect = 2,
    ctfCenter = 4,
    ctfEditControl = 8,
    ctfEndEllipsis = 16,
    ctfPathEllipsis = 32,
    ctfExpandTabs = 64,
    ctfExternalLeading = 128,
    ctfLeft = 256,
    ctfModifyString = 512,
    ctfNoClip = 1024,
    ctfNoPrefix = 2048,
    ctfRight = 4096,
    ctfRtlReading = 8192,
    ctfSingleLine = 16384,
    ctfTop = 32768,
    ctfVerticalCenter = 65536,
    ctfWordBreak = 131072,
    ctfHidePrefix = 262144,
    ctfNoFullWidthCharBreak = 524288,
    ctfPrefixOnly = 1048576,
    ctfTabStop = 2097152,
    ctfWordEllipsis = 4194304,
    ctfComposited = 8388608
};

enum __declspec(uuid("e93da11c-dfc2-4786-b93f-c6aefc4b0d07"))
ComplexPresentation
{
    cpDefault = 0,
    cpMag = 1,
    cpPhaseDeg = 2,
    cpPhaseRad = 3,
    cpRe = 4,
    cpIm = 5,
    cpPhaseDeg360 = 6
};

enum __declspec(uuid("0bfce741-d768-4f1c-8a28-2d28324b64d8"))
RTModuleLoadOptions
{
    mloDefault = 0,
    mloNewInstance = 1,
    mloShared = 2
};

struct __declspec(uuid("6cba1a35-3f2d-4736-8ea2-ae714d177a17"))
IRTModuleLoader : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT AddDriver (
        IUnknown * Driver );
    IRTModulePtr LoadModule (
        _bstr_t Name,
        long MinMajorVersion,
        long MinMinorVeresion,
        enum RTModuleLoadOptions LoadOptions );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AddDriver (
        /*[in]*/ IUnknown * Driver ) = 0;
      virtual HRESULT __stdcall raw_LoadModule (
        /*[in]*/ BSTR Name,
        /*[in]*/ long MinMajorVersion,
        /*[in]*/ long MinMinorVeresion,
        /*[in]*/ enum RTModuleLoadOptions LoadOptions,
        /*[out,retval]*/ struct IRTModule * * RTModule ) = 0;
};

enum __declspec(uuid("0f1f3a0a-8138-4171-a96a-ec54f0d1afba"))
IMarkerValueType
{
    vtTime = 0,
    vtValue = 1,
    vtAxis0 = 2,
    vtAxis1 = 3,
    vtAxis2 = 4,
    vtAxisPair = 5,
    vtResult = 6
};

struct __declspec(uuid("8e644726-47e1-47db-b65d-3a734b911301"))
IMarkerObject : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetValueType,put=PutValueType))
    enum IMarkerValueType ValueType;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetColor,put=PutColor))
    long Color;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetValueUnit,put=PutValueUnit))
    _bstr_t ValueUnit;

    //
    // Wrapper methods for error-handling
    //

    enum IMarkerValueType GetValueType ( );
    void PutValueType (
        enum IMarkerValueType Value );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t Value );
    VARIANT_BOOL GetIsReadOnly ( );
    long GetColor ( );
    void PutColor (
        long Value );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL Value );
    _bstr_t GetValueUnit ( );
    void PutValueUnit (
        _bstr_t Value );
    HRESULT AddAxisType (
        enum IMarkerValueType Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ValueType (
        /*[out,retval]*/ enum IMarkerValueType * Value ) = 0;
      virtual HRESULT __stdcall put_ValueType (
        /*[in]*/ enum IMarkerValueType Value ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_ValueUnit (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_ValueUnit (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall raw_AddAxisType (
        /*[in]*/ enum IMarkerValueType Value ) = 0;
};

struct __declspec(uuid("148514f1-a09f-4201-9c8c-8267112586fa"))
IMarkerInput : IMarkerObject
{
    //
    // Property data
    //

    __declspec(property(get=GetUsingChannelInput,put=PutUsingChannelInput))
    VARIANT_BOOL UsingChannelInput;
    __declspec(property(get=GetValueEx,put=PutValueEx))
    double ValueEx;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetUsingChannelInput ( );
    void PutUsingChannelInput (
        VARIANT_BOOL Value );
    double GetValueEx ( );
    void PutValueEx (
        double Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_UsingChannelInput (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_UsingChannelInput (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_ValueEx (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_ValueEx (
        /*[in]*/ double Value ) = 0;
};

struct __declspec(uuid("77c5b419-4d13-4b28-8126-4f3fc0593195"))
IPairedValueMarkerInput : IMarkerInput
{
    //
    // Property data
    //

    __declspec(property(get=GetNumberOfPairs,put=PutNumberOfPairs))
    long NumberOfPairs;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetValues ( );
    HRESULT SetValues (
        VARIANT * Values );
    long GetNumberOfPairs ( );
    void PutNumberOfPairs (
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetValues (
        /*[out,retval]*/ VARIANT * Values ) = 0;
      virtual HRESULT __stdcall raw_SetValues (
        /*[in]*/ VARIANT * Values ) = 0;
      virtual HRESULT __stdcall get_NumberOfPairs (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_NumberOfPairs (
        /*[in]*/ long Value ) = 0;
};

struct __declspec(uuid("e0ff8031-73cb-4b3b-9c3c-e9581488a9c9"))
ISingleValueMarkerInput : IMarkerInput
{
    //
    // Property data
    //

    __declspec(property(get=GetValue,put=PutValue))
    double Value;

    //
    // Wrapper methods for error-handling
    //

    double GetValue ( );
    void PutValue (
        double Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ double Value ) = 0;
};

struct __declspec(uuid("f0bbcaa5-aba4-4a34-9760-6dbbe04ec6ab"))
IMarkerObjectsList : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetItems,put=PutItems))
    IMarkerObjectPtr Items[];

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IMarkerObjectPtr GetItems (
        long Index );
    void PutItems (
        long Index,
        struct IMarkerObject * Value );
    HRESULT Add (
        struct IMarkerObject * Value );
    long Remove (
        struct IMarkerObject * Value );
    HRESULT Clear ( );
    HRESULT Insert (
        long Index,
        struct IMarkerObject * Value );
    HRESULT Delete (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_Items (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IMarkerObject * * Value ) = 0;
      virtual HRESULT __stdcall put_Items (
        /*[in]*/ long Index,
        /*[in]*/ struct IMarkerObject * Value ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ struct IMarkerObject * Value ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ struct IMarkerObject * Value,
        /*[out,retval]*/ long * Index ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall raw_Insert (
        /*[in]*/ long Index,
        /*[in]*/ struct IMarkerObject * Value ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in]*/ long Index ) = 0;
};

enum __declspec(uuid("84d9a58c-8644-4ac9-a590-9169bd545960"))
IMarkerChannelType
{
    ctScalar = 0,
    ctVector = 1,
    ctMatrix = 2,
    ctNone = 3
};

enum __declspec(uuid("3a714134-4dba-44b3-87f6-758179f246e1"))
TimeDisplay
{
    tdRelative = 0,
    tdAbsolute = 1,
    tdAbsoluteTime = 2,
    tdAbsoluteDayTime = 3
};

enum __declspec(uuid("82033d8e-548c-4172-9c61-e8a109ada233"))
TRTCStatus
{
    csDisconnected = 0,
    csRunning = 1,
    csNotRunning = 2,
    csProgramming = 3
};

enum __declspec(uuid("b20b7991-5929-4494-aa6e-17cc6c64b261"))
TRTCoreType
{
    ctBool = 0,
    ctInt = 1,
    ctFloat = 2,
    ctString = 3,
    ctList = 4,
    ctDict = 5,
    ctRatio = 6,
    ctProc = 7,
    ctObject = 8,
    ctBinaryData = 9,
    ctFunc = 10,
    ctUndefined = 65535
};

struct __declspec(uuid("ea09a4c1-db94-434a-a83c-b0212dab37be"))
IRTCPropertyInfo : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetType))
    enum TRTCoreType Type;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    enum TRTCoreType GetType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum TRTCoreType * Value ) = 0;
};

struct __declspec(uuid("d111aa85-8c13-41ce-9ac7-7b1bb923b0c0"))
IRTCPropertiesInfo : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetItems))
    IRTCPropertyInfoPtr Items[];

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IRTCPropertyInfoPtr GetItems (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_Items (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IRTCPropertyInfo * * Value ) = 0;
};

struct __declspec(uuid("81c0a81f-d7a5-46fd-b460-e753da4e9292"))
IRTCModule : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetName))
    _bstr_t Name;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL Value );
    _bstr_t GetName ( );
    _variant_t GetProperty (
        _bstr_t Query );
    VARIANT_BOOL SetProperty (
        _bstr_t Query,
        const _variant_t & Value );
    _variant_t ExecuteProperty (
        _bstr_t Query,
        const _variant_t & Params );
    _variant_t GetDeviceProperty (
        _bstr_t Query );
    VARIANT_BOOL SetDeviceProperty (
        _bstr_t Query,
        const _variant_t & Value );
    _variant_t ExecuteDeviceProperty (
        _bstr_t Query,
        const _variant_t & Params );
    IRTCPropertiesInfoPtr GetPropertiesInfo (
        _bstr_t Query );
    IRTCPropertiesInfoPtr GetDevicePropertiesInfo (
        _bstr_t Query );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall raw_GetProperty (
        /*[in]*/ BSTR Query,
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall raw_SetProperty (
        /*[in]*/ BSTR Query,
        /*[in]*/ VARIANT Value,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_ExecuteProperty (
        /*[in]*/ BSTR Query,
        /*[in]*/ VARIANT Params,
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall raw_GetDeviceProperty (
        /*[in]*/ BSTR Query,
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall raw_SetDeviceProperty (
        /*[in]*/ BSTR Query,
        /*[in]*/ VARIANT Value,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_ExecuteDeviceProperty (
        /*[in]*/ BSTR Query,
        /*[in]*/ VARIANT Params,
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall raw_GetPropertiesInfo (
        /*[in]*/ BSTR Query,
        /*[out,retval]*/ struct IRTCPropertiesInfo * * Result ) = 0;
      virtual HRESULT __stdcall raw_GetDevicePropertiesInfo (
        /*[in]*/ BSTR Query,
        /*[out,retval]*/ struct IRTCPropertiesInfo * * Result ) = 0;
};

struct __declspec(uuid("6add4b81-50fb-49ad-83d0-4b45ad8151b8"))
IRTCModules : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetItems))
    IRTCModulePtr Items[];

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IRTCModulePtr GetItems (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_Items (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IRTCModule * * Value ) = 0;
};

struct __declspec(uuid("f60fc481-ba79-44f1-be38-7e3c0936ab81"))
IRTCController : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetModules))
    IRTCModulesPtr Modules;
    __declspec(property(get=GetScanCycleFrequency,put=PutScanCycleFrequency))
    long ScanCycleFrequency;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL ApplyChanges ( );
    HRESULT Start ( );
    HRESULT Stop ( );
    IRTCModulesPtr GetModules ( );
    enum TRTCStatus GetStatus ( );
    HRESULT ReadDefaultValues ( );
    VARIANT_BOOL IsConfigChanged ( );
    _bstr_t CheckConfiguration ( );
    long GetScanCycleFrequency ( );
    void PutScanCycleFrequency (
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_ApplyChanges (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall raw_Start ( ) = 0;
      virtual HRESULT __stdcall raw_Stop ( ) = 0;
      virtual HRESULT __stdcall get_Modules (
        /*[out,retval]*/ struct IRTCModules * * Value ) = 0;
      virtual HRESULT __stdcall raw_GetStatus (
        /*[out,retval]*/ enum TRTCStatus * Value ) = 0;
      virtual HRESULT __stdcall raw_ReadDefaultValues ( ) = 0;
      virtual HRESULT __stdcall raw_IsConfigChanged (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall raw_CheckConfiguration (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall get_ScanCycleFrequency (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_ScanCycleFrequency (
        /*[in]*/ long Value ) = 0;
};

struct __declspec(uuid("d91f9d72-0565-4db5-b829-f831bce638e0"))
IRTCControllers : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetItems))
    IRTCControllerPtr Items[];

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IRTCControllerPtr GetItems (
        long Index );
    HRESULT Start ( );
    HRESULT Stop ( );
    VARIANT_BOOL ApplyChanges ( );
    HRESULT ReadDefaultValues ( );
    VARIANT_BOOL IsConfigChanged ( );
    _bstr_t CheckConfiguration ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_Items (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IRTCController * * Value ) = 0;
      virtual HRESULT __stdcall raw_Start ( ) = 0;
      virtual HRESULT __stdcall raw_Stop ( ) = 0;
      virtual HRESULT __stdcall raw_ApplyChanges (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall raw_ReadDefaultValues ( ) = 0;
      virtual HRESULT __stdcall raw_IsConfigChanged (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall raw_CheckConfiguration (
        /*[out,retval]*/ BSTR * Value ) = 0;
};

struct __declspec(uuid("ce7001a4-9a02-427e-b38e-91fbac57ea35"))
IRTC : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetControllers))
    IRTCControllersPtr Controllers;

    //
    // Wrapper methods for error-handling
    //

    IRTCControllersPtr GetControllers ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Controllers (
        /*[out,retval]*/ struct IRTCControllers * * Value ) = 0;
};

#pragma pack(push, 4)

struct __declspec(uuid("50295f10-3b8c-4cf9-a97d-31b6eb315870"))
T_ReducedRec
{
    float Min;
    float Max;
    float Ave;
    float Rms;
};

#pragma pack(pop)

#pragma pack(push, 4)

struct __declspec(uuid("708c0f32-eb53-47e9-bbbd-b7ef8eae260c"))
T_RecordPosition
{
    long Mid;
    long Dir;
};

#pragma pack(pop)

#pragma pack(push, 4)

struct __declspec(uuid("36809686-ccaf-476d-87fb-c45a9d2faa2b"))
T_ChIndex
{
    short IndexLevel;
    unsigned long Index1;
    unsigned long Index2;
    unsigned long Index3;
    unsigned long Index4;
    unsigned long Index5;
};

#pragma pack(pop)

#pragma pack(push, 4)

struct __declspec(uuid("c79db759-bd3b-4037-9807-374b134a0450"))
ITestRecord
{
    long Field1;
    long Field2;
};

#pragma pack(pop)

#pragma pack(push, 1)

struct __declspec(uuid("7f3a1690-0b3b-4803-8d5f-919ed42650f8"))
T_CANFrame
{
    unsigned char Byte0;
    unsigned char Byte1;
    unsigned char Byte2;
    unsigned char Byte3;
    unsigned char Byte4;
    unsigned char Byte5;
    unsigned char Byte6;
    unsigned char Byte7;
};

#pragma pack(pop)

struct __declspec(uuid("f560c6ca-c5fd-4921-ae58-a4f69b17a3e9"))
ICANPort : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMessageCount))
    long MessageCount;
    __declspec(property(get=GetTotalMsgCount))
    long TotalMsgCount;
    __declspec(property(get=GetTotalErrMsgCount))
    long TotalErrMsgCount;
    __declspec(property(get=GetUseListenOnly,put=PutUseListenOnly))
    VARIANT_BOOL UseListenOnly;
    __declspec(property(get=GetInterfaceName))
    _bstr_t InterfaceName;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL SendFrame (
        VARIANT_BOOL Extended,
        long ArbId,
        struct T_CANFrame Data,
        long Size );
    HRESULT EnableOutput (
        VARIANT_BOOL Enable );
    long GetMessageCount ( );
    VARIANT_BOOL ReadMessage (
        double * TimeStamp,
        long * ArbId,
        long * DataLo,
        long * DataHi );
    HRESULT StartRead ( );
    HRESULT EndRead ( );
    _variant_t GetBaudRateList ( );
    HRESULT SetBaudRate (
        long BaudRate );
    long GetBaudRate ( );
    long GetTotalMsgCount ( );
    long GetTotalErrMsgCount ( );
    HRESULT Capture (
        VARIANT_BOOL Status );
    VARIANT_BOOL GetUseListenOnly ( );
    void PutUseListenOnly (
        VARIANT_BOOL Value );
    _bstr_t GetInterfaceName ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SendFrame (
        /*[in]*/ VARIANT_BOOL Extended,
        /*[in]*/ long ArbId,
        /*[in]*/ struct T_CANFrame Data,
        /*[in]*/ long Size,
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall raw_EnableOutput (
        /*[in]*/ VARIANT_BOOL Enable ) = 0;
      virtual HRESULT __stdcall get_MessageCount (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_ReadMessage (
        /*[in,out]*/ double * TimeStamp,
        /*[in,out]*/ long * ArbId,
        /*[in,out]*/ long * DataLo,
        /*[in,out]*/ long * DataHi,
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall raw_StartRead ( ) = 0;
      virtual HRESULT __stdcall raw_EndRead ( ) = 0;
      virtual HRESULT __stdcall raw_GetBaudRateList (
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall raw_SetBaudRate (
        /*[in]*/ long BaudRate ) = 0;
      virtual HRESULT __stdcall raw_GetBaudRate (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_TotalMsgCount (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_TotalErrMsgCount (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_Capture (
        /*[in]*/ VARIANT_BOOL Status ) = 0;
      virtual HRESULT __stdcall get_UseListenOnly (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_UseListenOnly (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_InterfaceName (
        /*[out,retval]*/ BSTR * Value ) = 0;
};

struct __declspec(uuid("1d49da44-d8ee-4cd7-8b62-dd4e7b523b8e"))
ICAN : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    ICANPortPtr Item[];
    __declspec(property(get=GetSupportsOutput))
    VARIANT_BOOL SupportsOutput;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetSupportsOutput ( );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    ICANPortPtr GetItem (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SupportsOutput (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Value ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct ICANPort * * Value ) = 0;
};

#pragma pack(push, 4)

struct __declspec(uuid("d8122735-ba22-4258-9942-c52a5b30f2c6"))
DaqDeviceInfo
{
    BSTR Name;
    BSTR SerialNumber;
    BSTR Firmware;
    BSTR FirmwareSub;
    BSTR CalDate;
    BSTR DriverVersion;
    BSTR Used;
    BSTR OptionCount;
    BSTR OptionTypes;
    BSTR AICount;
    BSTR DICount;
    BSTR CNTCount;
    BSTR AIUsedCount;
    BSTR DIUsedCount;
    BSTR CNTUsedCount;
};

#pragma pack(pop)

struct __declspec(uuid("aa2e8a89-aadd-4b5f-81b9-d9f76bf35c2a"))
IDaq : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCardCount))
    long CardCount;
    __declspec(property(get=GetDaqType))
    long DaqType;
    __declspec(property(get=GetDataLost,put=PutDataLost))
    VARIANT_BOOL DataLost;
    __declspec(property(get=GetCanAutoCalculate))
    VARIANT_BOOL CanAutoCalculate;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetDeviceCode (
        long Index );
    long GetCardCount ( );
    long GetDaqType ( );
    VARIANT_BOOL GetDataLost ( );
    void PutDataLost (
        VARIANT_BOOL Value );
    struct DaqDeviceInfo GetDeviceInfo (
        long Index );
    long SetDeviceCalDate (
        long Index,
        _bstr_t CalDate,
        _bstr_t Pwd );
    long GetDITrgLevel (
        long PinNr,
        long * TrgLevel,
        long * ReTrgLevel,
        unsigned char * Coupling,
        unsigned char * SupportLevel );
    long SetDITrgLevel (
        long PinNr,
        long TrgLevel,
        long ReTrgLevel,
        unsigned char Coupling );
    long GetCNTTrgLevel (
        long CNTNr,
        unsigned char PinType,
        long * TrgLevel,
        long * ReTrgLevel,
        unsigned char * Coupling,
        unsigned char * SupportLevel );
    long SetCNTTrgLevel (
        long CNTNr,
        unsigned char PinType,
        long TrgLevel,
        long ReTrgLevel,
        unsigned char Coupling );
    long IOControl (
        long Msg,
        const _variant_t & InParam,
        VARIANT * OutParam );
    VARIANT_BOOL GetCanAutoCalculate ( );
    ISynchronizationPtr CreateSynchronization ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetDeviceCode (
        /*[in]*/ long Index,
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall get_CardCount (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_DaqType (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_DataLost (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_DataLost (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall raw_GetDeviceInfo (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct DaqDeviceInfo * Value ) = 0;
      virtual HRESULT __stdcall raw_SetDeviceCalDate (
        /*[in]*/ long Index,
        /*[in]*/ BSTR CalDate,
        /*[in]*/ BSTR Pwd,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_GetDITrgLevel (
        /*[in]*/ long PinNr,
        /*[out]*/ long * TrgLevel,
        /*[out]*/ long * ReTrgLevel,
        /*[out]*/ unsigned char * Coupling,
        /*[out]*/ unsigned char * SupportLevel,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_SetDITrgLevel (
        /*[in]*/ long PinNr,
        /*[in]*/ long TrgLevel,
        /*[in]*/ long ReTrgLevel,
        /*[in]*/ unsigned char Coupling,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_GetCNTTrgLevel (
        /*[in]*/ long CNTNr,
        /*[in]*/ unsigned char PinType,
        /*[out]*/ long * TrgLevel,
        /*[out]*/ long * ReTrgLevel,
        /*[out]*/ unsigned char * Coupling,
        /*[out]*/ unsigned char * SupportLevel,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_SetCNTTrgLevel (
        /*[in]*/ long CNTNr,
        /*[in]*/ unsigned char PinType,
        /*[in]*/ long TrgLevel,
        /*[in]*/ long ReTrgLevel,
        /*[in]*/ unsigned char Coupling,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_IOControl (
        /*[in]*/ long Msg,
        /*[in]*/ VARIANT InParam,
        /*[out]*/ VARIANT * OutParam,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_CanAutoCalculate (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall raw_CreateSynchronization (
        /*[out,retval]*/ struct ISynchronization * * Return ) = 0;
};

struct __declspec(uuid("45be650b-1f90-46bf-bc65-853f09a0a241"))
IData : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIBAbsMidRate))
    long IBAbsMidRate[];
    __declspec(property(get=GetIBLevels))
    long IBLevels;
    __declspec(property(get=GetInputGroups))
    IInputGroupsPtr InputGroups;
    __declspec(property(get=GetSRDivLCM))
    long SRDivLCM;
    __declspec(property(get=GetAnalyseMode))
    VARIANT_BOOL AnalyseMode;
    __declspec(property(get=GetCalcDelayLimit))
    long CalcDelayLimit;
    __declspec(property(get=GetRelativeTimeOffset,put=PutRelativeTimeOffset))
    double RelativeTimeOffset;
    __declspec(property(get=GetProcessingMarkers))
    IProcessingMarkerListPtr ProcessingMarkers;
    __declspec(property(get=GetGroups))
    IChannelGroupsPtr Groups;
    __declspec(property(get=GetSampleRate))
    long SampleRate;
    __declspec(property(get=GetSamples))
    long Samples;
    __declspec(property(get=GetShownChannels))
    IChannelListPtr ShownChannels;
    __declspec(property(get=GetActiveChannels))
    IChannelListPtr ActiveChannels;
    __declspec(property(get=GetExternalClock))
    long ExternalClock;
    __declspec(property(get=GetStartStoreTime))
    DATE StartStoreTime;
    __declspec(property(get=GetEndStamp,put=PutEndStamp))
    struct T_RecordPosition EndStamp;
    __declspec(property(get=GetStartStamp,put=PutStartStamp))
    struct T_RecordPosition StartStamp;
    __declspec(property(get=GetCurrentPos,put=PutCurrentPos))
    struct T_RecordPosition CurrentPos;
    __declspec(property(get=GetAllChannels))
    IChannelListPtr AllChannels;
    __declspec(property(get=GetUsedChannels))
    IChannelListPtr UsedChannels;
    __declspec(property(get=GetStartStoreTimeUTC))
    DATE StartStoreTimeUTC;
    __declspec(property(get=GetExternalTrigger,put=PutExternalTrigger))
    VARIANT_BOOL ExternalTrigger;
    __declspec(property(get=GetMaxCalcDelay))
    long MaxCalcDelay;
    __declspec(property(get=GetFirstTimeStamp))
    struct T_RecordPosition FirstTimeStamp;
    __declspec(property(get=GetMRealTimeStamp))
    struct T_RecordPosition MRealTimeStamp;
    __declspec(property(get=GetMeasureMode))
    VARIANT_BOOL MeasureMode;
    __declspec(property(get=GetFreezeMode))
    VARIANT_BOOL FreezeMode;
    __declspec(property(get=GetSampleRateEx))
    double SampleRateEx;
    __declspec(property(get=GetCurrentPosD,put=PutCurrentPosD))
    double CurrentPosD;
    __declspec(property(get=GetStartStampD,put=PutStartStampD))
    double StartStampD;
    __declspec(property(get=GetEndStampD,put=PutEndStampD))
    double EndStampD;
    __declspec(property(get=GetIBRate))
    long IBRate[];
    __declspec(property(get=GetIBAbsRate))
    long IBAbsRate[];

    //
    // Wrapper methods for error-handling
    //

    IChannelGroupsPtr GetGroups ( );
    long GetSampleRate ( );
    IChannelPtr FindChannel (
        _bstr_t Name );
    long GetSamples ( );
    HRESULT GetSamplesAcquired (
        long * Mid,
        long * Dir );
    IChannelListPtr GetShownChannels ( );
    IChannelListPtr GetActiveChannels ( );
    long GetExternalClock ( );
    DATE GetStartStoreTime ( );
    IChannelPtr FindChannelByIndex (
        struct T_ChIndex Index );
    struct T_RecordPosition GetCurrentPos ( );
    void PutCurrentPos (
        struct T_RecordPosition Value );
    struct T_RecordPosition GetEndStamp ( );
    void PutEndStamp (
        struct T_RecordPosition Value );
    struct T_RecordPosition GetStartStamp ( );
    void PutStartStamp (
        struct T_RecordPosition Value );
    _bstr_t GetIndexName (
        struct T_ChIndex Index );
    IChannelPtr FindChannelByIndex1 (
        long IndexLevel,
        long I1,
        long I2,
        long I3,
        long I4,
        long I5 );
    _bstr_t GetIndexName1 (
        long IndexLevel,
        long I1,
        long I2,
        long I3,
        long I4,
        long I5 );
    HRESULT BuildChannelList ( );
    IChannelListPtr GetAllChannels ( );
    IChannelListPtr GetUsedChannels ( );
    HRESULT StartDataSync ( );
    HRESULT EndDataSync ( );
    _bstr_t GetIndexNameShort (
        struct T_ChIndex ChIndex );
    _bstr_t GetIndexNameShort1 (
        long IndexLevel,
        long I1,
        long I2,
        long I3,
        long I4,
        long I5 );
    DATE GetStartStoreTimeUTC ( );
    HRESULT ApplyChannels ( );
    HRESULT SetStartStoreTimeUTC (
        DATE Time );
    HRESULT SetExternalClock (
        long Value );
    VARIANT_BOOL GetExternalTrigger ( );
    void PutExternalTrigger (
        VARIANT_BOOL Value );
    long GetMaxCalcDelay ( );
    struct T_RecordPosition GetFirstTimeStamp ( );
    struct T_RecordPosition GetMRealTimeStamp ( );
    VARIANT_BOOL GetMeasureMode ( );
    VARIANT_BOOL GetFreezeMode ( );
    double GetSampleRateEx ( );
    double GetCurrentPosD ( );
    void PutCurrentPosD (
        double Value );
    double GetStartStampD ( );
    void PutStartStampD (
        double Value );
    double GetEndStampD ( );
    void PutEndStampD (
        double Value );
    long GetIBRate (
        long Level );
    long GetIBAbsRate (
        long Level );
    long GetIBAbsMidRate (
        long Level );
    long GetIBLevels ( );
    IInputGroupsPtr GetInputGroups ( );
    IChannelPtr FindChannelByIndexEx (
        const _variant_t & Index );
    long GetSRDivLCM ( );
    VARIANT_BOOL GetAnalyseMode ( );
    HRESULT SelectDataRegion (
        double StartPos,
        double StopPos );
    long GetCalcDelayLimit ( );
    _bstr_t GetIndexNameEx (
        const _variant_t & Index );
    double GetRelativeTimeOffset ( );
    void PutRelativeTimeOffset (
        double Value );
    _bstr_t GetTimestring (
        double Time,
        enum TimeDisplay TimeDisplay,
        VARIANT_BOOL ForceZeroPrec );
    IProcessingMarkerListPtr GetProcessingMarkers ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Groups (
        /*[out,retval]*/ struct IChannelGroups * * Value ) = 0;
      virtual HRESULT __stdcall get_SampleRate (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_FindChannel (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IChannel * * Value ) = 0;
      virtual HRESULT __stdcall get_Samples (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_GetSamplesAcquired (
        /*[out]*/ long * Mid,
        /*[out]*/ long * Dir ) = 0;
      virtual HRESULT __stdcall get_ShownChannels (
        /*[out,retval]*/ struct IChannelList * * Value ) = 0;
      virtual HRESULT __stdcall get_ActiveChannels (
        /*[out,retval]*/ struct IChannelList * * Value ) = 0;
      virtual HRESULT __stdcall get_ExternalClock (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_StartStoreTime (
        /*[out,retval]*/ DATE * Value ) = 0;
      virtual HRESULT __stdcall raw_FindChannelByIndex (
        /*[in]*/ struct T_ChIndex Index,
        /*[out,retval]*/ struct IChannel * * Value ) = 0;
      virtual HRESULT __stdcall get_CurrentPos (
        /*[out,retval]*/ struct T_RecordPosition * Value ) = 0;
      virtual HRESULT __stdcall put_CurrentPos (
        /*[in]*/ struct T_RecordPosition Value ) = 0;
      virtual HRESULT __stdcall get_EndStamp (
        /*[out,retval]*/ struct T_RecordPosition * Value ) = 0;
      virtual HRESULT __stdcall put_EndStamp (
        /*[in]*/ struct T_RecordPosition Value ) = 0;
      virtual HRESULT __stdcall get_StartStamp (
        /*[out,retval]*/ struct T_RecordPosition * Value ) = 0;
      virtual HRESULT __stdcall put_StartStamp (
        /*[in]*/ struct T_RecordPosition Value ) = 0;
      virtual HRESULT __stdcall raw_GetIndexName (
        /*[in]*/ struct T_ChIndex Index,
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall raw_FindChannelByIndex1 (
        /*[in]*/ long IndexLevel,
        /*[in]*/ long I1,
        /*[in]*/ long I2,
        /*[in]*/ long I3,
        /*[in]*/ long I4,
        /*[in]*/ long I5,
        /*[out,retval]*/ struct IChannel * * Value ) = 0;
      virtual HRESULT __stdcall raw_GetIndexName1 (
        /*[in]*/ long IndexLevel,
        /*[in]*/ long I1,
        /*[in]*/ long I2,
        /*[in]*/ long I3,
        /*[in]*/ long I4,
        /*[in]*/ long I5,
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall raw_BuildChannelList ( ) = 0;
      virtual HRESULT __stdcall get_AllChannels (
        /*[out,retval]*/ struct IChannelList * * Value ) = 0;
      virtual HRESULT __stdcall get_UsedChannels (
        /*[out,retval]*/ struct IChannelList * * Value ) = 0;
      virtual HRESULT __stdcall raw_StartDataSync ( ) = 0;
      virtual HRESULT __stdcall raw_EndDataSync ( ) = 0;
      virtual HRESULT __stdcall raw_GetIndexNameShort (
        /*[in]*/ struct T_ChIndex ChIndex,
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall raw_GetIndexNameShort1 (
        /*[in]*/ long IndexLevel,
        /*[in]*/ long I1,
        /*[in]*/ long I2,
        /*[in]*/ long I3,
        /*[in]*/ long I4,
        /*[in]*/ long I5,
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall get_StartStoreTimeUTC (
        /*[out,retval]*/ DATE * Value ) = 0;
      virtual HRESULT __stdcall raw_ApplyChannels ( ) = 0;
      virtual HRESULT __stdcall raw_SetStartStoreTimeUTC (
        /*[in]*/ DATE Time ) = 0;
      virtual HRESULT __stdcall raw_SetExternalClock (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_ExternalTrigger (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_ExternalTrigger (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_MaxCalcDelay (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_FirstTimeStamp (
        /*[out,retval]*/ struct T_RecordPosition * Value ) = 0;
      virtual HRESULT __stdcall get_MRealTimeStamp (
        /*[out,retval]*/ struct T_RecordPosition * Value ) = 0;
      virtual HRESULT __stdcall get_MeasureMode (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall get_FreezeMode (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall get_SampleRateEx (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall get_CurrentPosD (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_CurrentPosD (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_StartStampD (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_StartStampD (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_EndStampD (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_EndStampD (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_IBRate (
        /*[in]*/ long Level,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_IBAbsRate (
        /*[in]*/ long Level,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_IBAbsMidRate (
        /*[in]*/ long Level,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_IBLevels (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_InputGroups (
        /*[out,retval]*/ struct IInputGroups * * Value ) = 0;
      virtual HRESULT __stdcall raw_FindChannelByIndexEx (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IChannel * * Value ) = 0;
      virtual HRESULT __stdcall get_SRDivLCM (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_AnalyseMode (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall raw_SelectDataRegion (
        /*[in]*/ double StartPos,
        /*[in]*/ double StopPos ) = 0;
      virtual HRESULT __stdcall get_CalcDelayLimit (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_GetIndexNameEx (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall get_RelativeTimeOffset (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_RelativeTimeOffset (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall raw_GetTimestring (
        /*[in]*/ double Time,
        /*[in]*/ enum TimeDisplay TimeDisplay,
        /*[in]*/ VARIANT_BOOL ForceZeroPrec,
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall get_ProcessingMarkers (
        /*[out,retval]*/ struct IProcessingMarkerList * * Value ) = 0;
};

struct __declspec(uuid("cae48a7c-581e-4c0b-ae4f-7a2eb89c0dff"))
IChannel : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetArrayChannel,put=PutArrayChannel))
    VARIANT_BOOL ArrayChannel;
    __declspec(property(get=GetArraySize))
    long ArraySize;
    __declspec(property(get=GetExpectedAsyncRate,put=PutExpectedAsyncRate))
    float ExpectedAsyncRate;
    __declspec(property(get=GetFirstIBLevel))
    long FirstIBLevel;
    __declspec(property(get=GetIBValuesEx))
    struct T_ReducedRec IBValuesEx[][];
    __declspec(property(get=GetIBPosEx))
    long IBPosEx[];
    __declspec(property(get=GetIBDataSizeEx))
    long IBDataSizeEx[];
    __declspec(property(get=GetSelectorIndexLevel,put=PutSelectorIndexLevel))
    long SelectorIndexLevel;
    __declspec(property(get=GetSelectorIndexStartLevel,put=PutSelectorIndexStartLevel))
    long SelectorIndexStartLevel;
    __declspec(property(get=GetSelectorIndex,put=PutSelectorIndex))
    _variant_t SelectorIndex;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetFirstX,put=PutFirstX))
    double FirstX;
    __declspec(property(get=GetSecondX,put=PutSecondX))
    double SecondX;
    __declspec(property(get=GetIsControlChannel,put=PutIsControlChannel))
    VARIANT_BOOL IsControlChannel;
    __declspec(property(get=GetControlChannelState,put=PutControlChannelState))
    long ControlChannelState;
    __declspec(property(get=GetDBValuesDouble))
    double DBValuesDouble[];
    __declspec(property(get=GetDStopDataAvail))
    long DStopDataAvail;
    __declspec(property(get=GetDStopDataAvailDir))
    long DStopDataAvailDir;
    __declspec(property(get=GetDStartDataAvail))
    long DStartDataAvail;
    __declspec(property(get=GetIndexEx))
    _variant_t IndexEx;
    __declspec(property(get=GetControlChannelFlags,put=PutControlChannelFlags))
    long ControlChannelFlags;
    __declspec(property(get=GetSRDivType))
    enum TSRDivType SRDivType;
    __declspec(property(get=GetViewInfo))
    IViewInfoPtr ViewInfo;
    __declspec(property(get=GetBinAvgSampleSize,put=PutBinAvgSampleSize))
    long BinAvgSampleSize;
    __declspec(property(get=GetGetBinAddress))
    long GetBinAddress;
    __declspec(property(get=GetBinAbsPos))
    __int64 BinAbsPos;
    __declspec(property(get=GetBinBufSize))
    long BinBufSize;
    __declspec(property(get=GetKeepValues,put=PutKeepValues))
    VARIANT_BOOL KeepValues;
    __declspec(property(get=GetCalcSingleValue))
    VARIANT_BOOL CalcSingleValue;
    __declspec(property(get=GetCustExportRate,put=PutCustExportRate))
    double CustExportRate;
    __declspec(property(get=GetProperties))
    IPropertiesPtr Properties;
    __declspec(property(get=GetIBValues))
    struct T_ReducedRec IBValues[];
    __declspec(property(get=GetRBValues))
    struct T_ReducedRec RBValues[];
    __declspec(property(get=GetDBValues))
    float DBValues[];
    __declspec(property(get=GetDBBufSize))
    long DBBufSize;
    __declspec(property(get=GetDBDataSize))
    long DBDataSize;
    __declspec(property(get=GetDBPos))
    long DBPos;
    __declspec(property(get=GetIBBufSize))
    long IBBufSize;
    __declspec(property(get=GetIBDataSize))
    long IBDataSize;
    __declspec(property(get=GetIBPos))
    long IBPos;
    __declspec(property(get=GetRBBufSize))
    long RBBufSize;
    __declspec(property(get=GetRBDataSize))
    long RBDataSize;
    __declspec(property(get=GetRBPos))
    long RBPos;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetDBTimeStamp))
    double DBTimeStamp[];
    __declspec(property(get=GetUsed,put=PutUsed))
    VARIANT_BOOL Used;
    __declspec(property(get=GetShown,put=PutShown))
    VARIANT_BOOL Shown;
    __declspec(property(get=GetExpectedAsyncRateType,put=PutExpectedAsyncRateType))
    long ExpectedAsyncRateType;
    __declspec(property(get=GetLongName))
    _bstr_t LongName;
    __declspec(property(get=GetShowLongName))
    VARIANT_BOOL ShowLongName;
    __declspec(property(get=GetDataType))
    long DataType;
    __declspec(property(get=GetBytes))
    long Bytes;
    __declspec(property(get=GetAsync))
    VARIANT_BOOL Async;
    __declspec(property(get=GetDisplayName))
    _bstr_t DisplayName;
    __declspec(property(get=GetWarningLevelHigh,put=PutWarningLevelHigh))
    double WarningLevelHigh;
    __declspec(property(get=GetWarningLevelLow,put=PutWarningLevelLow))
    double WarningLevelLow;
    __declspec(property(get=GetCriticalLevelHigh,put=PutCriticalLevelHigh))
    double CriticalLevelHigh;
    __declspec(property(get=GetCriticalLevelLow,put=PutCriticalLevelLow))
    double CriticalLevelLow;
    __declspec(property(get=GetIsScaleEnabled))
    VARIANT_BOOL IsScaleEnabled;
    __declspec(property(get=GetSRDiv))
    long SRDiv;
    __declspec(property(get=GetGroup))
    IChannelGroupPtr Group;
    __declspec(property(get=GetUnit_,put=PutUnit_))
    _bstr_t Unit_;
    __declspec(property(get=GetDescription,put=PutDescription))
    _bstr_t Description;
    __declspec(property(get=GetIsDoublePrecision))
    VARIANT_BOOL IsDoublePrecision;
    __declspec(property(get=GetMType,put=PutMType))
    long MType;
    __declspec(property(get=GetMeasurement,put=PutMeasurement))
    _bstr_t Measurement;
    __declspec(property(get=GetMainDisplayColor,put=PutMainDisplayColor))
    long MainDisplayColor;
    __declspec(property(get=GetTypicalMinValue))
    float TypicalMinValue;
    __declspec(property(get=GetTypicalMaxValue))
    float TypicalMaxValue;
    __declspec(property(get=GetIndex))
    struct T_ChIndex Index;
    __declspec(property(get=GetUserScaleMin,put=PutUserScaleMin))
    float UserScaleMin;
    __declspec(property(get=GetUserScaleMax,put=PutUserScaleMax))
    float UserScaleMax;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetOffset,put=PutOffset))
    double Offset;
    __declspec(property(get=GetExportOrder,put=PutExportOrder))
    long ExportOrder;
    __declspec(property(get=GetCalcDelay,put=PutCalcDelay))
    long CalcDelay;
    __declspec(property(get=GetCalcSRDiv))
    long CalcSRDiv;
    __declspec(property(get=GetChangeThreshold,put=PutChangeThreshold))
    float ChangeThreshold;
    __declspec(property(get=GetDiscreteList))
    IDiscreteListPtr DiscreteList;
    __declspec(property(get=GetBitCount,put=PutBitCount))
    long BitCount;
    __declspec(property(get=GetSettings))
    _bstr_t Settings;
    __declspec(property(get=GetChNo))
    _bstr_t ChNo;
    __declspec(property(get=GetExported,put=PutExported))
    VARIANT_BOOL Exported;
    __declspec(property(get=GetAbsMin))
    double AbsMin;
    __declspec(property(get=GetAbsMax))
    double AbsMax;
    __declspec(property(get=GetIsSingleValue))
    VARIANT_BOOL IsSingleValue;
    __declspec(property(get=GetSingleValue,put=PutSingleValue))
    double SingleValue;
    __declspec(property(get=GetLogicalName,put=PutLogicalName))
    _bstr_t LogicalName;
    __declspec(property(get=GetLogicalIndex,put=PutLogicalIndex))
    __int64 LogicalIndex;
    __declspec(property(get=GetTag,put=PutTag))
    long Tag;
    __declspec(property(get=GetScale_,put=PutScale_))
    double Scale_;
    __declspec(property(get=GetStored,put=PutStored))
    VARIANT_BOOL Stored;
    __declspec(property(get=GetArrayInfo))
    IArrayInfoPtr ArrayInfo;

    //
    // Wrapper methods for error-handling
    //

    struct T_ReducedRec GetIBValues (
        long Index );
    struct T_ReducedRec GetRBValues (
        long Index );
    float GetDBValues (
        long Index );
    long GetDBBufSize ( );
    long GetDBDataSize ( );
    long GetDBPos ( );
    long GetIBBufSize ( );
    long GetIBDataSize ( );
    long GetIBPos ( );
    long GetRBBufSize ( );
    long GetRBDataSize ( );
    long GetRBPos ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t Value );
    double GetDBTimeStamp (
        long Index );
    VARIANT_BOOL GetUsed ( );
    void PutUsed (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetShown ( );
    void PutShown (
        VARIANT_BOOL Value );
    _variant_t GetUnscaledData ( );
    _variant_t GetScaledData ( );
    long GetDBAddress ( );
    long GetDataType ( );
    long GetBytes ( );
    VARIANT_BOOL GetAsync ( );
    HRESULT AddSingleSample (
        float Value );
    _variant_t GetTSData ( );
    _variant_t GetUnscaledDataEx (
        long Start,
        long Count );
    float ScaleValue (
        float Value );
    HRESULT AddAsyncSingleSample (
        float Value,
        double TimeStamp );
    _variant_t GetScaledDataEx (
        long Start,
        long Count );
    long GetSRDiv ( );
    IChannelGroupPtr GetGroup ( );
    _bstr_t GetDescription ( );
    void PutDescription (
        _bstr_t Value );
    _bstr_t GetUnit_ ( );
    void PutUnit_ (
        _bstr_t Value );
    HRESULT AddAsyncDoubleSample (
        double Value,
        double TimeStamp );
    HRESULT AddAsyncByteSample (
        unsigned char Value,
        double TimeStamp );
    long GetMType ( );
    void PutMType (
        long Value );
    _bstr_t GetMeasurement ( );
    void PutMeasurement (
        _bstr_t Value );
    IChannelConnectionPtr CreateConnection ( );
    long GetMainDisplayColor ( );
    void PutMainDisplayColor (
        long Value );
    float GetTypicalMinValue ( );
    float GetTypicalMaxValue ( );
    struct T_ChIndex GetIndex ( );
    HRESULT GetScaledDataEx1 (
        long Start,
        long Count,
        VARIANT * Data );
    HRESULT GetUnscaledDataEx1 (
        long Start,
        long Count,
        VARIANT * Data );
    _variant_t GetTSDataEx (
        long Start,
        long Count );
    HRESULT GetTSDataEx1 (
        long Start,
        long Count,
        VARIANT * Data );
    HRESULT GetIBValues (
        long Pos,
        float * Min,
        float * Max,
        float * Ave,
        float * Rms );
    HRESULT GetRBValues (
        long Pos,
        float * Min,
        float * Max,
        float * Ave,
        float * Rms );
    HRESULT GetIndex1 (
        long * IndexLevel,
        long * I1,
        long * I2,
        long * I3,
        long * I4,
        long * I5 );
    float GetUserScaleMin ( );
    void PutUserScaleMin (
        float Value );
    float GetUserScaleMax ( );
    void PutUserScaleMax (
        float Value );
    double GetScale ( );
    void PutScale (
        double Value );
    double GetOffset ( );
    void PutOffset (
        double Value );
    HRESULT IncDBSamples (
        long Count );
    HRESULT AddSingleSamples (
        long Count,
        const _variant_t & Data,
        const _variant_t & Timestamps );
    HRESULT SetSRDiv (
        long SRDiv );
    HRESULT SetSRDivType (
        enum TSRDivType AType );
    long GetExportOrder ( );
    void PutExportOrder (
        long Value );
    long GetCalcDelay ( );
    void PutCalcDelay (
        long Value );
    HRESULT AddAsyncShortintSample (
        char Value,
        double TimeStamp );
    HRESULT AddAsyncSmallintSample (
        short Value,
        double TimeStamp );
    HRESULT AddAsyncIntegerSample (
        long Value,
        double TimeStamp );
    HRESULT AddAsyncInt64Sample (
        __int64 Value,
        double TimeStamp );
    long GetCalcSRDiv ( );
    float GetChangeThreshold ( );
    void PutChangeThreshold (
        float Value );
    IDiscreteListPtr GetDiscreteList ( );
    HRESULT GetChannelSetup (
        VARIANT * Data );
    HRESULT SetChannelSetup (
        const _variant_t & Data );
    HRESULT SetDataType (
        long ADataType );
    long GetBitCount ( );
    void PutBitCount (
        long Value );
    _bstr_t GetSettings ( );
    _bstr_t GetChNo ( );
    VARIANT_BOOL GetExported ( );
    void PutExported (
        VARIANT_BOOL Value );
    double GetAbsMin ( );
    double GetAbsMax ( );
    VARIANT_BOOL GetIsSingleValue ( );
    double GetSingleValue ( );
    void PutSingleValue (
        double Value );
    HRESULT SetFreezeMode (
        VARIANT_BOOL Freeze );
    _bstr_t GetLogicalName ( );
    void PutLogicalName (
        _bstr_t Value );
    __int64 GetLogicalIndex ( );
    void PutLogicalIndex (
        __int64 Value );
    long GetTag ( );
    void PutTag (
        long Value );
    HRESULT SetAsync (
        VARIANT_BOOL Async );
    HRESULT SetIsSingleValue (
        VARIANT_BOOL Value );
    double GetScale_ ( );
    void PutScale_ (
        double Value );
    VARIANT_BOOL GetStored ( );
    void PutStored (
        VARIANT_BOOL Value );
    HRESULT AddByteSample (
        unsigned char Value );
    HRESULT AddShortintSample (
        char Value );
    HRESULT AddSmallintSample (
        short Value );
    HRESULT AddWordSample (
        unsigned short Value );
    HRESULT AddIntegerSample (
        long Value );
    HRESULT AddIn64Sample (
        __int64 Value );
    HRESULT AddDoubleSample (
        double Value );
    float GetValueAtAbsPos (
        long Pos,
        long * SeekPos,
        VARIANT_BOOL Interpolate );
    double GetValueAtAbsPosDouble (
        long Pos,
        long * SeekPos,
        VARIANT_BOOL Interpolate );
    HRESULT UpdateXML (
        const _variant_t & DOMDocument,
        const _variant_t & DOMNode,
        VARIANT_BOOL Write );
    IArrayInfoPtr GetArrayInfo ( );
    VARIANT_BOOL GetArrayChannel ( );
    void PutArrayChannel (
        VARIANT_BOOL Value );
    long GetArraySize ( );
    HRESULT AddAsyncData (
        const _variant_t & Data,
        double TimeStamp );
    HRESULT AddData (
        const _variant_t & Data );
    long GetOfflineStatus ( );
    float GetExpectedAsyncRate ( );
    void PutExpectedAsyncRate (
        float Value );
    long GetFirstIBLevel ( );
    struct T_ReducedRec GetIBValuesEx (
        long Level,
        long Index );
    long GetIBPosEx (
        long Level );
    long GetIBDataSizeEx (
        long Level );
    long GetSelectorIndexLevel ( );
    void PutSelectorIndexLevel (
        long Value );
    long GetSelectorIndexStartLevel ( );
    void PutSelectorIndexStartLevel (
        long Value );
    _variant_t GetSelectorIndex ( );
    void PutSelectorIndex (
        const _variant_t & Value );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t Value );
    double GetFirstX ( );
    void PutFirstX (
        double Value );
    double GetSecondX ( );
    void PutSecondX (
        double Value );
    VARIANT_BOOL GetIsControlChannel ( );
    void PutIsControlChannel (
        VARIANT_BOOL Value );
    long GetControlChannelState ( );
    void PutControlChannelState (
        long Value );
    double GetDBValuesDouble (
        long Index );
    HRESULT AddAsyncString (
        _bstr_t Value,
        double TimeStamp );
    HRESULT SetAsStringChannel (
        long Size );
    double ScaleValueDouble (
        double Value );
    long GetDStopDataAvail ( );
    long GetDStopDataAvailDir ( );
    long GetDStartDataAvail ( );
    _variant_t GetIndexEx ( );
    HRESULT ShowChannelSetup ( );
    long GetTSAddress ( );
    long GetControlChannelFlags ( );
    void PutControlChannelFlags (
        long Value );
    enum TSRDivType GetSRDivType ( );
    HRESULT FastCalc ( );
    HRESULT FastCalcInt32 (
        long Min,
        long Max,
        double Ave,
        double Rms );
    HRESULT AddIntegerSampleWithCalc (
        long Value );
    HRESULT AddSmallintSampleWithCalc (
        short Value );
    HRESULT AddShortintSampleWithCalc (
        char Value );
    HRESULT FastCalcInt16 (
        short Min,
        short Max,
        float Ave,
        float Rms );
    IViewInfoPtr GetViewInfo ( );
    HRESULT AddAsyncBinarySample (
        double TimeStamp,
        const _variant_t & Data );
    long GetBinAvgSampleSize ( );
    void PutBinAvgSampleSize (
        long Value );
    HRESULT GetBinaryDataAtPos (
        long Pos,
        VARIANT * Data );
    long GetGetBinAddress ( );
    __int64 GetBinAbsPos ( );
    long GetBinBufSize ( );
    HRESULT ValueChanged ( );
    HRESULT StartFastCalc ( );
    VARIANT_BOOL GetKeepValues ( );
    void PutKeepValues (
        VARIANT_BOOL Value );
    __int64 GetDBAddress64 ( );
    __int64 GetTSAddress64 ( );
    VARIANT_BOOL GetCalcSingleValue ( );
    double GetCustExportRate ( );
    IPropertiesPtr GetProperties ( );
    HRESULT AddAsyncWordSample (
        unsigned short Value,
        double TimeStamp );
    _variant_t GetCustomProp (
        _bstr_t Name );
    __int64 GetBinAddress64 ( );
    _variant_t GetScaledDataDoubleEx (
        long Start,
        long Count );
    void PutCustExportRate (
        double Value );
    HRESULT SetAsCANFDMessage ( );
    long GetExpectedAsyncRateType ( );
    void PutExpectedAsyncRateType (
        long Value );
    double GetValueAtRelTimeDouble (
        double Time,
        long * AsyncSeekPos,
        VARIANT_BOOL Interpolate,
        long Ind,
        enum ComplexPresentation ComplexPresent );
    double DBValuesEx (
        long Index,
        enum ComplexPresentation ComplexPresent );
    _bstr_t GetLongName ( );
    VARIANT_BOOL GetShowLongName ( );
    _bstr_t GetDisplayName ( );
    double GetWarningLevelHigh ( );
    void PutWarningLevelHigh (
        double Value );
    double GetWarningLevelLow ( );
    void PutWarningLevelLow (
        double Value );
    double GetCriticalLevelHigh ( );
    void PutCriticalLevelHigh (
        double Value );
    double GetCriticalLevelLow ( );
    void PutCriticalLevelLow (
        double Value );
    __int64 GetValueAtAbsPosInt64 (
        long Pos,
        long * SeekPos,
        VARIANT_BOOL Interpolate );
    double GetSampleRate ( );
    double CalcDataScale ( );
    double CalcDataOffset ( );
    long GetDigitsAfterDecPoint ( );
    HRESULT AddAsyncLongwordSample (
        unsigned long Value,
        double TimeStamp );
    HRESULT AddLongwordSample (
        unsigned long Value );
    HRESULT SetCustomProp (
        _bstr_t Name,
        const _variant_t & Value );
    VARIANT_BOOL GetIsScaleEnabled ( );
    VARIANT_BOOL GetIsDoublePrecision ( );
    VARIANT_BOOL SendMessageEvent (
        _bstr_t MsgHeader,
        _bstr_t MsgData,
        BSTR * MsgOut );
    VARIANT_BOOL SendMessageToOwnerEvent (
        _bstr_t MsgHeader,
        _bstr_t MsgData,
        BSTR * MsgOut );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IBValues (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct T_ReducedRec * Value ) = 0;
      virtual HRESULT __stdcall get_RBValues (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct T_ReducedRec * Value ) = 0;
      virtual HRESULT __stdcall get_DBValues (
        /*[in]*/ long Index,
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall get_DBBufSize (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_DBDataSize (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_DBPos (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_IBBufSize (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_IBDataSize (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_IBPos (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_RBBufSize (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_RBDataSize (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_RBPos (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_DBTimeStamp (
        /*[in]*/ long Index,
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall get_Used (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Used (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Shown (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Shown (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall raw_GetUnscaledData (
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall raw_GetScaledData (
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall raw_GetDBAddress (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_DataType (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_Bytes (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_Async (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall raw_AddSingleSample (
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_GetTSData (
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall raw_GetUnscaledDataEx (
        /*[in]*/ long Start,
        /*[in]*/ long Count,
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall raw_ScaleValue (
        /*[in]*/ float Value,
        /*[out,retval]*/ float * Value1 ) = 0;
      virtual HRESULT __stdcall raw_AddAsyncSingleSample (
        /*[in]*/ float Value,
        /*[in]*/ double TimeStamp ) = 0;
      virtual HRESULT __stdcall raw_GetScaledDataEx (
        /*[in]*/ long Start,
        /*[in]*/ long Count,
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall get_SRDiv (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_Group (
        /*[out,retval]*/ struct IChannelGroup * * Value ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_Description (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_Unit_ (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_Unit_ (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall raw_AddAsyncDoubleSample (
        /*[in]*/ double Value,
        /*[in]*/ double TimeStamp ) = 0;
      virtual HRESULT __stdcall raw_AddAsyncByteSample (
        /*[in]*/ unsigned char Value,
        /*[in]*/ double TimeStamp ) = 0;
      virtual HRESULT __stdcall get_MType (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_MType (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Measurement (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_Measurement (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall raw_CreateConnection (
        /*[out,retval]*/ struct IChannelConnection * * Value ) = 0;
      virtual HRESULT __stdcall get_MainDisplayColor (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_MainDisplayColor (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_TypicalMinValue (
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall get_TypicalMaxValue (
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ struct T_ChIndex * Value ) = 0;
      virtual HRESULT __stdcall raw_GetScaledDataEx1 (
        /*[in]*/ long Start,
        /*[in]*/ long Count,
        /*[out]*/ VARIANT * Data ) = 0;
      virtual HRESULT __stdcall raw_GetUnscaledDataEx1 (
        /*[in]*/ long Start,
        /*[in]*/ long Count,
        /*[out]*/ VARIANT * Data ) = 0;
      virtual HRESULT __stdcall raw_GetTSDataEx (
        /*[in]*/ long Start,
        /*[in]*/ long Count,
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall raw_GetTSDataEx1 (
        /*[in]*/ long Start,
        /*[in]*/ long Count,
        /*[out]*/ VARIANT * Data ) = 0;
      virtual HRESULT __stdcall raw_GetIBValues (
        /*[in]*/ long Pos,
        /*[out]*/ float * Min,
        /*[out]*/ float * Max,
        /*[out]*/ float * Ave,
        /*[out]*/ float * Rms ) = 0;
      virtual HRESULT __stdcall raw_GetRBValues (
        /*[in]*/ long Pos,
        /*[out]*/ float * Min,
        /*[out]*/ float * Max,
        /*[out]*/ float * Ave,
        /*[out]*/ float * Rms ) = 0;
      virtual HRESULT __stdcall raw_GetIndex1 (
        /*[out]*/ long * IndexLevel,
        /*[out]*/ long * I1,
        /*[out]*/ long * I2,
        /*[out]*/ long * I3,
        /*[out]*/ long * I4,
        /*[out]*/ long * I5 ) = 0;
      virtual HRESULT __stdcall get_UserScaleMin (
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall put_UserScaleMin (
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall get_UserScaleMax (
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall put_UserScaleMax (
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_Offset (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_Offset (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall raw_IncDBSamples (
        /*[in]*/ long Count ) = 0;
      virtual HRESULT __stdcall raw_AddSingleSamples (
        /*[in]*/ long Count,
        /*[in]*/ VARIANT Data,
        /*[in]*/ VARIANT Timestamps ) = 0;
      virtual HRESULT __stdcall raw_SetSRDiv (
        /*[in]*/ long SRDiv ) = 0;
      virtual HRESULT __stdcall raw_SetSRDivType (
        /*[in]*/ enum TSRDivType AType ) = 0;
      virtual HRESULT __stdcall get_ExportOrder (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_ExportOrder (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_CalcDelay (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_CalcDelay (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_AddAsyncShortintSample (
        /*[in]*/ char Value,
        /*[in]*/ double TimeStamp ) = 0;
      virtual HRESULT __stdcall raw_AddAsyncSmallintSample (
        /*[in]*/ short Value,
        /*[in]*/ double TimeStamp ) = 0;
      virtual HRESULT __stdcall raw_AddAsyncIntegerSample (
        /*[in]*/ long Value,
        /*[in]*/ double TimeStamp ) = 0;
      virtual HRESULT __stdcall raw_AddAsyncInt64Sample (
        /*[in]*/ __int64 Value,
        /*[in]*/ double TimeStamp ) = 0;
      virtual HRESULT __stdcall get_CalcSRDiv (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_ChangeThreshold (
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall put_ChangeThreshold (
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall get_DiscreteList (
        /*[out,retval]*/ struct IDiscreteList * * Value ) = 0;
      virtual HRESULT __stdcall raw_GetChannelSetup (
        /*[out]*/ VARIANT * Data ) = 0;
      virtual HRESULT __stdcall raw_SetChannelSetup (
        /*[in]*/ VARIANT Data ) = 0;
      virtual HRESULT __stdcall raw_SetDataType (
        /*[in]*/ long ADataType ) = 0;
      virtual HRESULT __stdcall get_BitCount (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_BitCount (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Settings (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall get_ChNo (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall get_Exported (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Exported (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_AbsMin (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall get_AbsMax (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall get_IsSingleValue (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall get_SingleValue (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_SingleValue (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall raw_SetFreezeMode (
        /*[in]*/ VARIANT_BOOL Freeze ) = 0;
      virtual HRESULT __stdcall get_LogicalName (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_LogicalName (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_LogicalIndex (
        /*[out,retval]*/ __int64 * Value ) = 0;
      virtual HRESULT __stdcall put_LogicalIndex (
        /*[in]*/ __int64 Value ) = 0;
      virtual HRESULT __stdcall get_Tag (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Tag (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetAsync (
        /*[in]*/ VARIANT_BOOL Async ) = 0;
      virtual HRESULT __stdcall raw_SetIsSingleValue (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Scale_ (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_Scale_ (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_Stored (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Stored (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall raw_AddByteSample (
        /*[in]*/ unsigned char Value ) = 0;
      virtual HRESULT __stdcall raw_AddShortintSample (
        /*[in]*/ char Value ) = 0;
      virtual HRESULT __stdcall raw_AddSmallintSample (
        /*[in]*/ short Value ) = 0;
      virtual HRESULT __stdcall raw_AddWordSample (
        /*[in]*/ unsigned short Value ) = 0;
      virtual HRESULT __stdcall raw_AddIntegerSample (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_AddIn64Sample (
        /*[in]*/ __int64 Value ) = 0;
      virtual HRESULT __stdcall raw_AddDoubleSample (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall raw_GetValueAtAbsPos (
        /*[in]*/ long Pos,
        /*[in,out]*/ long * SeekPos,
        /*[in]*/ VARIANT_BOOL Interpolate,
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall raw_GetValueAtAbsPosDouble (
        /*[in]*/ long Pos,
        /*[in,out]*/ long * SeekPos,
        /*[in]*/ VARIANT_BOOL Interpolate,
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall raw_UpdateXML (
        /*[in]*/ VARIANT DOMDocument,
        /*[in]*/ VARIANT DOMNode,
        /*[in]*/ VARIANT_BOOL Write ) = 0;
      virtual HRESULT __stdcall get_ArrayInfo (
        /*[out,retval]*/ struct IArrayInfo * * Value ) = 0;
      virtual HRESULT __stdcall get_ArrayChannel (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_ArrayChannel (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_ArraySize (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_AddAsyncData (
        /*[in]*/ VARIANT Data,
        /*[in]*/ double TimeStamp ) = 0;
      virtual HRESULT __stdcall raw_AddData (
        /*[in]*/ VARIANT Data ) = 0;
      virtual HRESULT __stdcall raw_GetOfflineStatus (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_ExpectedAsyncRate (
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall put_ExpectedAsyncRate (
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall get_FirstIBLevel (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_IBValuesEx (
        /*[in]*/ long Level,
        /*[in]*/ long Index,
        /*[out,retval]*/ struct T_ReducedRec * Value ) = 0;
      virtual HRESULT __stdcall get_IBPosEx (
        /*[in]*/ long Level,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_IBDataSizeEx (
        /*[in]*/ long Level,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_SelectorIndexLevel (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_SelectorIndexLevel (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_SelectorIndexStartLevel (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_SelectorIndexStartLevel (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_SelectorIndex (
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall put_SelectorIndex (
        /*[in]*/ VARIANT Value ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_FirstX (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_FirstX (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_SecondX (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_SecondX (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_IsControlChannel (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_IsControlChannel (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_ControlChannelState (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_ControlChannelState (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_DBValuesDouble (
        /*[in]*/ long Index,
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall raw_AddAsyncString (
        /*[in]*/ BSTR Value,
        /*[in]*/ double TimeStamp ) = 0;
      virtual HRESULT __stdcall raw_SetAsStringChannel (
        /*[in]*/ long Size ) = 0;
      virtual HRESULT __stdcall raw_ScaleValueDouble (
        /*[in]*/ double Value,
        /*[out,retval]*/ double * Value1 ) = 0;
      virtual HRESULT __stdcall get_DStopDataAvail (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_DStopDataAvailDir (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_DStartDataAvail (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_IndexEx (
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall raw_ShowChannelSetup ( ) = 0;
      virtual HRESULT __stdcall raw_GetTSAddress (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_ControlChannelFlags (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_ControlChannelFlags (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_SRDivType (
        /*[out,retval]*/ enum TSRDivType * Value ) = 0;
      virtual HRESULT __stdcall raw_FastCalc ( ) = 0;
      virtual HRESULT __stdcall raw_FastCalcInt32 (
        /*[in]*/ long Min,
        /*[in]*/ long Max,
        /*[in]*/ double Ave,
        /*[in]*/ double Rms ) = 0;
      virtual HRESULT __stdcall raw_AddIntegerSampleWithCalc (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_AddSmallintSampleWithCalc (
        /*[in]*/ short Value ) = 0;
      virtual HRESULT __stdcall raw_AddShortintSampleWithCalc (
        /*[in]*/ char Value ) = 0;
      virtual HRESULT __stdcall raw_FastCalcInt16 (
        /*[in]*/ short Min,
        /*[in]*/ short Max,
        /*[in]*/ float Ave,
        /*[in]*/ float Rms ) = 0;
      virtual HRESULT __stdcall get_ViewInfo (
        /*[out,retval]*/ struct IViewInfo * * Value ) = 0;
      virtual HRESULT __stdcall raw_AddAsyncBinarySample (
        /*[in]*/ double TimeStamp,
        /*[in]*/ VARIANT Data ) = 0;
      virtual HRESULT __stdcall get_BinAvgSampleSize (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_BinAvgSampleSize (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_GetBinaryDataAtPos (
        /*[in]*/ long Pos,
        /*[in,out]*/ VARIANT * Data ) = 0;
      virtual HRESULT __stdcall get_GetBinAddress (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_BinAbsPos (
        /*[out,retval]*/ __int64 * Value ) = 0;
      virtual HRESULT __stdcall get_BinBufSize (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_ValueChanged ( ) = 0;
      virtual HRESULT __stdcall raw_StartFastCalc ( ) = 0;
      virtual HRESULT __stdcall get_KeepValues (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_KeepValues (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall raw_GetDBAddress64 (
        /*[out,retval]*/ __int64 * Value ) = 0;
      virtual HRESULT __stdcall raw_GetTSAddress64 (
        /*[out,retval]*/ __int64 * Value ) = 0;
      virtual HRESULT __stdcall get_CalcSingleValue (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall get_CustExportRate (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall get_Properties (
        /*[out,retval]*/ struct IProperties * * Value ) = 0;
      virtual HRESULT __stdcall raw_AddAsyncWordSample (
        /*[in]*/ unsigned short Value,
        /*[in]*/ double TimeStamp ) = 0;
      virtual HRESULT __stdcall raw_GetCustomProp (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall raw_GetBinAddress64 (
        /*[out,retval]*/ __int64 * Value ) = 0;
      virtual HRESULT __stdcall raw_GetScaledDataDoubleEx (
        /*[in]*/ long Start,
        /*[in]*/ long Count,
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall put_CustExportRate (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall raw_SetAsCANFDMessage ( ) = 0;
      virtual HRESULT __stdcall get_ExpectedAsyncRateType (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_ExpectedAsyncRateType (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_GetValueAtRelTimeDouble (
        /*[in]*/ double Time,
        /*[in,out]*/ long * AsyncSeekPos,
        /*[in]*/ VARIANT_BOOL Interpolate,
        /*[in]*/ long Ind,
        /*[in]*/ enum ComplexPresentation ComplexPresent,
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall raw_DBValuesEx (
        /*[in]*/ long Index,
        /*[in]*/ enum ComplexPresentation ComplexPresent,
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall get_LongName (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall get_ShowLongName (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall get_DisplayName (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall get_WarningLevelHigh (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_WarningLevelHigh (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_WarningLevelLow (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_WarningLevelLow (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_CriticalLevelHigh (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_CriticalLevelHigh (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_CriticalLevelLow (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_CriticalLevelLow (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall raw_GetValueAtAbsPosInt64 (
        /*[in]*/ long Pos,
        /*[in,out]*/ long * SeekPos,
        /*[in]*/ VARIANT_BOOL Interpolate,
        /*[out,retval]*/ __int64 * Value ) = 0;
      virtual HRESULT __stdcall raw_GetSampleRate (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall raw_CalcDataScale (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall raw_CalcDataOffset (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall raw_GetDigitsAfterDecPoint (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_AddAsyncLongwordSample (
        /*[in]*/ unsigned long Value,
        /*[in]*/ double TimeStamp ) = 0;
      virtual HRESULT __stdcall raw_AddLongwordSample (
        /*[in]*/ unsigned long Value ) = 0;
      virtual HRESULT __stdcall raw_SetCustomProp (
        /*[in]*/ BSTR Name,
        /*[in]*/ VARIANT Value ) = 0;
      virtual HRESULT __stdcall get_IsScaleEnabled (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall get_IsDoublePrecision (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall raw_SendMessageEvent (
        /*[in]*/ BSTR MsgHeader,
        /*[in]*/ BSTR MsgData,
        /*[out]*/ BSTR * MsgOut,
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall raw_SendMessageToOwnerEvent (
        /*[in]*/ BSTR MsgHeader,
        /*[in]*/ BSTR MsgData,
        /*[out]*/ BSTR * MsgOut,
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
};

struct __declspec(uuid("788183a5-1fc0-48e8-93ec-a6ee075a42f9"))
IChannelList : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IChannelPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IChannelPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IChannel * * Value ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Value ) = 0;
};

struct __declspec(uuid("763e6e43-6464-4cb8-9701-a645b060f216"))
IChannelGroup : IChannelList
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetExportRate,put=PutExportRate))
    long ExportRate;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    long GetExportRate ( );
    void PutExportRate (
        long Value );
    _bstr_t GetIndexName (
        struct T_ChIndex Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall get_ExportRate (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_ExportRate (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_GetIndexName (
        /*[in]*/ struct T_ChIndex Index,
        /*[out,retval]*/ BSTR * Value ) = 0;
};

struct __declspec(uuid("efc6dff0-b694-41f8-905d-45612724bd7d"))
IChannelGroups : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IChannelGroupPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IChannelGroupPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IChannelGroup * * Value ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Value ) = 0;
};

struct __declspec(uuid("21b73cc2-ac60-4bab-bef0-fa4453894eef"))
IPluginGroup : IChannelGroup
{
    //
    // Wrapper methods for error-handling
    //

    IChannelPtr MountChannel (
        long DataType,
        VARIANT_BOOL Async,
        long DBSize );
    HRESULT ClearAllChannels ( );
    HRESULT UnmountChannel (
        struct IChannel * * Channel );
    HRESULT AddIndexName (
        long Level,
        const _variant_t & Ind,
        _bstr_t Name );
    IChannelPtr MountChannelEx (
        _bstr_t PluginGUID,
        long IndexLevel,
        const _variant_t & Ind );
    IChannelPtr FindChannel (
        _bstr_t PluginGUID,
        long IndexLevel,
        const _variant_t & Ind,
        VARIANT_BOOL AllowMount );
    IInputGroupPtr MountInputGroup (
        _bstr_t PluginGUID,
        const _variant_t & Index );
    HRESULT AddIndexNameEx (
        _bstr_t PluginGUID,
        long Level,
        const _variant_t & Ind,
        _bstr_t Name );
    IInputGroupPtr FindInputGroup (
        _bstr_t PluginGUID,
        long IndexLevel,
        const _variant_t & Ind );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_MountChannel (
        /*[in]*/ long DataType,
        /*[in]*/ VARIANT_BOOL Async,
        /*[in]*/ long DBSize,
        /*[out,retval]*/ struct IChannel * * Value ) = 0;
      virtual HRESULT __stdcall raw_ClearAllChannels ( ) = 0;
      virtual HRESULT __stdcall raw_UnmountChannel (
        /*[in,out]*/ struct IChannel * * Channel ) = 0;
      virtual HRESULT __stdcall raw_AddIndexName (
        /*[in]*/ long Level,
        /*[in]*/ VARIANT Ind,
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall raw_MountChannelEx (
        /*[in]*/ BSTR PluginGUID,
        /*[in]*/ long IndexLevel,
        /*[in]*/ VARIANT Ind,
        /*[out,retval]*/ struct IChannel * * Value ) = 0;
      virtual HRESULT __stdcall raw_FindChannel (
        /*[in]*/ BSTR PluginGUID,
        /*[in]*/ long IndexLevel,
        /*[in]*/ VARIANT Ind,
        /*[in]*/ VARIANT_BOOL AllowMount,
        /*[out,retval]*/ struct IChannel * * Value ) = 0;
      virtual HRESULT __stdcall raw_MountInputGroup (
        /*[in]*/ BSTR PluginGUID,
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IInputGroup * * Value ) = 0;
      virtual HRESULT __stdcall raw_AddIndexNameEx (
        /*[in]*/ BSTR PluginGUID,
        /*[in]*/ long Level,
        /*[in]*/ VARIANT Ind,
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall raw_FindInputGroup (
        /*[in]*/ BSTR PluginGUID,
        /*[in]*/ long IndexLevel,
        /*[in]*/ VARIANT Ind,
        /*[out,retval]*/ struct IInputGroup * * Value ) = 0;
};

struct __declspec(uuid("7515b878-6b71-4020-bff3-b880451e163b"))
IDataSection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDataCount))
    long DataCount;
    __declspec(property(get=GetTime))
    DATE Time;
    __declspec(property(get=GetTrigPos))
    long TrigPos;

    //
    // Wrapper methods for error-handling
    //

    _variant_t ReadData (
        struct IChannel * Channel,
        VARIANT * Timestamps );
    DATE GetTime ( );
    HRESULT ReadData1 (
        struct IChannel * Channel,
        VARIANT * Data,
        VARIANT * Timestamps );
    long GetDataCount ( );
    long GetTrigPos ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_ReadData (
        /*[in]*/ struct IChannel * Channel,
        /*[out]*/ VARIANT * Timestamps,
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall get_Time (
        /*[out,retval]*/ DATE * Value ) = 0;
      virtual HRESULT __stdcall raw_ReadData1 (
        /*[in]*/ struct IChannel * Channel,
        /*[out]*/ VARIANT * Data,
        /*[out]*/ VARIANT * Timestamps ) = 0;
      virtual HRESULT __stdcall get_DataCount (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_TrigPos (
        /*[out,retval]*/ long * Value ) = 0;
};

struct __declspec(uuid("9289b1ac-5753-4d6b-b8d6-9e986194875c"))
IDataSections : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IDataSectionPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    IDataSectionPtr GetItem (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Value ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IDataSection * * Value ) = 0;
};

struct __declspec(uuid("a1114daa-8d7f-4809-92f9-d6c1dcbf5d81"))
ILoadEngine : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNumBlocks))
    long NumBlocks;
    __declspec(property(get=GetDataSections))
    IDataSectionsPtr DataSections;
    __declspec(property(get=GetReducedOnly))
    VARIANT_BOOL ReducedOnly;
    __declspec(property(get=GetFileOpened))
    VARIANT_BOOL FileOpened;
    __declspec(property(get=GetVideoLoadEngines))
    IVideoLoadEnginesPtr VideoLoadEngines;
    __declspec(property(get=GetDuration))
    double Duration;
    __declspec(property(get=GetFileName))
    _bstr_t FileName;

    //
    // Wrapper methods for error-handling
    //

    HRESULT ReloadBlock (
        long Num );
    long GetNumBlocks ( );
    IDataSectionsPtr GetDataSections ( );
    VARIANT_BOOL GetReducedOnly ( );
    HRESULT CloseFile ( );
    VARIANT_BOOL GetFileOpened ( );
    HRESULT ShrinkFile (
        _bstr_t FileName );
    IVideoLoadEnginesPtr GetVideoLoadEngines ( );
    HRESULT Reload (
        struct T_RecordPosition Start,
        struct T_RecordPosition Stop );
    HRESULT StartDBLoad (
        struct T_RecordPosition Start,
        struct T_RecordPosition Stop,
        long BlockSize );
    VARIANT_BOOL NextDBLoad ( );
    HRESULT StartVideoCompress ( );
    VARIANT_BOOL StopVideoCompress ( );
    long GetVideoCompressDone ( );
    VARIANT_BOOL IsVideoCompressDone ( );
    HRESULT ReloadEx (
        long StartBlock,
        long EndBlock,
        struct IChannel * Channel,
        long MinLevel );
    double GetDuration ( );
    HRESULT EnterLoadSync ( );
    HRESULT LeaveLoadSync ( );
    _bstr_t GetFileName ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_ReloadBlock (
        /*[in]*/ long Num ) = 0;
      virtual HRESULT __stdcall get_NumBlocks (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_DataSections (
        /*[out,retval]*/ struct IDataSections * * Value ) = 0;
      virtual HRESULT __stdcall get_ReducedOnly (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall raw_CloseFile ( ) = 0;
      virtual HRESULT __stdcall get_FileOpened (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall raw_ShrinkFile (
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall get_VideoLoadEngines (
        /*[out,retval]*/ struct IVideoLoadEngines * * Value ) = 0;
      virtual HRESULT __stdcall raw_Reload (
        /*[in]*/ struct T_RecordPosition Start,
        /*[in]*/ struct T_RecordPosition Stop ) = 0;
      virtual HRESULT __stdcall raw_StartDBLoad (
        /*[in]*/ struct T_RecordPosition Start,
        /*[in]*/ struct T_RecordPosition Stop,
        /*[in]*/ long BlockSize ) = 0;
      virtual HRESULT __stdcall raw_NextDBLoad (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall raw_StartVideoCompress ( ) = 0;
      virtual HRESULT __stdcall raw_StopVideoCompress (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall raw_GetVideoCompressDone (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_IsVideoCompressDone (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall raw_ReloadEx (
        /*[in]*/ long StartBlock,
        /*[in]*/ long EndBlock,
        /*[in]*/ struct IChannel * Channel,
        /*[in]*/ long MinLevel ) = 0;
      virtual HRESULT __stdcall get_Duration (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall raw_EnterLoadSync ( ) = 0;
      virtual HRESULT __stdcall raw_LeaveLoadSync ( ) = 0;
      virtual HRESULT __stdcall get_FileName (
        /*[out,retval]*/ BSTR * Value ) = 0;
};

struct __declspec(uuid("44f950d5-4db2-4bc8-a636-653d98cbf652"))
IChannelConnection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAType,put=PutAType))
    enum ConnTypes AType;
    __declspec(property(get=GetNumValues))
    long NumValues;
    __declspec(property(get=GetNumBlocks))
    long NumBlocks;
    __declspec(property(get=GetOverlap,put=PutOverlap))
    long Overlap;
    __declspec(property(get=GetBlockSize,put=PutBlockSize))
    long BlockSize;
    __declspec(property(get=GetChannel))
    IChannelPtr Channel;

    //
    // Wrapper methods for error-handling
    //

    enum ConnTypes GetAType ( );
    void PutAType (
        enum ConnTypes Value );
    long GetNumValues ( );
    long GetNumBlocks ( );
    _variant_t GetDataValues (
        long NumValues );
    _variant_t GetDataBlocks (
        long NumBlocks );
    long GetOverlap ( );
    void PutOverlap (
        long Value );
    long GetBlockSize ( );
    void PutBlockSize (
        long Value );
    HRESULT Reset ( );
    IChannelPtr GetChannel ( );
    HRESULT GetDataValues1 (
        long NumValues,
        VARIANT * Data );
    HRESULT GetDataBlocks1 (
        long NumBlocks,
        VARIANT * Data );
    _variant_t GetTSValues (
        long NumValues );
    _variant_t GetTSBlocks (
        long NumBlocks );
    HRESULT GetTSValues1 (
        long NumValues,
        VARIANT * Data );
    HRESULT GetTSBlocks1 (
        long NumBlocks,
        VARIANT * Data );
    HRESULT Start ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AType (
        /*[out,retval]*/ enum ConnTypes * Value ) = 0;
      virtual HRESULT __stdcall put_AType (
        /*[in]*/ enum ConnTypes Value ) = 0;
      virtual HRESULT __stdcall get_NumValues (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_NumBlocks (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_GetDataValues (
        /*[in]*/ long NumValues,
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall raw_GetDataBlocks (
        /*[in]*/ long NumBlocks,
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall get_Overlap (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Overlap (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_BlockSize (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_BlockSize (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_Reset ( ) = 0;
      virtual HRESULT __stdcall get_Channel (
        /*[out,retval]*/ struct IChannel * * Value ) = 0;
      virtual HRESULT __stdcall raw_GetDataValues1 (
        /*[in]*/ long NumValues,
        /*[out]*/ VARIANT * Data ) = 0;
      virtual HRESULT __stdcall raw_GetDataBlocks1 (
        /*[in]*/ long NumBlocks,
        /*[out]*/ VARIANT * Data ) = 0;
      virtual HRESULT __stdcall raw_GetTSValues (
        /*[in]*/ long NumValues,
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall raw_GetTSBlocks (
        /*[in]*/ long NumBlocks,
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall raw_GetTSValues1 (
        /*[in]*/ long NumValues,
        /*[out]*/ VARIANT * Data ) = 0;
      virtual HRESULT __stdcall raw_GetTSBlocks1 (
        /*[in]*/ long NumBlocks,
        /*[out]*/ VARIANT * Data ) = 0;
      virtual HRESULT __stdcall raw_Start ( ) = 0;
};

struct __declspec(uuid("c0b4dee8-073d-4e57-9dac-8a72cbc6a51f"))
IChannelGroup2 : IChannelGroup
{
    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetIndexNameShort (
        struct T_ChIndex Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetIndexNameShort (
        /*[in]*/ struct T_ChIndex Index,
        /*[out,retval]*/ BSTR * Value ) = 0;
};

struct __declspec(uuid("78087aeb-d02b-488f-9757-ba685d03771c"))
IAOGroup : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetOperationMode,put=PutOperationMode))
    enum AOOperationMode OperationMode;
    __declspec(property(get=GetSampleRate,put=PutSampleRate))
    long SampleRate;
    __declspec(property(get=GetStopTime,put=PutStopTime))
    float StopTime;
    __declspec(property(get=GetStartTime,put=PutStartTime))
    float StartTime;
    __declspec(property(get=GetStartFreq,put=PutStartFreq))
    float StartFreq;
    __declspec(property(get=GetStopFreq,put=PutStopFreq))
    float StopFreq;
    __declspec(property(get=GetDeltaFreq,put=PutDeltaFreq))
    float DeltaFreq;
    __declspec(property(get=GetLogSweep,put=PutLogSweep))
    VARIANT_BOOL LogSweep;
    __declspec(property(get=GetSweepMode,put=PutSweepMode))
    enum AOSweepMode SweepMode;
    __declspec(property(get=GetFreq,put=PutFreq))
    float Freq;
    __declspec(property(get=GetAmplChangeFactor,put=PutAmplChangeFactor))
    float AmplChangeFactor;
    __declspec(property(get=GetDCChangeFactor,put=PutDCChangeFactor))
    float DCChangeFactor;
    __declspec(property(get=GetPhaseChangeFactor,put=PutPhaseChangeFactor))
    float PhaseChangeFactor;
    __declspec(property(get=GetFreqChangeFactor,put=PutFreqChangeFactor))
    float FreqChangeFactor;
    __declspec(property(get=GetShowInfoChannels,put=PutShowInfoChannels))
    VARIANT_BOOL ShowInfoChannels;
    __declspec(property(get=GetControlsClock))
    VARIANT_BOOL ControlsClock;
    __declspec(property(get=GetAOChannels))
    IChannelListPtr AOChannels;

    //
    // Wrapper methods for error-handling
    //

    enum AOOperationMode GetOperationMode ( );
    void PutOperationMode (
        enum AOOperationMode Value );
    long GetSampleRate ( );
    void PutSampleRate (
        long Value );
    float GetStopTime ( );
    void PutStopTime (
        float Value );
    float GetStartTime ( );
    void PutStartTime (
        float Value );
    float GetStartFreq ( );
    void PutStartFreq (
        float Value );
    float GetStopFreq ( );
    void PutStopFreq (
        float Value );
    float GetDeltaFreq ( );
    void PutDeltaFreq (
        float Value );
    VARIANT_BOOL GetLogSweep ( );
    void PutLogSweep (
        VARIANT_BOOL Value );
    enum AOSweepMode GetSweepMode ( );
    void PutSweepMode (
        enum AOSweepMode Value );
    float GetFreq ( );
    void PutFreq (
        float Value );
    float GetAmplChangeFactor ( );
    void PutAmplChangeFactor (
        float Value );
    float GetDCChangeFactor ( );
    void PutDCChangeFactor (
        float Value );
    float GetPhaseChangeFactor ( );
    void PutPhaseChangeFactor (
        float Value );
    float GetFreqChangeFactor ( );
    void PutFreqChangeFactor (
        float Value );
    VARIANT_BOOL GetShowInfoChannels ( );
    void PutShowInfoChannels (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetControlsClock ( );
    IChannelListPtr GetAOChannels ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_OperationMode (
        /*[out,retval]*/ enum AOOperationMode * Value ) = 0;
      virtual HRESULT __stdcall put_OperationMode (
        /*[in]*/ enum AOOperationMode Value ) = 0;
      virtual HRESULT __stdcall get_SampleRate (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_SampleRate (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_StopTime (
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall put_StopTime (
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall get_StartTime (
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall put_StartTime (
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall get_StartFreq (
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall put_StartFreq (
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall get_StopFreq (
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall put_StopFreq (
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall get_DeltaFreq (
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall put_DeltaFreq (
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall get_LogSweep (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_LogSweep (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_SweepMode (
        /*[out,retval]*/ enum AOSweepMode * Value ) = 0;
      virtual HRESULT __stdcall put_SweepMode (
        /*[in]*/ enum AOSweepMode Value ) = 0;
      virtual HRESULT __stdcall get_Freq (
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall put_Freq (
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall get_AmplChangeFactor (
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall put_AmplChangeFactor (
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall get_DCChangeFactor (
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall put_DCChangeFactor (
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall get_PhaseChangeFactor (
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall put_PhaseChangeFactor (
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall get_FreqChangeFactor (
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall put_FreqChangeFactor (
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall get_ShowInfoChannels (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_ShowInfoChannels (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_ControlsClock (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall get_AOChannels (
        /*[out,retval]*/ struct IChannelList * * Value ) = 0;
};

struct __declspec(uuid("9d97cef7-1a44-4065-904a-28575032572d"))
ITriggerCondition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMode,put=PutMode))
    long Mode;
    __declspec(property(get=GetTrigType,put=PutTrigType))
    long TrigType;
    __declspec(property(get=GetDirection,put=PutDirection))
    long Direction;
    __declspec(property(get=GetTrigValue,put=PutTrigValue))
    long TrigValue;
    __declspec(property(get=GetLevel1,put=PutLevel1))
    float Level1;
    __declspec(property(get=GetLevel2,put=PutLevel2))
    float Level2;
    __declspec(property(get=GetChannels))
    IChannelListPtr Channels;
    __declspec(property(get=GetDirection1,put=PutDirection1))
    long Direction1;
    __declspec(property(get=GetDeltaTime,put=PutDeltaTime))
    double DeltaTime;
    __declspec(property(get=GetTimeValue,put=PutTimeValue))
    double TimeValue;
    __declspec(property(get=GetTimeUnit,put=PutTimeUnit))
    long TimeUnit;
    __declspec(property(get=GetTimeCond,put=PutTimeCond))
    long TimeCond;
    __declspec(property(get=GetTimeFormat,put=PutTimeFormat))
    long TimeFormat;

    //
    // Wrapper methods for error-handling
    //

    long GetMode ( );
    void PutMode (
        long Value );
    long GetTrigType ( );
    void PutTrigType (
        long Value );
    long GetDirection ( );
    void PutDirection (
        long Value );
    long GetTrigValue ( );
    void PutTrigValue (
        long Value );
    float GetLevel1 ( );
    void PutLevel1 (
        float Value );
    float GetLevel2 ( );
    void PutLevel2 (
        float Value );
    IChannelListPtr GetChannels ( );
    HRESULT AddChannel (
        struct IChannel * Ch );
    HRESULT DeleteChannel (
        long Index );
    HRESULT ClearChannels ( );
    long GetDirection1 ( );
    void PutDirection1 (
        long Value );
    double GetDeltaTime ( );
    void PutDeltaTime (
        double Value );
    double GetTimeValue ( );
    void PutTimeValue (
        double Value );
    long GetTimeUnit ( );
    void PutTimeUnit (
        long Value );
    long GetTimeCond ( );
    void PutTimeCond (
        long Value );
    long GetTimeFormat ( );
    void PutTimeFormat (
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Mode (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Mode (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_TrigType (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_TrigType (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Direction (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_TrigValue (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_TrigValue (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Level1 (
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall put_Level1 (
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall get_Level2 (
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall put_Level2 (
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall get_Channels (
        /*[out,retval]*/ struct IChannelList * * Value ) = 0;
      virtual HRESULT __stdcall raw_AddChannel (
        /*[in]*/ struct IChannel * Ch ) = 0;
      virtual HRESULT __stdcall raw_DeleteChannel (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_ClearChannels ( ) = 0;
      virtual HRESULT __stdcall get_Direction1 (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Direction1 (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_DeltaTime (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_DeltaTime (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_TimeValue (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_TimeValue (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_TimeUnit (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_TimeUnit (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_TimeCond (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_TimeCond (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_TimeFormat (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_TimeFormat (
        /*[in]*/ long Value ) = 0;
};

struct __declspec(uuid("2ca6fa4f-0e5c-4b4e-9e8f-e241be14e622"))
ITriggerCondList : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    ITriggerConditionPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    ITriggerConditionPtr GetItem (
        long Index );
    ITriggerConditionPtr Add ( );
    HRESULT Remove (
        long Ind );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Value ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct ITriggerCondition * * Value ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct ITriggerCondition * * Value ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ long Ind ) = 0;
};

struct __declspec(uuid("3e3732b1-3146-429d-8c33-f89ae5ffde92"))
ITrig : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetOrList))
    ITriggerCondListPtr OrList;
    __declspec(property(get=GetNotOrList))
    ITriggerCondListPtr NotOrList;
    __declspec(property(get=GetTrigIndex))
    long TrigIndex;

    //
    // Wrapper methods for error-handling
    //

    ITriggerCondListPtr GetOrList ( );
    ITriggerCondListPtr GetNotOrList ( );
    long GetTrigIndex ( );
    HRESULT GetTrigIndexEx (
        long * CondIndex,
        long * ChIndex,
        struct IChannel * * Ch );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_OrList (
        /*[out,retval]*/ struct ITriggerCondList * * Value ) = 0;
      virtual HRESULT __stdcall get_NotOrList (
        /*[out,retval]*/ struct ITriggerCondList * * Value ) = 0;
      virtual HRESULT __stdcall get_TrigIndex (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_GetTrigIndexEx (
        /*[in,out]*/ long * CondIndex,
        /*[in,out]*/ long * ChIndex,
        /*[in,out]*/ struct IChannel * * Ch ) = 0;
};

struct __declspec(uuid("b2f13d39-72c9-497a-8a38-9d16ddf6d9f2"))
ITrigger : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPreTimeUsed,put=PutPreTimeUsed))
    VARIANT_BOOL PreTimeUsed;
    __declspec(property(get=GetPostTimeUsed,put=PutPostTimeUsed))
    VARIANT_BOOL PostTimeUsed;
    __declspec(property(get=GetPreTime,put=PutPreTime))
    float PreTime;
    __declspec(property(get=GetPostTime,put=PutPostTime))
    float PostTime;
    __declspec(property(get=GetStartTrig))
    ITrigPtr StartTrig;
    __declspec(property(get=GetStopTrig))
    ITrigPtr StopTrig;
    __declspec(property(get=GetHoldoffTimeUsed,put=PutHoldoffTimeUsed))
    VARIANT_BOOL HoldoffTimeUsed;
    __declspec(property(get=GetHoldoffTime,put=PutHoldoffTime))
    float HoldoffTime;
    __declspec(property(get=GetPostTimeExtensionUsed,put=PutPostTimeExtensionUsed))
    VARIANT_BOOL PostTimeExtensionUsed;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetPreTimeUsed ( );
    void PutPreTimeUsed (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetPostTimeUsed ( );
    void PutPostTimeUsed (
        VARIANT_BOOL Value );
    float GetPreTime ( );
    void PutPreTime (
        float Value );
    float GetPostTime ( );
    void PutPostTime (
        float Value );
    ITrigPtr GetStartTrig ( );
    ITrigPtr GetStopTrig ( );
    VARIANT_BOOL GetHoldoffTimeUsed ( );
    void PutHoldoffTimeUsed (
        VARIANT_BOOL Value );
    float GetHoldoffTime ( );
    void PutHoldoffTime (
        float Value );
    VARIANT_BOOL GetPostTimeExtensionUsed ( );
    void PutPostTimeExtensionUsed (
        VARIANT_BOOL Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_PreTimeUsed (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_PreTimeUsed (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_PostTimeUsed (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_PostTimeUsed (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_PreTime (
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall put_PreTime (
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall get_PostTime (
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall put_PostTime (
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall get_StartTrig (
        /*[out,retval]*/ struct ITrig * * Value ) = 0;
      virtual HRESULT __stdcall get_StopTrig (
        /*[out,retval]*/ struct ITrig * * Value ) = 0;
      virtual HRESULT __stdcall get_HoldoffTimeUsed (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_HoldoffTimeUsed (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_HoldoffTime (
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall put_HoldoffTime (
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall get_PostTimeExtensionUsed (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_PostTimeExtensionUsed (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
};

struct __declspec(uuid("a4d0a424-ae57-4d56-945e-3b8d1369ddec"))
IAlarmCond : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTrigger))
    ITrigPtr Trigger;
    __declspec(property(get=GetStopTrigger))
    ITrigPtr StopTrigger;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetStopOption,put=PutStopOption))
    long StopOption;
    __declspec(property(get=GetStopTime,put=PutStopTime))
    float StopTime;
    __declspec(property(get=GetAvail))
    VARIANT_BOOL Avail;
    __declspec(property(get=GetStatus))
    VARIANT_BOOL Status;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetCustomName,put=PutCustomName))
    _bstr_t CustomName;

    //
    // Wrapper methods for error-handling
    //

    ITrigPtr GetTrigger ( );
    ITrigPtr GetStopTrigger ( );
    long GetIndex ( );
    long GetStopOption ( );
    void PutStopOption (
        long Value );
    float GetStopTime ( );
    void PutStopTime (
        float Value );
    VARIANT_BOOL GetAvail ( );
    VARIANT_BOOL GetStatus ( );
    HRESULT EndAlarm ( );
    _bstr_t GetName ( );
    _bstr_t GetCustomName ( );
    void PutCustomName (
        _bstr_t Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Trigger (
        /*[out,retval]*/ struct ITrig * * Value ) = 0;
      virtual HRESULT __stdcall get_StopTrigger (
        /*[out,retval]*/ struct ITrig * * Value ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_StopOption (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_StopOption (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_StopTime (
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall put_StopTime (
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall get_Avail (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall get_Status (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall raw_EndAlarm ( ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall get_CustomName (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_CustomName (
        /*[in]*/ BSTR Value ) = 0;
};

struct __declspec(uuid("f785eaad-9fbf-40a2-8532-3ac46dc8ce28"))
IAlarms : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetActiveCount))
    long ActiveCount;
    __declspec(property(get=GetItem))
    IAlarmCondPtr Item[];
    __declspec(property(get=GetActiveItem))
    IAlarmCondPtr ActiveItem[];

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    long GetActiveCount ( );
    IAlarmCondPtr GetItem (
        long I );
    IAlarmCondPtr GetActiveItem (
        long I );
    IAlarmCondPtr Add ( );
    HRESULT Remove (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_ActiveCount (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long I,
        /*[out,retval]*/ struct IAlarmCond * * Value ) = 0;
      virtual HRESULT __stdcall get_ActiveItem (
        /*[in]*/ long I,
        /*[out,retval]*/ struct IAlarmCond * * Value ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IAlarmCond * * Value ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ long Index ) = 0;
};

struct __declspec(uuid("5d479bea-0369-46dc-8668-ebecc83e0b9f"))
IUserInterface : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT ShowTrigCondSetup (
        struct ITriggerCondition * Cond );
    HRESULT ChangeSetupScreen (
        _bstr_t ScreenName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_ShowTrigCondSetup (
        /*[in]*/ struct ITriggerCondition * Cond ) = 0;
      virtual HRESULT __stdcall raw_ChangeSetupScreen (
        /*[in]*/ BSTR ScreenName ) = 0;
};

struct __declspec(uuid("5db01f14-c1ec-4b60-a258-5945b09eb818"))
IMathItem : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetInputChannels))
    IChannelListPtr InputChannels;
    __declspec(property(get=GetOutputChannels))
    IChannelListPtr OutputChannels;
    __declspec(property(get=GetLastStep))
    VARIANT_BOOL LastStep;

    //
    // Wrapper methods for error-handling
    //

    IChannelListPtr GetInputChannels ( );
    IChannelListPtr GetOutputChannels ( );
    VARIANT_BOOL GetLastStep ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_InputChannels (
        /*[out,retval]*/ struct IChannelList * * Value ) = 0;
      virtual HRESULT __stdcall get_OutputChannels (
        /*[out,retval]*/ struct IChannelList * * Value ) = 0;
      virtual HRESULT __stdcall get_LastStep (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
};

struct __declspec(uuid("9d693130-279e-443a-b4ca-6c2ada913724"))
IChannelListEx : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetItem))
    IChannelPtr Item[];

    //
    // Wrapper methods for error-handling
    //

    HRESULT AddCh (
        struct IChannel * Ch );
    HRESULT Clear ( );
    HRESULT SetCh (
        long Index,
        struct IChannel * Ch );
    long GetCount ( );
    IChannelPtr GetItem (
        long Index );
    HRESULT DeleteCh (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AddCh (
        /*[in]*/ struct IChannel * Ch ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall raw_SetCh (
        /*[in]*/ long Index,
        /*[in]*/ struct IChannel * Ch ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IChannel * * Value ) = 0;
      virtual HRESULT __stdcall raw_DeleteCh (
        /*[in]*/ long Index ) = 0;
};

struct __declspec(uuid("9ea5ff19-04b2-4138-81db-88ecdab95f21"))
IImportGroup : IChannelGroup
{
    //
    // Wrapper methods for error-handling
    //

    IChannelPtr MountChannel ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_MountChannel (
        /*[out,retval]*/ struct IChannel * * Value ) = 0;
};

struct __declspec(uuid("89dc7c60-9fce-48d3-a70a-eb035cfc3a44"))
ICNTGroup : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IChannelPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    IChannelPtr GetItem (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Value ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IChannel * * Value ) = 0;
};

struct __declspec(uuid("1bffb38d-377e-4e0a-a697-0e3d25aa768d"))
ICntChannel : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCntAuxInv))
    VARIANT_BOOL CntAuxInv;
    __declspec(property(get=GetCanAutoCalculate))
    VARIANT_BOOL CanAutoCalculate;
    __declspec(property(get=GetCntEncoderMode))
    long CntEncoderMode;
    __declspec(property(get=GetCntEncoderZero))
    VARIANT_BOOL CntEncoderZero;
    __declspec(property(get=GetCntSignalZero))
    VARIANT_BOOL CntSignalZero;
    __declspec(property(get=GetTrigLevelsCombined))
    VARIANT_BOOL TrigLevelsCombined;
    __declspec(property(get=GetSetupShown))
    VARIANT_BOOL SetupShown;
    __declspec(property(get=GetCntMode))
    long CntMode;
    __declspec(property(get=GetCntFilter))
    long CntFilter;
    __declspec(property(get=GetBaseMode))
    long BaseMode;
    __declspec(property(get=GetCardChannel0))
    IChannelPtr CardChannel0;
    __declspec(property(get=GetCardChannel1))
    IChannelPtr CardChannel1;
    __declspec(property(get=GetCntPair))
    ICntChannelPtr CntPair;
    __declspec(property(get=GetCntUpDownMode))
    long CntUpDownMode;
    __declspec(property(get=GetCntNewValueUpdateMode))
    long CntNewValueUpdateMode;
    __declspec(property(get=GetTrigLevels))
    IDigitalTrigLevelPtr TrigLevels[];
    __declspec(property(get=GetCntSource))
    long CntSource;
    __declspec(property(get=GetCntSourceInv))
    VARIANT_BOOL CntSourceInv;
    __declspec(property(get=GetDIChannels))
    IChannelPtr DIChannels[];
    __declspec(property(get=GetCntResetOnStartMeasure))
    VARIANT_BOOL CntResetOnStartMeasure;
    __declspec(property(get=GetAdvCntMode))
    VARIANT_BOOL AdvCntMode;
    __declspec(property(get=GetCntEventWithZero))
    VARIANT_BOOL CntEventWithZero;
    __declspec(property(get=GetCntDoManualReset))
    VARIANT_BOOL CntDoManualReset;
    __declspec(property(get=GetCntGate))
    long CntGate;
    __declspec(property(get=GetCntGateInv))
    VARIANT_BOOL CntGateInv;
    __declspec(property(get=GetCntAux))
    long CntAux;

    //
    // Wrapper methods for error-handling
    //

    long GetCntMode ( );
    long GetCntFilter ( );
    long GetBaseMode ( );
    IChannelPtr GetCardChannel0 ( );
    IChannelPtr GetCardChannel1 ( );
    ICntChannelPtr GetCntPair ( );
    long GetCntUpDownMode ( );
    long GetCntNewValueUpdateMode ( );
    IDigitalTrigLevelPtr GetTrigLevels (
        long Index );
    long GetCntSource ( );
    VARIANT_BOOL GetCntSourceInv ( );
    IChannelPtr GetDIChannels (
        long Index );
    VARIANT_BOOL GetCntResetOnStartMeasure ( );
    VARIANT_BOOL GetAdvCntMode ( );
    VARIANT_BOOL GetCntEventWithZero ( );
    VARIANT_BOOL GetCntDoManualReset ( );
    long GetCntGate ( );
    VARIANT_BOOL GetCntGateInv ( );
    long GetCntAux ( );
    VARIANT_BOOL GetCntAuxInv ( );
    VARIANT_BOOL GetCanAutoCalculate ( );
    long GetCntEncoderMode ( );
    VARIANT_BOOL GetCntEncoderZero ( );
    VARIANT_BOOL GetCntSignalZero ( );
    VARIANT_BOOL GetTrigLevelsCombined ( );
    VARIANT_BOOL GetSetupShown ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CntMode (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_CntFilter (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_BaseMode (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_CardChannel0 (
        /*[out,retval]*/ struct IChannel * * Value ) = 0;
      virtual HRESULT __stdcall get_CardChannel1 (
        /*[out,retval]*/ struct IChannel * * Value ) = 0;
      virtual HRESULT __stdcall get_CntPair (
        /*[out,retval]*/ struct ICntChannel * * Value ) = 0;
      virtual HRESULT __stdcall get_CntUpDownMode (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_CntNewValueUpdateMode (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_TrigLevels (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IDigitalTrigLevel * * Value ) = 0;
      virtual HRESULT __stdcall get_CntSource (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_CntSourceInv (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall get_DIChannels (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IChannel * * Value ) = 0;
      virtual HRESULT __stdcall get_CntResetOnStartMeasure (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall get_AdvCntMode (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall get_CntEventWithZero (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall get_CntDoManualReset (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall get_CntGate (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_CntGateInv (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall get_CntAux (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_CntAuxInv (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall get_CanAutoCalculate (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall get_CntEncoderMode (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_CntEncoderZero (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall get_CntSignalZero (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall get_TrigLevelsCombined (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall get_SetupShown (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
};

struct __declspec(uuid("df31d5d6-d4c4-47b6-84ec-73b748b67c22"))
ITrigInfo : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetChannel))
    IChannelPtr Channel;
    __declspec(property(get=GetMode))
    long Mode;
    __declspec(property(get=GetDirection))
    long Direction;
    __declspec(property(get=GetLevel1))
    double Level1;
    __declspec(property(get=GetLevel2))
    double Level2;
    __declspec(property(get=GetTrigValue))
    long TrigValue;
    __declspec(property(get=GetDeltaTime))
    double DeltaTime;
    __declspec(property(get=GetDirection1))
    long Direction1;
    __declspec(property(get=GetManual))
    VARIANT_BOOL Manual;

    //
    // Wrapper methods for error-handling
    //

    IChannelPtr GetChannel ( );
    long GetMode ( );
    long GetDirection ( );
    double GetLevel1 ( );
    double GetLevel2 ( );
    long GetTrigValue ( );
    double GetDeltaTime ( );
    long GetDirection1 ( );
    VARIANT_BOOL GetManual ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Channel (
        /*[out,retval]*/ struct IChannel * * Value ) = 0;
      virtual HRESULT __stdcall get_Mode (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_Level1 (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall get_Level2 (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall get_TrigValue (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_DeltaTime (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall get_Direction1 (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_Manual (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
};

struct __declspec(uuid("4d89cff3-0bfa-4ce1-a17f-e449b5cda72e"))
IEvent : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType_))
    long Type_;
    __declspec(property(get=GetPosMid))
    long PosMid;
    __declspec(property(get=GetData))
    _variant_t Data;
    __declspec(property(get=GetPosDir))
    long PosDir;
    __declspec(property(get=GetTimeStamp))
    double TimeStamp;
    __declspec(property(get=GetTrigInfo))
    ITrigInfoPtr TrigInfo;

    //
    // Wrapper methods for error-handling
    //

    long GetType_ ( );
    _variant_t GetData ( );
    long GetPosMid ( );
    long GetPosDir ( );
    double GetTimeStamp ( );
    ITrigInfoPtr GetTrigInfo ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type_ (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_Data (
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall get_PosMid (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_PosDir (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_TimeStamp (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall get_TrigInfo (
        /*[out,retval]*/ struct ITrigInfo * * Value ) = 0;
};

struct __declspec(uuid("c30bc69b-93bd-44c2-af67-95c12865f8a1"))
IEventList : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IEventPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    IEventPtr GetItem (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Value ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IEvent * * Value ) = 0;
};

struct __declspec(uuid("e224aecc-b2f3-42ee-a7c1-4650d1a5d740"))
IDisplayFrameTemplate : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetGroupName,put=PutGroupName))
    _bstr_t GroupName;
    __declspec(property(get=GetTemplateName,put=PutTemplateName))
    _bstr_t TemplateName;
    __declspec(property(get=GetSetupDOMDoc))
    _variant_t SetupDOMDoc;
    __declspec(property(get=GetDoUpdateFromXML,put=PutDoUpdateFromXML))
    VARIANT_BOOL DoUpdateFromXML;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetGroupName ( );
    void PutGroupName (
        _bstr_t Value );
    _bstr_t GetTemplateName ( );
    void PutTemplateName (
        _bstr_t Value );
    _variant_t GetSetupDOMDoc ( );
    _variant_t CreateCustomGroupAndControl (
        _bstr_t CustomVCGuid,
        _bstr_t GroupName,
        _bstr_t ControlName,
        long GroupInd,
        float Left,
        float Width,
        float Top,
        float Height );
    _variant_t CreateGroupAndControl (
        _bstr_t GroupName,
        _bstr_t ControlName,
        long GroupInd,
        float Left,
        float Width,
        float Top,
        float Height );
    HRESULT AddChannel (
        const _variant_t & GraphNode,
        long Ind,
        struct IChannel * Ch );
    HRESULT AddItemChannel (
        const _variant_t & GraphNode,
        long Ind,
        struct IChannel * Ch,
        long ItemInd );
    VARIANT_BOOL GetDoUpdateFromXML ( );
    void PutDoUpdateFromXML (
        VARIANT_BOOL Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_GroupName (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_GroupName (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_TemplateName (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_TemplateName (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_SetupDOMDoc (
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall raw_CreateCustomGroupAndControl (
        /*[in]*/ BSTR CustomVCGuid,
        /*[in]*/ BSTR GroupName,
        /*[in]*/ BSTR ControlName,
        /*[in]*/ long GroupInd,
        /*[in]*/ float Left,
        /*[in]*/ float Width,
        /*[in]*/ float Top,
        /*[in]*/ float Height,
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall raw_CreateGroupAndControl (
        /*[in]*/ BSTR GroupName,
        /*[in]*/ BSTR ControlName,
        /*[in]*/ long GroupInd,
        /*[in]*/ float Left,
        /*[in]*/ float Width,
        /*[in]*/ float Top,
        /*[in]*/ float Height,
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall raw_AddChannel (
        /*[in]*/ VARIANT GraphNode,
        /*[in]*/ long Ind,
        /*[in]*/ struct IChannel * Ch ) = 0;
      virtual HRESULT __stdcall raw_AddItemChannel (
        /*[in]*/ VARIANT GraphNode,
        /*[in]*/ long Ind,
        /*[in]*/ struct IChannel * Ch,
        /*[in]*/ long ItemInd ) = 0;
      virtual HRESULT __stdcall get_DoUpdateFromXML (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_DoUpdateFromXML (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
};

struct __declspec(uuid("2af787a0-cf72-41a2-a0c9-d8dc56676387"))
IDisplayFrameTemplates : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IDisplayFrameTemplatePtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    IDisplayFrameTemplatePtr GetItem (
        long Index );
    IDisplayFrameTemplatePtr Add ( );
    HRESULT Clear ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Value ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IDisplayFrameTemplate * * Value ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IDisplayFrameTemplate * * Value ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
};

struct __declspec(uuid("96a73a79-b803-4331-9204-b28708f0811b"))
IDisplayTemplate : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDisplayFrameTemplates))
    IDisplayFrameTemplatesPtr DisplayFrameTemplates;
    __declspec(property(get=GetDW))
    long DW;
    __declspec(property(get=GetDH))
    long DH;

    //
    // Wrapper methods for error-handling
    //

    IDisplayFrameTemplatesPtr GetDisplayFrameTemplates ( );
    long GetDW ( );
    long GetDH ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DisplayFrameTemplates (
        /*[out,retval]*/ struct IDisplayFrameTemplates * * Value ) = 0;
      virtual HRESULT __stdcall get_DW (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_DH (
        /*[out,retval]*/ long * Value ) = 0;
};

struct __declspec(uuid("b657e514-6aa4-4b43-af88-d5d4c8b6251c"))
IIndexChanger : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT ChangePluginChIndex (
        _bstr_t Guid,
        const _variant_t & OldIndex,
        const _variant_t & NewIndex );
    HRESULT ChangePluginChIndex1 (
        _bstr_t Guid,
        struct IChannel * Ch,
        const _variant_t & NewIndex );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_ChangePluginChIndex (
        /*[in]*/ BSTR Guid,
        /*[in]*/ VARIANT OldIndex,
        /*[in]*/ VARIANT NewIndex ) = 0;
      virtual HRESULT __stdcall raw_ChangePluginChIndex1 (
        /*[in]*/ BSTR Guid,
        /*[in]*/ struct IChannel * Ch,
        /*[in]*/ VARIANT NewIndex ) = 0;
};

struct __declspec(uuid("0850b5b8-80c8-41a5-a34d-04adfe00a000"))
IAxisViewInfo : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAxisViewType,put=PutAxisViewType))
    long AxisViewType;
    __declspec(property(get=GetReverseAxis,put=PutReverseAxis))
    VARIANT_BOOL ReverseAxis;
    __declspec(property(get=GetCursorChannel,put=PutCursorChannel))
    IChannelPtr CursorChannel;

    //
    // Wrapper methods for error-handling
    //

    long GetAxisViewType ( );
    void PutAxisViewType (
        long Value );
    VARIANT_BOOL GetReverseAxis ( );
    void PutReverseAxis (
        VARIANT_BOOL Value );
    IChannelPtr GetCursorChannel ( );
    void PutCursorChannel (
        struct IChannel * Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AxisViewType (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_AxisViewType (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_ReverseAxis (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_ReverseAxis (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_CursorChannel (
        /*[out,retval]*/ struct IChannel * * Value ) = 0;
      virtual HRESULT __stdcall put_CursorChannel (
        /*[in]*/ struct IChannel * Value ) = 0;
};

struct __declspec(uuid("7a49908d-487a-4f85-96f2-d53b745e91cf"))
IAxisDef : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAxisType,put=PutAxisType))
    enum TAxisType AxisType;
    __declspec(property(get=GetStartValue,put=PutStartValue))
    double StartValue;
    __declspec(property(get=GetStepValue,put=PutStepValue))
    double StepValue;
    __declspec(property(get=GetFloatValues,put=PutFloatValues))
    double FloatValues[];
    __declspec(property(get=GetStringValues,put=PutStringValues))
    _bstr_t StringValues[];
    __declspec(property(get=GetSize))
    long Size;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=Get_Unit,put=Put_Unit))
    _bstr_t _Unit;
    __declspec(property(get=GetPrecision,put=PutPrecision))
    long Precision;
    __declspec(property(get=GetCursorChannel,put=PutCursorChannel))
    IChannelPtr CursorChannel;
    __declspec(property(get=GetAxisViewInfo))
    IAxisViewInfoPtr AxisViewInfo;

    //
    // Wrapper methods for error-handling
    //

    enum TAxisType GetAxisType ( );
    void PutAxisType (
        enum TAxisType Value );
    double GetStartValue ( );
    void PutStartValue (
        double Value );
    double GetStepValue ( );
    void PutStepValue (
        double Value );
    double GetFloatValues (
        long Index );
    void PutFloatValues (
        long Index,
        double Value );
    _bstr_t GetStringValues (
        long Index );
    void PutStringValues (
        long Index,
        _bstr_t Value );
    long GetSize ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t Value );
    _bstr_t Get_Unit ( );
    void Put_Unit (
        _bstr_t Value );
    long GetPrecision ( );
    void PutPrecision (
        long Value );
    IChannelPtr GetCursorChannel ( );
    void PutCursorChannel (
        struct IChannel * Value );
    IAxisViewInfoPtr GetAxisViewInfo ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AxisType (
        /*[out,retval]*/ enum TAxisType * Value ) = 0;
      virtual HRESULT __stdcall put_AxisType (
        /*[in]*/ enum TAxisType Value ) = 0;
      virtual HRESULT __stdcall get_StartValue (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_StartValue (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_StepValue (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_StepValue (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_FloatValues (
        /*[in]*/ long Index,
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_FloatValues (
        /*[in]*/ long Index,
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_StringValues (
        /*[in]*/ long Index,
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_StringValues (
        /*[in]*/ long Index,
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_Size (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get__Unit (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put__Unit (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_Precision (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Precision (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_CursorChannel (
        /*[out,retval]*/ struct IChannel * * Value ) = 0;
      virtual HRESULT __stdcall put_CursorChannel (
        /*[in]*/ struct IChannel * Value ) = 0;
      virtual HRESULT __stdcall get_AxisViewInfo (
        /*[out,retval]*/ struct IAxisViewInfo * * Value ) = 0;
};

struct __declspec(uuid("0db0148a-639a-4adc-b781-213b14f1f9ef"))
IArrayInfo : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAxisDef))
    IAxisDefPtr AxisDef[];
    __declspec(property(get=GetDimCount,put=PutDimCount))
    long DimCount;
    __declspec(property(get=GetDimSizes,put=PutDimSizes))
    long DimSizes[];
    __declspec(property(get=GetItemChannels,put=PutItemChannels))
    VARIANT_BOOL ItemChannels;
    __declspec(property(get=GetNameArr,put=PutNameArr))
    _bstr_t NameArr[];
    __declspec(property(get=GetColorArr,put=PutColorArr))
    long ColorArr[];
    __declspec(property(get=GetSyncSource))
    ISyncSourcePtr SyncSource;

    //
    // Wrapper methods for error-handling
    //

    IAxisDefPtr GetAxisDef (
        long Index );
    long GetDimCount ( );
    void PutDimCount (
        long Value );
    long GetDimSizes (
        long Index );
    void PutDimSizes (
        long Index,
        long Value );
    HRESULT Init ( );
    VARIANT_BOOL GetItemChannels ( );
    _bstr_t GetNameArr (
        long Ind );
    void PutNameArr (
        long Ind,
        _bstr_t Value );
    long GetColorArr (
        long Ind );
    void PutColorArr (
        long Ind,
        long Value );
    ISyncSourcePtr GetSyncSource ( );
    void PutItemChannels (
        VARIANT_BOOL Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AxisDef (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAxisDef * * Value ) = 0;
      virtual HRESULT __stdcall get_DimCount (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_DimCount (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_DimSizes (
        /*[in]*/ long Index,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_DimSizes (
        /*[in]*/ long Index,
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_Init ( ) = 0;
      virtual HRESULT __stdcall get_ItemChannels (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall get_NameArr (
        /*[in]*/ long Ind,
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_NameArr (
        /*[in]*/ long Ind,
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_ColorArr (
        /*[in]*/ long Ind,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_ColorArr (
        /*[in]*/ long Ind,
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_SyncSource (
        /*[out,retval]*/ struct ISyncSource * * Value ) = 0;
      virtual HRESULT __stdcall put_ItemChannels (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
};

struct __declspec(uuid("e499821c-932c-4f1a-9ac4-0a140abc99a1"))
IMarkerOutput : IMarkerObject
{
    //
    // Property data
    //

    __declspec(property(get=GetChannel,put=PutChannel))
    IChannelPtr Channel;

    //
    // Wrapper methods for error-handling
    //

    IChannelPtr GetChannel ( );
    void PutChannel (
        struct IChannel * Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Channel (
        /*[out,retval]*/ struct IChannel * * Value ) = 0;
      virtual HRESULT __stdcall put_Channel (
        /*[in]*/ struct IChannel * Value ) = 0;
};

struct __declspec(uuid("f5d0f0f2-88d6-463c-89b4-0a2eedac822c"))
IMarkerOwner : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetChannelType,put=PutChannelType))
    enum IMarkerChannelType ChannelType;
    __declspec(property(get=GetOwner,put=PutOwner))
    IChannelPtr Owner;

    //
    // Wrapper methods for error-handling
    //

    enum IMarkerChannelType GetChannelType ( );
    void PutChannelType (
        enum IMarkerChannelType Value );
    IChannelPtr GetOwner ( );
    void PutOwner (
        struct IChannel * Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ChannelType (
        /*[out,retval]*/ enum IMarkerChannelType * Value ) = 0;
      virtual HRESULT __stdcall put_ChannelType (
        /*[in]*/ enum IMarkerChannelType Value ) = 0;
      virtual HRESULT __stdcall get_Owner (
        /*[out,retval]*/ struct IChannel * * Value ) = 0;
      virtual HRESULT __stdcall put_Owner (
        /*[in]*/ struct IChannel * Value ) = 0;
};

struct __declspec(uuid("52b00a03-89c4-499f-b8c4-29b6edead12a"))
IProcessingMarker : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetGroupVisible,put=PutGroupVisible))
    VARIANT_BOOL GroupVisible[];
    __declspec(property(get=GetGroupMarkerInputs))
    IMarkerObjectsListPtr GroupMarkerInputs[];
    __declspec(property(get=GetGroupMarkerOutputs))
    IMarkerObjectsListPtr GroupMarkerOutputs[];
    __declspec(property(get=GetGroupAlwaysDrawInputs,put=PutGroupAlwaysDrawInputs))
    VARIANT_BOOL GroupAlwaysDrawInputs[];
    __declspec(property(get=GetGroupWaitForMouseInput,put=PutGroupWaitForMouseInput))
    VARIANT_BOOL GroupWaitForMouseInput[];
    __declspec(property(get=GetGroupHasOwnColor,put=PutGroupHasOwnColor))
    VARIANT_BOOL GroupHasOwnColor[];
    __declspec(property(get=GetMarkerOwner,put=PutMarkerOwner))
    IMarkerOwnerPtr MarkerOwner;
    __declspec(property(get=GetInputCount,put=PutInputCount))
    long InputCount;
    __declspec(property(get=GetOutputCount,put=PutOutputCount))
    long OutputCount;
    __declspec(property(get=GetMarkerObjects))
    IMarkerObjectsListPtr MarkerObjects;
    __declspec(property(get=GetMarkerOutputs))
    IMarkerObjectsListPtr MarkerOutputs;
    __declspec(property(get=GetMarkerInputs))
    IMarkerObjectsListPtr MarkerInputs;
    __declspec(property(get=GetGroupColor,put=PutGroupColor))
    long GroupColor[];

    //
    // Wrapper methods for error-handling
    //

    IMarkerOwnerPtr GetMarkerOwner ( );
    void PutMarkerOwner (
        struct IMarkerOwner * Value );
    long GetInputCount ( );
    void PutInputCount (
        long Value );
    long GetOutputCount ( );
    void PutOutputCount (
        long Value );
    IMarkerInputPtr GetMarkerInput (
        long Index );
    IMarkerOutputPtr GetMarkerOutput (
        long Index );
    HRESULT SetMarkerInput (
        long Index,
        struct IMarkerInput * Value );
    HRESULT SetMarkerOutput (
        long Index,
        struct IMarkerOutput * Value );
    IMarkerObjectsListPtr GetMarkerObjects ( );
    HRESULT ConnectInput (
        long Index,
        enum IMarkerValueType Value );
    HRESULT ConnectOutput (
        long Index,
        enum IMarkerValueType Value );
    IMarkerObjectsListPtr GetMarkerOutputs ( );
    IMarkerObjectsListPtr GetMarkerInputs ( );
    HRESULT DisconnectInputs ( );
    HRESULT DisconnectOutputs ( );
    IMarkerObjectPtr ConnectInputEx (
        enum IMarkerValueType Value );
    IMarkerObjectPtr ConnectOutputEx (
        enum IMarkerValueType Value );
    HRESULT CreateGroup ( );
    VARIANT_BOOL HasStyle (
        long Index,
        long Style );
    HRESULT ClearGroups ( );
    HRESULT AddGroupStyle (
        long Index,
        long Style );
    long GetGroupColor (
        long Index );
    void PutGroupColor (
        long Index,
        long Value );
    VARIANT_BOOL GetGroupVisible (
        long Index );
    void PutGroupVisible (
        long Index,
        VARIANT_BOOL Value );
    HRESULT AddGroupMarkerInput (
        long Index,
        struct IMarkerInput * Value );
    HRESULT AddGroupMarkerOutput (
        long Index,
        struct IMarkerOutput * Value );
    IMarkerObjectsListPtr GetGroupMarkerInputs (
        long Index );
    IMarkerObjectsListPtr GetGroupMarkerOutputs (
        long Index );
    VARIANT_BOOL GetGroupAlwaysDrawInputs (
        long Index );
    void PutGroupAlwaysDrawInputs (
        long Index,
        VARIANT_BOOL Value );
    VARIANT_BOOL GetGroupWaitForMouseInput (
        long Index );
    void PutGroupWaitForMouseInput (
        long Index,
        VARIANT_BOOL Value );
    VARIANT_BOOL GetGroupHasOwnColor (
        long Index );
    void PutGroupHasOwnColor (
        long Index,
        VARIANT_BOOL Value );
    HRESULT SetMarkerProps (
        const _variant_t & Value );
    HRESULT AddGroupName (
        long Index,
        _bstr_t Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MarkerOwner (
        /*[out,retval]*/ struct IMarkerOwner * * Value ) = 0;
      virtual HRESULT __stdcall put_MarkerOwner (
        /*[in]*/ struct IMarkerOwner * Value ) = 0;
      virtual HRESULT __stdcall get_InputCount (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_InputCount (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_OutputCount (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_OutputCount (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_GetMarkerInput (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IMarkerInput * * Value ) = 0;
      virtual HRESULT __stdcall raw_GetMarkerOutput (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IMarkerOutput * * Value ) = 0;
      virtual HRESULT __stdcall raw_SetMarkerInput (
        /*[in]*/ long Index,
        /*[in]*/ struct IMarkerInput * Value ) = 0;
      virtual HRESULT __stdcall raw_SetMarkerOutput (
        /*[in]*/ long Index,
        /*[in]*/ struct IMarkerOutput * Value ) = 0;
      virtual HRESULT __stdcall get_MarkerObjects (
        /*[out,retval]*/ struct IMarkerObjectsList * * Value ) = 0;
      virtual HRESULT __stdcall raw_ConnectInput (
        /*[in]*/ long Index,
        /*[in]*/ enum IMarkerValueType Value ) = 0;
      virtual HRESULT __stdcall raw_ConnectOutput (
        /*[in]*/ long Index,
        /*[in]*/ enum IMarkerValueType Value ) = 0;
      virtual HRESULT __stdcall get_MarkerOutputs (
        /*[out,retval]*/ struct IMarkerObjectsList * * Value ) = 0;
      virtual HRESULT __stdcall get_MarkerInputs (
        /*[out,retval]*/ struct IMarkerObjectsList * * Value ) = 0;
      virtual HRESULT __stdcall raw_DisconnectInputs ( ) = 0;
      virtual HRESULT __stdcall raw_DisconnectOutputs ( ) = 0;
      virtual HRESULT __stdcall raw_ConnectInputEx (
        /*[in]*/ enum IMarkerValueType Value,
        /*[out,retval]*/ struct IMarkerObject * * Object ) = 0;
      virtual HRESULT __stdcall raw_ConnectOutputEx (
        /*[in]*/ enum IMarkerValueType Value,
        /*[out,retval]*/ struct IMarkerObject * * Object ) = 0;
      virtual HRESULT __stdcall raw_CreateGroup ( ) = 0;
      virtual HRESULT __stdcall raw_HasStyle (
        /*[in]*/ long Index,
        /*[in]*/ long Style,
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall raw_ClearGroups ( ) = 0;
      virtual HRESULT __stdcall raw_AddGroupStyle (
        /*[in]*/ long Index,
        /*[in]*/ long Style ) = 0;
      virtual HRESULT __stdcall get_GroupColor (
        /*[in]*/ long Index,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_GroupColor (
        /*[in]*/ long Index,
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_GroupVisible (
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_GroupVisible (
        /*[in]*/ long Index,
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall raw_AddGroupMarkerInput (
        /*[in]*/ long Index,
        /*[in]*/ struct IMarkerInput * Value ) = 0;
      virtual HRESULT __stdcall raw_AddGroupMarkerOutput (
        /*[in]*/ long Index,
        /*[in]*/ struct IMarkerOutput * Value ) = 0;
      virtual HRESULT __stdcall get_GroupMarkerInputs (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IMarkerObjectsList * * Value ) = 0;
      virtual HRESULT __stdcall get_GroupMarkerOutputs (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IMarkerObjectsList * * Value ) = 0;
      virtual HRESULT __stdcall get_GroupAlwaysDrawInputs (
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_GroupAlwaysDrawInputs (
        /*[in]*/ long Index,
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_GroupWaitForMouseInput (
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_GroupWaitForMouseInput (
        /*[in]*/ long Index,
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_GroupHasOwnColor (
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_GroupHasOwnColor (
        /*[in]*/ long Index,
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall raw_SetMarkerProps (
        /*[in]*/ VARIANT Value ) = 0;
      virtual HRESULT __stdcall raw_AddGroupName (
        /*[in]*/ long Index,
        /*[in]*/ BSTR Value ) = 0;
};

struct __declspec(uuid("cb6a91bb-c4f8-46a3-be89-e0d4facffdd3"))
IProcessingMarkerList : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetItems,put=PutItems))
    IProcessingMarkerPtr Items[];

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IProcessingMarkerPtr GetItems (
        long Index );
    void PutItems (
        long Index,
        struct IProcessingMarker * Value );
    HRESULT Add (
        struct IProcessingMarker * Value );
    long Remove (
        struct IProcessingMarker * Value );
    HRESULT Insert (
        long Index,
        struct IProcessingMarker * Value );
    HRESULT Delete (
        long Index );
    HRESULT Clear ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_Items (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IProcessingMarker * * Value ) = 0;
      virtual HRESULT __stdcall put_Items (
        /*[in]*/ long Index,
        /*[in]*/ struct IProcessingMarker * Value ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ struct IProcessingMarker * Value ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ struct IProcessingMarker * Value,
        /*[out,retval]*/ long * Index ) = 0;
      virtual HRESULT __stdcall raw_Insert (
        /*[in]*/ long Index,
        /*[in]*/ struct IProcessingMarker * Value ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
};

struct __declspec(uuid("d590c57b-41c9-40fa-9d27-9f82ebfc75cd"))
IInputCh : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCh,put=PutCh))
    IChannelPtr Ch;
    __declspec(property(get=GetInd,put=PutInd))
    long Ind;

    //
    // Wrapper methods for error-handling
    //

    IChannelPtr GetCh ( );
    void PutCh (
        struct IChannel * Value );
    long GetInd ( );
    void PutInd (
        long Value );
    long GetBufInd ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Ch (
        /*[out,retval]*/ struct IChannel * * Value ) = 0;
      virtual HRESULT __stdcall put_Ch (
        /*[in]*/ struct IChannel * Value ) = 0;
      virtual HRESULT __stdcall get_Ind (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Ind (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_GetBufInd (
        /*[out,retval]*/ long * Value ) = 0;
};

struct __declspec(uuid("8a172d7b-a444-46fd-817a-f61a8ffc480e"))
ICppResamplerEngine : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSamplingRate,put=PutSamplingRate))
    long SamplingRate;
    __declspec(property(get=GetBlockSizeInSamples,put=PutBlockSizeInSamples))
    long BlockSizeInSamples;
    __declspec(property(get=GetPastSamplesRequiredForCalculation,put=PutPastSamplesRequiredForCalculation))
    long PastSamplesRequiredForCalculation;
    __declspec(property(get=GetFutureSamplesRequiredForCalculation,put=PutFutureSamplesRequiredForCalculation))
    long FutureSamplesRequiredForCalculation;
    __declspec(property(get=GetResamplerBase,put=PutResamplerBase))
    long ResamplerBase;
    __declspec(property(get=GetResamplerBlockType,put=PutResamplerBlockType))
    long ResamplerBlockType;
    __declspec(property(get=GetIsOldMode,put=PutIsOldMode))
    VARIANT_BOOL IsOldMode;

    //
    // Wrapper methods for error-handling
    //

    long GetSamplingRate ( );
    void PutSamplingRate (
        long Value );
    long GetBlockSizeInSamples ( );
    void PutBlockSizeInSamples (
        long Value );
    long GetPastSamplesRequiredForCalculation ( );
    void PutPastSamplesRequiredForCalculation (
        long Value );
    long GetFutureSamplesRequiredForCalculation ( );
    void PutFutureSamplesRequiredForCalculation (
        long Value );
    long GetResamplerBase ( );
    void PutResamplerBase (
        long Value );
    long GetResamplerBlockType ( );
    void PutResamplerBlockType (
        long Value );
    HRESULT SetMasterChannel (
        struct IChannel * Ch );
    VARIANT_BOOL GetIsOldMode ( );
    void PutIsOldMode (
        VARIANT_BOOL Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SamplingRate (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_SamplingRate (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_BlockSizeInSamples (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_BlockSizeInSamples (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_PastSamplesRequiredForCalculation (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_PastSamplesRequiredForCalculation (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_FutureSamplesRequiredForCalculation (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_FutureSamplesRequiredForCalculation (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_ResamplerBase (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_ResamplerBase (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_ResamplerBlockType (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_ResamplerBlockType (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetMasterChannel (
        /*[in]*/ struct IChannel * Ch ) = 0;
      virtual HRESULT __stdcall get_IsOldMode (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_IsOldMode (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
};

struct __declspec(uuid("82d0cab4-6b17-4810-ba3f-06c235e76366"))
IApp : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTiming))
    ITimingPtr Timing;
    __declspec(property(get=GetUserInterface))
    IUserInterfacePtr UserInterface;
    __declspec(property(get=GetAveragedFFT))
    IAveragedFFTPtr AveragedFFT;
    __declspec(property(get=GetMeasureSampleRateEx,put=PutMeasureSampleRateEx))
    double MeasureSampleRateEx;
    __declspec(property(get=GetPowerModules))
    IPowerModulesPtr PowerModules;
    __declspec(property(get=GetReducedRate,put=PutReducedRate))
    float ReducedRate;
    __declspec(property(get=GetSetupSampleRate,put=PutSetupSampleRate))
    long SetupSampleRate;
    __declspec(property(get=GetNETMode))
    long NETMode;
    __declspec(property(get=GetRemoteControlled))
    VARIANT_BOOL RemoteControlled;
    __declspec(property(get=GetIsAcqRunning))
    VARIANT_BOOL IsAcqRunning;
    __declspec(property(get=GetMath))
    IMathPtr Math;
    __declspec(property(get=GetMainWindowHandle))
    long MainWindowHandle;
    __declspec(property(get=GetAmplInterfaces))
    IAmplInterfacesPtr AmplInterfaces;
    __declspec(property(get=GetSuppressMessages,put=PutSuppressMessages))
    VARIANT_BOOL SuppressMessages;
    __declspec(property(get=GetOfflineCalc))
    IOfflineCalcPtr OfflineCalc;
    __declspec(property(get=GetConfigMode))
    VARIANT_BOOL ConfigMode;
    __declspec(property(get=GetShowInstrumentsInFullScreen,put=PutShowInstrumentsInFullScreen))
    VARIANT_BOOL ShowInstrumentsInFullScreen;
    __declspec(property(get=GetDisableKeyboardShortcuts,put=PutDisableKeyboardShortcuts))
    VARIANT_BOOL DisableKeyboardShortcuts;
    __declspec(property(get=GetProjectManager))
    IProjectManagerPtr ProjectManager;
    __declspec(property(get=GetVideo))
    IVideoPtr Video;
    __declspec(property(get=GetLockableCursors))
    ILockableCursorsPtr LockableCursors;
    __declspec(property(get=GetTimeFormat,put=PutTimeFormat))
    enum TimeFormat _TimeFormat;
    __declspec(property(get=GetSequencer))
    ISequencerPtr Sequencer;
    __declspec(property(get=GetDialogHandle,put=PutDialogHandle))
    unsigned int DialogHandle;
    __declspec(property(get=GetRemoteManager))
    IRemoteManagerPtr RemoteManager;
    __declspec(property(get=GetXMLHelper))
    IXMLHelperPtr XMLHelper;
    __declspec(property(get=GetAcqLoop))
    IAcqLoopPtr AcqLoop;
    __declspec(property(get=GetData))
    IDataPtr Data;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetRTCore))
    IRTCorePtr RTCore;
    __declspec(property(get=GetParent,put=PutParent))
    long Parent;
    __declspec(property(get=GetShowPropertyFrame,put=PutShowPropertyFrame))
    VARIANT_BOOL ShowPropertyFrame;
    __declspec(property(get=GetReport))
    IReportPtr Report;
    __declspec(property(get=GetShowStoreOptions,put=PutShowStoreOptions))
    VARIANT_BOOL ShowStoreOptions;
    __declspec(property(get=GetShowSROptions,put=PutShowSROptions))
    VARIANT_BOOL ShowSROptions;
    __declspec(property(get=GetAnalyseMenuIndex))
    long AnalyseMenuIndex;
    __declspec(property(get=GetRTC))
    IRTCPtr RTC;
    __declspec(property(get=GetMeasureMenuIndex))
    long MeasureMenuIndex;
    __declspec(property(get=GetIniFileDir,put=PutIniFileDir))
    _bstr_t IniFileDir;
    __declspec(property(get=GetLeft,put=PutLeft))
    long Left;
    __declspec(property(get=GetTop,put=PutTop))
    long Top;
    __declspec(property(get=GetWidth,put=PutWidth))
    long Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    long Height;
    __declspec(property(get=GetLoadEngine))
    ILoadEnginePtr LoadEngine;
    __declspec(property(get=GetShowStyle,put=PutShowStyle))
    long ShowStyle;
    __declspec(property(get=GetStayOnTop,put=PutStayOnTop))
    VARIANT_BOOL StayOnTop;
    __declspec(property(get=GetActiveScreen))
    long ActiveScreen;
    __declspec(property(get=GetUsedDatafile,put=PutUsedDatafile))
    _bstr_t UsedDatafile;
    __declspec(property(get=GetUsedSetupfile))
    _bstr_t UsedSetupfile;
    __declspec(property(get=GetLastKey))
    long LastKey;
    __declspec(property(get=GetScreens))
    IScreensPtr Screens;
    __declspec(property(get=GetEventList))
    IEventListPtr EventList;
    __declspec(property(get=GetActualRunMode))
    long ActualRunMode;
    __declspec(property(get=GetVersion))
    _bstr_t Version;
    __declspec(property(get=GetMasterClock))
    IMasterClockPtr MasterClock;
    __declspec(property(get=GetStoreEngine))
    IStoreEnginePtr StoreEngine;
    __declspec(property(get=GetMainDataDir))
    _bstr_t MainDataDir;
    __declspec(property(get=GetMeasureSampleRate,put=PutMeasureSampleRate))
    long MeasureSampleRate;
    __declspec(property(get=GetDataLost))
    VARIANT_BOOL DataLost;
    __declspec(property(get=GetTimerInterval,put=PutTimerInterval))
    long TimerInterval;
    __declspec(property(get=GetAISetupScreen))
    IAISetupScreenPtr AISetupScreen;
    __declspec(property(get=GetAlwaysEnableTrigger,put=PutAlwaysEnableTrigger))
    VARIANT_BOOL AlwaysEnableTrigger;
    __declspec(property(get=GetTrigger))
    ITriggerPtr Trigger;
    __declspec(property(get=GetDisableStoring,put=PutDisableStoring))
    VARIANT_BOOL DisableStoring;
    __declspec(property(get=GetAOGroup))
    IAOGroupPtr AOGroup;
    __declspec(property(get=GetCAN))
    ICANPtr CAN;
    __declspec(property(get=GetAcquiring))
    VARIANT_BOOL Acquiring;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetModules))
    IModulesPtr Modules;
    __declspec(property(get=GetRegType))
    long RegType;
    __declspec(property(get=GetAveragedCPB))
    IAveragedFFTPtr AveragedCPB;
    __declspec(property(get=GetAlarms))
    IAlarmsPtr Alarms;
    __declspec(property(get=GetDaqGroup))
    IDaqGroupPtr DaqGroup;
    __declspec(property(get=GetIsSetupMode))
    VARIANT_BOOL IsSetupMode;
    __declspec(property(get=GetFileNameSettings))
    IFileNameSettingsPtr FileNameSettings;
    __declspec(property(get=GetHasFRF))
    VARIANT_BOOL HasFRF;
    __declspec(property(get=GetDaq))
    IDaqPtr Daq;
    __declspec(property(get=GetGlobalHeader))
    IGlobalHeaderPtr GlobalHeader;
    __declspec(property(get=GetFixedExternalClock,put=PutFixedExternalClock))
    VARIANT_BOOL FixedExternalClock;

    //
    // Wrapper methods for error-handling
    //

    IDataPtr GetData ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL Value );
    HRESULT SetInstrument (
        long Id );
    HRESULT Stop ( );
    HRESULT Init ( );
    long GetParent ( );
    void PutParent (
        long Value );
    VARIANT_BOOL GetShowPropertyFrame ( );
    void PutShowPropertyFrame (
        VARIANT_BOOL Value );
    HRESULT SetupScreen ( );
    VARIANT_BOOL GetShowStoreOptions ( );
    void PutShowStoreOptions (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetShowSROptions ( );
    void PutShowSROptions (
        VARIANT_BOOL Value );
    HRESULT HardwareSetup (
        VARIANT_BOOL Plugins );
    HRESULT LoadSetup (
        _bstr_t FileName );
    HRESULT SaveSetup (
        _bstr_t FileName );
    _bstr_t GetIniFileDir ( );
    void PutIniFileDir (
        _bstr_t Value );
    long GetLeft ( );
    void PutLeft (
        long Value );
    long GetTop ( );
    void PutTop (
        long Value );
    long GetWidth ( );
    void PutWidth (
        long Value );
    long GetHeight ( );
    void PutHeight (
        long Value );
    HRESULT UpdateHardwareSetup ( );
    HRESULT Measure ( );
    HRESULT LoadFile (
        _bstr_t FileName );
    HRESULT StartStoring (
        _bstr_t FileName );
    ILoadEnginePtr GetLoadEngine ( );
    HRESULT ExportData (
        long ExportType,
        long TimeAxis,
        _bstr_t FileName );
    _bstr_t SendCommand (
        _bstr_t Cmd,
        long Timeout );
    HRESULT ManualStart ( );
    HRESULT ManualStop ( );
    long GetShowStyle ( );
    void PutShowStyle (
        long Value );
    VARIANT_BOOL GetStayOnTop ( );
    void PutStayOnTop (
        VARIANT_BOOL Value );
    HRESULT SetScreenIndex (
        long Index );
    long GetActiveScreen ( );
    HRESULT SendKey (
        unsigned long Key );
    _bstr_t GetUsedSetupfile ( );
    _bstr_t GetUsedDatafile ( );
    void PutUsedDatafile (
        _bstr_t Value );
    long GetLastKey ( );
    IScreensPtr GetScreens ( );
    IEventListPtr GetEventList ( );
    long GetActualRunMode ( );
    _bstr_t GetVersion ( );
    IMasterClockPtr GetMasterClock ( );
    IStoreEnginePtr GetStoreEngine ( );
    HRESULT GoToInstruments ( );
    HRESULT SetFullScreen (
        VARIANT_BOOL Full );
    _bstr_t GetMainDataDir ( );
    HRESULT MainWndMessage (
        long Msg,
        long WParam,
        VARIANT_BOOL Wait );
    HRESULT SetRemoteMode (
        VARIANT_BOOL Remote );
    HRESULT MenuClick (
        enum MenuItems Item );
    long GetMeasureSampleRate ( );
    void PutMeasureSampleRate (
        long Value );
    long SetScopeParams (
        double PreTime,
        double PostTime,
        struct IChannel * Channel,
        float Level );
    HRESULT NewSetup ( );
    HRESULT SetScopeUsed (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetDataLost ( );
    HRESULT SetHeaderData (
        _bstr_t Caption,
        _bstr_t Header );
    HRESULT PrintScreen (
        VARIANT_BOOL ShowDialog );
    long GetTimerInterval ( );
    void PutTimerInterval (
        long Value );
    HRESULT GetInterfaceVersion (
        long * Major,
        long * Minor,
        long * Revision );
    IAISetupScreenPtr GetAISetupScreen ( );
    VARIANT_BOOL GetAlwaysEnableTrigger ( );
    void PutAlwaysEnableTrigger (
        VARIANT_BOOL Value );
    ITriggerPtr GetTrigger ( );
    VARIANT_BOOL GetDisableStoring ( );
    void PutDisableStoring (
        VARIANT_BOOL Value );
    HRESULT WriteErrorMessage (
        _bstr_t ErrorMsg );
    HRESULT PauseStoring ( );
    HRESULT ResumeStoring ( );
    HRESULT LoadModuleSetup (
        _bstr_t FileName );
    HRESULT ChangeDaqType (
        long DaqType );
    HRESULT ChangeComPort (
        long ComPort );
    HRESULT LoadDBC (
        long PortNo,
        _bstr_t FileName );
    HRESULT ZeroAllAutoChannels (
        VARIANT_BOOL Zero );
    HRESULT ShowSensorEditor ( );
    IAOGroupPtr GetAOGroup ( );
    ICANPtr GetCAN ( );
    HRESULT InitScopeTrig (
        struct T_RecordPosition Start,
        struct T_RecordPosition Stop );
    VARIANT_BOOL CalcScopeTrig ( );
    VARIANT_BOOL GetAcquiring ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL Value );
    HRESULT AOSetManual ( );
    VARIANT_BOOL AOGetManualAvail ( );
    IModulesPtr GetModules ( );
    HRESULT StartModuleScan ( );
    HRESULT StopModuleScan ( );
    long GetRegType ( );
    IAveragedFFTPtr GetAveragedCPB ( );
    HRESULT LoadDisplaySetup (
        _bstr_t FileName );
    HRESULT SetStoreMode (
        long Mode );
    IAlarmsPtr GetAlarms ( );
    IDaqGroupPtr GetDaqGroup ( );
    VARIANT_BOOL GetIsSetupMode ( );
    HRESULT SetMainDataDir (
        _bstr_t DataDir );
    IFileNameSettingsPtr GetFileNameSettings ( );
    VARIANT_BOOL GetHasFRF ( );
    IDaqPtr GetDaq ( );
    IGlobalHeaderPtr GetGlobalHeader ( );
    VARIANT_BOOL GetFixedExternalClock ( );
    void PutFixedExternalClock (
        VARIANT_BOOL Value );
    HRESULT WriteErrorLog (
        _bstr_t Str );
    HRESULT UpdateSetupScreen ( );
    HRESULT NotifyTrackingChanged (
        VARIANT_BOOL Tracking,
        double TimeDiff );
    ITimingPtr GetTiming ( );
    IUserInterfacePtr GetUserInterface ( );
    IAveragedFFTPtr GetAveragedFFT ( );
    HRESULT ExportDataEx (
        long ExportType,
        long TimeAxis,
        long ExportDataType,
        long ExportOptions,
        _bstr_t FileName );
    double GetMeasureSampleRateEx ( );
    void PutMeasureSampleRateEx (
        double Value );
    IPowerModulesPtr GetPowerModules ( );
    float GetReducedRate ( );
    void PutReducedRate (
        float Value );
    HRESULT HideCaptionBar ( );
    HRESULT ExecuteModulesFunction (
        enum ModulesFunction Func,
        unsigned char Group,
        long Value );
    HRESULT ShowCaptionBar ( );
    float FirstScanDonePercent ( );
    long GetSetupSampleRate ( );
    void PutSetupSampleRate (
        long Value );
    long GetNETMode ( );
    VARIANT_BOOL Start ( );
    VARIANT_BOOL GetRemoteControlled ( );
    VARIANT_BOOL GetIsAcqRunning ( );
    IMathPtr GetMath ( );
    HRESULT LoadProject (
        _bstr_t Name );
    HRESULT Analyze ( );
    HRESULT SetMainToolBar (
        _bstr_t TabName,
        _bstr_t ButtonName );
    long GetMainWindowHandle ( );
    _bstr_t GetSpecDir (
        enum SpecDirectory DirType );
    IAmplInterfacesPtr GetAmplInterfaces ( );
    VARIANT_BOOL GetSuppressMessages ( );
    void PutSuppressMessages (
        VARIANT_BOOL Value );
    IOfflineCalcPtr GetOfflineCalc ( );
    VARIANT_BOOL GetConfigMode ( );
    VARIANT_BOOL GetShowInstrumentsInFullScreen ( );
    void PutShowInstrumentsInFullScreen (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetDisableKeyboardShortcuts ( );
    void PutDisableKeyboardShortcuts (
        VARIANT_BOOL Value );
    HRESULT SaveSetupToXML (
        BSTR * XML );
    HRESULT LoadSetupFromXML (
        _bstr_t XML );
    IProjectManagerPtr GetProjectManager ( );
    IVideoPtr GetVideo ( );
    HRESULT LoadSequence (
        _bstr_t FileName );
    HRESULT GetDewesoftVersion (
        long * Super,
        long * Major,
        long * Minor,
        long * Build,
        char * State );
    long GetSamplesEx (
        double SampleRate,
        VARIANT_BOOL SetupMode,
        long Level );
    ILockableCursorsPtr GetLockableCursors ( );
    HRESULT ReportMessage (
        enum ReportMessageType MsgType,
        _bstr_t MsgSource,
        _bstr_t Msg );
    HRESULT ChangeSetupFolder (
        _bstr_t FolderName );
    HRESULT ChangeDataFolder (
        _bstr_t FolderName );
    enum TimeFormat GetTimeFormat ( );
    void PutTimeFormat (
        enum TimeFormat Value );
    ISequencerPtr GetSequencer ( );
    long SendPluginCommand (
        _bstr_t PluginGUID,
        long CommandID,
        const _variant_t & Input,
        VARIANT * Output );
    unsigned int GetDialogHandle ( );
    void PutDialogHandle (
        unsigned int Value );
    HRESULT SetFreezeMode (
        VARIANT_BOOL Enabled );
    HRESULT StopStoring ( );
    HRESULT ImportDataFile (
        _bstr_t FileName,
        long ReferenceType,
        const _variant_t & Params,
        _bstr_t ChannelFilter );
    HRESULT SaveChangesToDataFile ( );
    enum TimingType GetTimingType ( );
    IRemoteManagerPtr GetRemoteManager ( );
    IChannelListExPtr CreateChannelList ( );
    HRESULT FillModuleChannelList (
        _bstr_t SerialNumber,
        long GroupID,
        struct IChannelListEx * * List );
    HRESULT AskUserToDeleteDisplays (
        _bstr_t PluginGUID );
    IXMLHelperPtr GetXMLHelper ( );
    IAcqLoopPtr GetAcqLoop ( );
    HRESULT UpdateTopology ( );
    IRTCorePtr GetRTCore ( );
    HRESULT ZeroCntChannels ( );
    IReportPtr GetReport ( );
    long GetAnalyseMenuIndex ( );
    IRTCPtr GetRTC ( );
    HRESULT ZeroAutoChannelsByGroup (
        VARIANT_BOOL Zero,
        char GroupID );
    HRESULT ExportToDewesoft (
        _bstr_t FileName );
    long AskSaveDataFile (
        VARIANT_BOOL AskWithoutAnySettingChanged );
    long GetMeasureMenuIndex ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Data (
        /*[out,retval]*/ struct IData * * Value ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall raw_SetInstrument (
        /*[in]*/ long Id ) = 0;
      virtual HRESULT __stdcall raw_Stop ( ) = 0;
      virtual HRESULT __stdcall raw_Init ( ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Parent (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_ShowPropertyFrame (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_ShowPropertyFrame (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall raw_SetupScreen ( ) = 0;
      virtual HRESULT __stdcall get_ShowStoreOptions (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_ShowStoreOptions (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_ShowSROptions (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_ShowSROptions (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall raw_HardwareSetup (
        /*[in]*/ VARIANT_BOOL Plugins ) = 0;
      virtual HRESULT __stdcall raw_LoadSetup (
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall raw_SaveSetup (
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall get_IniFileDir (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_IniFileDir (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_UpdateHardwareSetup ( ) = 0;
      virtual HRESULT __stdcall raw_Measure ( ) = 0;
      virtual HRESULT __stdcall raw_LoadFile (
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall raw_StartStoring (
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall get_LoadEngine (
        /*[out,retval]*/ struct ILoadEngine * * Value ) = 0;
      virtual HRESULT __stdcall raw_ExportData (
        /*[in]*/ long ExportType,
        /*[in]*/ long TimeAxis,
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall raw_SendCommand (
        /*[in]*/ BSTR Cmd,
        /*[in]*/ long Timeout,
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall raw_ManualStart ( ) = 0;
      virtual HRESULT __stdcall raw_ManualStop ( ) = 0;
      virtual HRESULT __stdcall get_ShowStyle (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_ShowStyle (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_StayOnTop (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_StayOnTop (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall raw_SetScreenIndex (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall get_ActiveScreen (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_SendKey (
        /*[in]*/ unsigned long Key ) = 0;
      virtual HRESULT __stdcall get_UsedSetupfile (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall get_UsedDatafile (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_UsedDatafile (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_LastKey (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_Screens (
        /*[out,retval]*/ struct IScreens * * Value ) = 0;
      virtual HRESULT __stdcall get_EventList (
        /*[out,retval]*/ struct IEventList * * Value ) = 0;
      virtual HRESULT __stdcall get_ActualRunMode (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_Version (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall get_MasterClock (
        /*[out,retval]*/ struct IMasterClock * * Value ) = 0;
      virtual HRESULT __stdcall get_StoreEngine (
        /*[out,retval]*/ struct IStoreEngine * * Value ) = 0;
      virtual HRESULT __stdcall raw_GoToInstruments ( ) = 0;
      virtual HRESULT __stdcall raw_SetFullScreen (
        /*[in]*/ VARIANT_BOOL Full ) = 0;
      virtual HRESULT __stdcall get_MainDataDir (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall raw_MainWndMessage (
        /*[in]*/ long Msg,
        /*[in]*/ long WParam,
        /*[in]*/ VARIANT_BOOL Wait ) = 0;
      virtual HRESULT __stdcall raw_SetRemoteMode (
        /*[in]*/ VARIANT_BOOL Remote ) = 0;
      virtual HRESULT __stdcall raw_MenuClick (
        /*[in]*/ enum MenuItems Item ) = 0;
      virtual HRESULT __stdcall get_MeasureSampleRate (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_MeasureSampleRate (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetScopeParams (
        /*[in]*/ double PreTime,
        /*[in]*/ double PostTime,
        /*[in]*/ struct IChannel * Channel,
        /*[in]*/ float Level,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_NewSetup ( ) = 0;
      virtual HRESULT __stdcall raw_SetScopeUsed (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_DataLost (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall raw_SetHeaderData (
        /*[in]*/ BSTR Caption,
        /*[in]*/ BSTR Header ) = 0;
      virtual HRESULT __stdcall raw_PrintScreen (
        /*[in]*/ VARIANT_BOOL ShowDialog ) = 0;
      virtual HRESULT __stdcall get_TimerInterval (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_TimerInterval (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_GetInterfaceVersion (
        /*[in,out]*/ long * Major,
        /*[in,out]*/ long * Minor,
        /*[in,out]*/ long * Revision ) = 0;
      virtual HRESULT __stdcall get_AISetupScreen (
        /*[out,retval]*/ struct IAISetupScreen * * Value ) = 0;
      virtual HRESULT __stdcall get_AlwaysEnableTrigger (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_AlwaysEnableTrigger (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Trigger (
        /*[out,retval]*/ struct ITrigger * * Value ) = 0;
      virtual HRESULT __stdcall get_DisableStoring (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_DisableStoring (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall raw_WriteErrorMessage (
        /*[in]*/ BSTR ErrorMsg ) = 0;
      virtual HRESULT __stdcall raw_PauseStoring ( ) = 0;
      virtual HRESULT __stdcall raw_ResumeStoring ( ) = 0;
      virtual HRESULT __stdcall raw_LoadModuleSetup (
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall raw_ChangeDaqType (
        /*[in]*/ long DaqType ) = 0;
      virtual HRESULT __stdcall raw_ChangeComPort (
        /*[in]*/ long ComPort ) = 0;
      virtual HRESULT __stdcall raw_LoadDBC (
        /*[in]*/ long PortNo,
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall raw_ZeroAllAutoChannels (
        /*[in]*/ VARIANT_BOOL Zero ) = 0;
      virtual HRESULT __stdcall raw_ShowSensorEditor ( ) = 0;
      virtual HRESULT __stdcall get_AOGroup (
        /*[out,retval]*/ struct IAOGroup * * Value ) = 0;
      virtual HRESULT __stdcall get_CAN (
        /*[out,retval]*/ struct ICAN * * Value ) = 0;
      virtual HRESULT __stdcall raw_InitScopeTrig (
        /*[in]*/ struct T_RecordPosition Start,
        /*[in]*/ struct T_RecordPosition Stop ) = 0;
      virtual HRESULT __stdcall raw_CalcScopeTrig (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall get_Acquiring (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall raw_AOSetManual ( ) = 0;
      virtual HRESULT __stdcall raw_AOGetManualAvail (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall get_Modules (
        /*[out,retval]*/ struct IModules * * Value ) = 0;
      virtual HRESULT __stdcall raw_StartModuleScan ( ) = 0;
      virtual HRESULT __stdcall raw_StopModuleScan ( ) = 0;
      virtual HRESULT __stdcall get_RegType (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_AveragedCPB (
        /*[out,retval]*/ struct IAveragedFFT * * Value ) = 0;
      virtual HRESULT __stdcall raw_LoadDisplaySetup (
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall raw_SetStoreMode (
        /*[in]*/ long Mode ) = 0;
      virtual HRESULT __stdcall get_Alarms (
        /*[out,retval]*/ struct IAlarms * * Value ) = 0;
      virtual HRESULT __stdcall get_DaqGroup (
        /*[out,retval]*/ struct IDaqGroup * * Value ) = 0;
      virtual HRESULT __stdcall get_IsSetupMode (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall raw_SetMainDataDir (
        /*[in]*/ BSTR DataDir ) = 0;
      virtual HRESULT __stdcall get_FileNameSettings (
        /*[out,retval]*/ struct IFileNameSettings * * Value ) = 0;
      virtual HRESULT __stdcall get_HasFRF (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall get_Daq (
        /*[out,retval]*/ struct IDaq * * Value ) = 0;
      virtual HRESULT __stdcall get_GlobalHeader (
        /*[out,retval]*/ struct IGlobalHeader * * Value ) = 0;
      virtual HRESULT __stdcall get_FixedExternalClock (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_FixedExternalClock (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall raw_WriteErrorLog (
        /*[in]*/ BSTR Str ) = 0;
      virtual HRESULT __stdcall raw_UpdateSetupScreen ( ) = 0;
      virtual HRESULT __stdcall raw_NotifyTrackingChanged (
        /*[in]*/ VARIANT_BOOL Tracking,
        /*[in]*/ double TimeDiff ) = 0;
      virtual HRESULT __stdcall get_Timing (
        /*[out,retval]*/ struct ITiming * * Value ) = 0;
      virtual HRESULT __stdcall get_UserInterface (
        /*[out,retval]*/ struct IUserInterface * * Value ) = 0;
      virtual HRESULT __stdcall get_AveragedFFT (
        /*[out,retval]*/ struct IAveragedFFT * * Value ) = 0;
      virtual HRESULT __stdcall raw_ExportDataEx (
        /*[in]*/ long ExportType,
        /*[in]*/ long TimeAxis,
        /*[in]*/ long ExportDataType,
        /*[in]*/ long ExportOptions,
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall get_MeasureSampleRateEx (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_MeasureSampleRateEx (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_PowerModules (
        /*[out,retval]*/ struct IPowerModules * * Value ) = 0;
      virtual HRESULT __stdcall get_ReducedRate (
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall put_ReducedRate (
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_HideCaptionBar ( ) = 0;
      virtual HRESULT __stdcall raw_ExecuteModulesFunction (
        /*[in]*/ enum ModulesFunction Func,
        unsigned char Group,
        long Value ) = 0;
      virtual HRESULT __stdcall raw_ShowCaptionBar ( ) = 0;
      virtual HRESULT __stdcall raw_FirstScanDonePercent (
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall get_SetupSampleRate (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_SetupSampleRate (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_NETMode (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_Start (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall get_RemoteControlled (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall get_IsAcqRunning (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall get_Math (
        /*[out,retval]*/ struct IMath * * Value ) = 0;
      virtual HRESULT __stdcall raw_LoadProject (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall raw_Analyze ( ) = 0;
      virtual HRESULT __stdcall raw_SetMainToolBar (
        /*[in]*/ BSTR TabName,
        /*[in]*/ BSTR ButtonName ) = 0;
      virtual HRESULT __stdcall get_MainWindowHandle (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_GetSpecDir (
        /*[in]*/ enum SpecDirectory DirType,
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall get_AmplInterfaces (
        /*[out,retval]*/ struct IAmplInterfaces * * Value ) = 0;
      virtual HRESULT __stdcall get_SuppressMessages (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_SuppressMessages (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_OfflineCalc (
        /*[out,retval]*/ struct IOfflineCalc * * Value ) = 0;
      virtual HRESULT __stdcall get_ConfigMode (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall get_ShowInstrumentsInFullScreen (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_ShowInstrumentsInFullScreen (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_DisableKeyboardShortcuts (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_DisableKeyboardShortcuts (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall raw_SaveSetupToXML (
        /*[out]*/ BSTR * XML ) = 0;
      virtual HRESULT __stdcall raw_LoadSetupFromXML (
        /*[in]*/ BSTR XML ) = 0;
      virtual HRESULT __stdcall get_ProjectManager (
        /*[out,retval]*/ struct IProjectManager * * Value ) = 0;
      virtual HRESULT __stdcall get_Video (
        /*[out,retval]*/ struct IVideo * * Value ) = 0;
      virtual HRESULT __stdcall raw_LoadSequence (
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall raw_GetDewesoftVersion (
        /*[in,out]*/ long * Super,
        /*[in,out]*/ long * Major,
        /*[in,out]*/ long * Minor,
        /*[in,out]*/ long * Build,
        /*[in,out]*/ char * State ) = 0;
      virtual HRESULT __stdcall raw_GetSamplesEx (
        /*[in]*/ double SampleRate,
        /*[in]*/ VARIANT_BOOL SetupMode,
        /*[in]*/ long Level,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_LockableCursors (
        /*[out,retval]*/ struct ILockableCursors * * Value ) = 0;
      virtual HRESULT __stdcall raw_ReportMessage (
        /*[in]*/ enum ReportMessageType MsgType,
        /*[in]*/ BSTR MsgSource,
        /*[in]*/ BSTR Msg ) = 0;
      virtual HRESULT __stdcall raw_ChangeSetupFolder (
        /*[in]*/ BSTR FolderName ) = 0;
      virtual HRESULT __stdcall raw_ChangeDataFolder (
        /*[in]*/ BSTR FolderName ) = 0;
      virtual HRESULT __stdcall get_TimeFormat (
        /*[out,retval]*/ enum TimeFormat * Value ) = 0;
      virtual HRESULT __stdcall put_TimeFormat (
        /*[in]*/ enum TimeFormat Value ) = 0;
      virtual HRESULT __stdcall get_Sequencer (
        /*[out,retval]*/ struct ISequencer * * Value ) = 0;
      virtual HRESULT __stdcall raw_SendPluginCommand (
        /*[in]*/ BSTR PluginGUID,
        /*[in]*/ long CommandID,
        /*[in]*/ VARIANT Input,
        /*[in,out]*/ VARIANT * Output,
        /*[out,retval]*/ long * ErrCode ) = 0;
      virtual HRESULT __stdcall get_DialogHandle (
        /*[out,retval]*/ unsigned int * Value ) = 0;
      virtual HRESULT __stdcall put_DialogHandle (
        /*[in]*/ unsigned int Value ) = 0;
      virtual HRESULT __stdcall raw_SetFreezeMode (
        /*[in]*/ VARIANT_BOOL Enabled ) = 0;
      virtual HRESULT __stdcall raw_StopStoring ( ) = 0;
      virtual HRESULT __stdcall raw_ImportDataFile (
        /*[in]*/ BSTR FileName,
        /*[in]*/ long ReferenceType,
        /*[in]*/ VARIANT Params,
        /*[in]*/ BSTR ChannelFilter ) = 0;
      virtual HRESULT __stdcall raw_SaveChangesToDataFile ( ) = 0;
      virtual HRESULT __stdcall raw_GetTimingType (
        /*[out,retval]*/ enum TimingType * Res ) = 0;
      virtual HRESULT __stdcall get_RemoteManager (
        /*[out,retval]*/ struct IRemoteManager * * Value ) = 0;
      virtual HRESULT __stdcall raw_CreateChannelList (
        /*[out,retval]*/ struct IChannelListEx * * Value ) = 0;
      virtual HRESULT __stdcall raw_FillModuleChannelList (
        /*[in]*/ BSTR SerialNumber,
        /*[in]*/ long GroupID,
        /*[in,out]*/ struct IChannelListEx * * List ) = 0;
      virtual HRESULT __stdcall raw_AskUserToDeleteDisplays (
        /*[in]*/ BSTR PluginGUID ) = 0;
      virtual HRESULT __stdcall get_XMLHelper (
        /*[out,retval]*/ struct IXMLHelper * * Value ) = 0;
      virtual HRESULT __stdcall get_AcqLoop (
        /*[out,retval]*/ struct IAcqLoop * * Value ) = 0;
      virtual HRESULT __stdcall raw_UpdateTopology ( ) = 0;
      virtual HRESULT __stdcall get_RTCore (
        /*[out,retval]*/ struct IRTCore * * Value ) = 0;
      virtual HRESULT __stdcall raw_ZeroCntChannels ( ) = 0;
      virtual HRESULT __stdcall get_Report (
        /*[out,retval]*/ struct IReport * * Value ) = 0;
      virtual HRESULT __stdcall get_AnalyseMenuIndex (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_RTC (
        /*[out,retval]*/ struct IRTC * * Value ) = 0;
      virtual HRESULT __stdcall raw_ZeroAutoChannelsByGroup (
        /*[in]*/ VARIANT_BOOL Zero,
        /*[in]*/ char GroupID ) = 0;
      virtual HRESULT __stdcall raw_ExportToDewesoft (
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall raw_AskSaveDataFile (
        /*[in]*/ VARIANT_BOOL AskWithoutAnySettingChanged,
        /*[out,retval]*/ long * DialogResult ) = 0;
      virtual HRESULT __stdcall get_MeasureMenuIndex (
        /*[out,retval]*/ long * Value ) = 0;
};

struct __declspec(uuid("f095a7a6-c7cc-4492-a4f1-25596b54c673"))
IPlugin : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT SetData (
        struct IData * Data );
    HRESULT OnTrigger (
        double Time );
    HRESULT Configure ( );
    HRESULT OnGetData ( );
    HRESULT OnStartAcq ( );
    HRESULT OnStopAcq ( );
    HRESULT OnStartStoring ( );
    HRESULT OnStopStoring ( );
    HRESULT Initiate ( );
    HRESULT SetApp (
        struct IApp * App );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SetData (
        /*[in]*/ struct IData * Data ) = 0;
      virtual HRESULT __stdcall raw_OnTrigger (
        /*[in]*/ double Time ) = 0;
      virtual HRESULT __stdcall raw_Configure ( ) = 0;
      virtual HRESULT __stdcall raw_OnGetData ( ) = 0;
      virtual HRESULT __stdcall raw_OnStartAcq ( ) = 0;
      virtual HRESULT __stdcall raw_OnStopAcq ( ) = 0;
      virtual HRESULT __stdcall raw_OnStartStoring ( ) = 0;
      virtual HRESULT __stdcall raw_OnStopStoring ( ) = 0;
      virtual HRESULT __stdcall raw_Initiate ( ) = 0;
      virtual HRESULT __stdcall raw_SetApp (
        /*[in]*/ struct IApp * App ) = 0;
};

struct __declspec(uuid("b06829e7-7afc-4921-b530-6ecbe286c905"))
IPlugin2 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetId))
    _bstr_t Id;
    __declspec(property(get=GetUsed,put=PutUsed))
    VARIANT_BOOL Used;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Initiate (
        struct IApp * DeweApp );
    HRESULT OnStartAcq ( );
    HRESULT OnStopAcq ( );
    HRESULT OnStartStoring ( );
    HRESULT OnStopStoring ( );
    HRESULT OnGetData ( );
    HRESULT OnTrigger (
        double Time );
    HRESULT Configure ( );
    _bstr_t GetId ( );
    HRESULT SaveSetup (
        VARIANT * Data );
    HRESULT LoadSetup (
        const _variant_t & Data );
    HRESULT NewSetup ( );
    HRESULT ClearChannelsInstance ( );
    VARIANT_BOOL ShowFrame (
        long Parent );
    HRESULT HideFrame ( );
    HRESULT UpdateFrame ( );
    VARIANT_BOOL GetUsed ( );
    void PutUsed (
        VARIANT_BOOL Value );
    HRESULT OnOleMsg (
        long Msg,
        long Param );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initiate (
        /*[in]*/ struct IApp * DeweApp ) = 0;
      virtual HRESULT __stdcall raw_OnStartAcq ( ) = 0;
      virtual HRESULT __stdcall raw_OnStopAcq ( ) = 0;
      virtual HRESULT __stdcall raw_OnStartStoring ( ) = 0;
      virtual HRESULT __stdcall raw_OnStopStoring ( ) = 0;
      virtual HRESULT __stdcall raw_OnGetData ( ) = 0;
      virtual HRESULT __stdcall raw_OnTrigger (
        /*[in]*/ double Time ) = 0;
      virtual HRESULT __stdcall raw_Configure ( ) = 0;
      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall raw_SaveSetup (
        /*[in,out]*/ VARIANT * Data ) = 0;
      virtual HRESULT __stdcall raw_LoadSetup (
        /*[in]*/ VARIANT Data ) = 0;
      virtual HRESULT __stdcall raw_NewSetup ( ) = 0;
      virtual HRESULT __stdcall raw_ClearChannelsInstance ( ) = 0;
      virtual HRESULT __stdcall raw_ShowFrame (
        /*[in]*/ long Parent,
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall raw_HideFrame ( ) = 0;
      virtual HRESULT __stdcall raw_UpdateFrame ( ) = 0;
      virtual HRESULT __stdcall get_Used (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Used (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall raw_OnOleMsg (
        /*[in]*/ long Msg,
        /*[in]*/ long Param ) = 0;
};

struct __declspec(uuid("66c046ab-0518-453d-9e52-06340574a1c2"))
ICustomExport : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetTimeIncrease,put=PutTimeIncrease))
    double TimeIncrease;
    __declspec(property(get=GetSupportsAsync))
    VARIANT_BOOL SupportsAsync;
    __declspec(property(get=GetSupportsSRDiv))
    VARIANT_BOOL SupportsSRDiv;
    __declspec(property(get=GetFileName,put=PutFileName))
    _bstr_t FileName;
    __declspec(property(get=GetDataCount,put=PutDataCount))
    unsigned __int64 DataCount;
    __declspec(property(get=GetExportType))
    enum ExportTypes ExportType;
    __declspec(property(get=GetAbsoluteTime,put=PutAbsoluteTime))
    VARIANT_BOOL AbsoluteTime;
    __declspec(property(get=GetExtension))
    _bstr_t Extension;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetFileName ( );
    void PutFileName (
        _bstr_t Value );
    HRESULT StartExport (
        struct IApp * App );
    HRESULT EndExport ( );
    enum ExportTypes GetExportType ( );
    VARIANT_BOOL GetAbsoluteTime ( );
    void PutAbsoluteTime (
        VARIANT_BOOL Value );
    HRESULT StartDataFolder (
        _bstr_t FolderName,
        DATE AbsTime );
    HRESULT EndDataFolder ( );
    HRESULT StartInfo (
        _bstr_t Info );
    HRESULT WriteInfoString (
        _bstr_t Description,
        _bstr_t Value );
    HRESULT WriteInfoInteger (
        _bstr_t Description,
        long Param );
    HRESULT WriteInfoSingle (
        _bstr_t Description,
        float Value );
    HRESULT WriteInfoDate (
        _bstr_t Description,
        DATE Value );
    HRESULT EndInfo ( );
    HRESULT StartTimeField (
        _bstr_t FieldName,
        _bstr_t FieldUnit );
    HRESULT StartDataField (
        _bstr_t FieldName,
        _bstr_t FieldUnit,
        long ExportRate );
    HRESULT EndHeader ( );
    HRESULT StartValue (
        double TimeValue );
    HRESULT StartAbsValue (
        DATE DateTime );
    HRESULT WriteValue (
        float Value );
    HRESULT WriteAsyncValue (
        double TimeStamp,
        float Value );
    HRESULT StartChannel (
        _bstr_t FieldName,
        _bstr_t FieldUnit,
        VARIANT_BOOL Async );
    _bstr_t GetExtension ( );
    double GetTimeIncrease ( );
    void PutTimeIncrease (
        double Value );
    HRESULT EndChannel ( );
    HRESULT EndValue ( );
    VARIANT_BOOL GetSupportsAsync ( );
    VARIANT_BOOL GetSupportsSRDiv ( );
    unsigned __int64 GetDataCount ( );
    void PutDataCount (
        unsigned __int64 Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FileName (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_FileName (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall raw_StartExport (
        /*[in]*/ struct IApp * App ) = 0;
      virtual HRESULT __stdcall raw_EndExport ( ) = 0;
      virtual HRESULT __stdcall get_ExportType (
        /*[out,retval]*/ enum ExportTypes * Value ) = 0;
      virtual HRESULT __stdcall get_AbsoluteTime (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_AbsoluteTime (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall raw_StartDataFolder (
        /*[in]*/ BSTR FolderName,
        /*[in]*/ DATE AbsTime ) = 0;
      virtual HRESULT __stdcall raw_EndDataFolder ( ) = 0;
      virtual HRESULT __stdcall raw_StartInfo (
        /*[in]*/ BSTR Info ) = 0;
      virtual HRESULT __stdcall raw_WriteInfoString (
        /*[in]*/ BSTR Description,
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall raw_WriteInfoInteger (
        /*[in]*/ BSTR Description,
        /*[in]*/ long Param ) = 0;
      virtual HRESULT __stdcall raw_WriteInfoSingle (
        /*[in]*/ BSTR Description,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_WriteInfoDate (
        /*[in]*/ BSTR Description,
        /*[in]*/ DATE Value ) = 0;
      virtual HRESULT __stdcall raw_EndInfo ( ) = 0;
      virtual HRESULT __stdcall raw_StartTimeField (
        /*[in]*/ BSTR FieldName,
        /*[in]*/ BSTR FieldUnit ) = 0;
      virtual HRESULT __stdcall raw_StartDataField (
        /*[in]*/ BSTR FieldName,
        /*[in]*/ BSTR FieldUnit,
        /*[in]*/ long ExportRate ) = 0;
      virtual HRESULT __stdcall raw_EndHeader ( ) = 0;
      virtual HRESULT __stdcall raw_StartValue (
        /*[in]*/ double TimeValue ) = 0;
      virtual HRESULT __stdcall raw_StartAbsValue (
        /*[in]*/ DATE DateTime ) = 0;
      virtual HRESULT __stdcall raw_WriteValue (
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_WriteAsyncValue (
        /*[in]*/ double TimeStamp,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_StartChannel (
        /*[in]*/ BSTR FieldName,
        /*[in]*/ BSTR FieldUnit,
        /*[in]*/ VARIANT_BOOL Async ) = 0;
      virtual HRESULT __stdcall get_Extension (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall get_TimeIncrease (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_TimeIncrease (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall raw_EndChannel ( ) = 0;
      virtual HRESULT __stdcall raw_EndValue ( ) = 0;
      virtual HRESULT __stdcall get_SupportsAsync (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall get_SupportsSRDiv (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall get_DataCount (
        /*[out,retval]*/ unsigned __int64 * Value ) = 0;
      virtual HRESULT __stdcall put_DataCount (
        /*[in]*/ unsigned __int64 Value ) = 0;
};

struct __declspec(uuid("99edf4c9-4784-4a66-a1ca-2e395ec319d6"))
IPlugin3 : IPlugin2
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT OnStartSetup ( );
    HRESULT OnStopSetup ( );
    HRESULT OnBeforeStartAcq (
        VARIANT_BOOL * AllowStart );
    HRESULT OnAfterStartAcq ( );
    HRESULT OnBeforeStopAcq (
        VARIANT_BOOL * AllowStop );
    HRESULT OnAfterStopAcq ( );
    HRESULT OnRepaintFrame ( );
    HRESULT OnTriggerStop (
        double Time,
        double TrigDuration );
    HRESULT OnAfterCalcMath ( );
    long GetDWTypeLibVersion ( );
    HRESULT OnGetSetupData ( );
    HRESULT OnResizeFrame (
        long Width,
        long Height );
    HRESULT ProvidesClock (
        VARIANT_BOOL * Value );
    HRESULT OnGetClock (
        long * ClockLow,
        long * ClockHigh );
    HRESULT SetCANPort (
        long Port );
    HRESULT OnAlarm (
        long CondIndex,
        VARIANT_BOOL Status );
    HRESULT OnBigListLoad (
        _bstr_t TextSetup );
    HRESULT OnExit ( );
    VARIANT_BOOL OnShowHWFrame (
        long Parent );
    HRESULT OnHideHWFrame ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_OnStartSetup ( ) = 0;
      virtual HRESULT __stdcall raw_OnStopSetup ( ) = 0;
      virtual HRESULT __stdcall raw_OnBeforeStartAcq (
        /*[in,out]*/ VARIANT_BOOL * AllowStart ) = 0;
      virtual HRESULT __stdcall raw_OnAfterStartAcq ( ) = 0;
      virtual HRESULT __stdcall raw_OnBeforeStopAcq (
        /*[in,out]*/ VARIANT_BOOL * AllowStop ) = 0;
      virtual HRESULT __stdcall raw_OnAfterStopAcq ( ) = 0;
      virtual HRESULT __stdcall raw_OnRepaintFrame ( ) = 0;
      virtual HRESULT __stdcall raw_OnTriggerStop (
        /*[in]*/ double Time,
        /*[in]*/ double TrigDuration ) = 0;
      virtual HRESULT __stdcall raw_OnAfterCalcMath ( ) = 0;
      virtual HRESULT __stdcall raw_GetDWTypeLibVersion (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_OnGetSetupData ( ) = 0;
      virtual HRESULT __stdcall raw_OnResizeFrame (
        /*[in]*/ long Width,
        /*[in]*/ long Height ) = 0;
      virtual HRESULT __stdcall raw_ProvidesClock (
        /*[in,out]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall raw_OnGetClock (
        /*[in,out]*/ long * ClockLow,
        /*[in,out]*/ long * ClockHigh ) = 0;
      virtual HRESULT __stdcall raw_SetCANPort (
        /*[in]*/ long Port ) = 0;
      virtual HRESULT __stdcall raw_OnAlarm (
        /*[in]*/ long CondIndex,
        /*[in]*/ VARIANT_BOOL Status ) = 0;
      virtual HRESULT __stdcall raw_OnBigListLoad (
        /*[in]*/ BSTR TextSetup ) = 0;
      virtual HRESULT __stdcall raw_OnExit ( ) = 0;
      virtual HRESULT __stdcall raw_OnShowHWFrame (
        /*[in]*/ long Parent,
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall raw_OnHideHWFrame ( ) = 0;
};

struct __declspec(uuid("6b0b2596-bc6b-4c04-8155-ed285696da7d"))
ICustomExport2 : ICustomExport
{
    //
    // Property data
    //

    __declspec(property(get=GetSupportsDouble))
    VARIANT_BOOL SupportsDouble;

    //
    // Wrapper methods for error-handling
    //

    HRESULT SetAbsMin (
        float AbsMin );
    HRESULT SetAbsMax (
        float AbsMax );
    HRESULT SetTrigOffset (
        double TrigTime );
    HRESULT SetChannelColor (
        long Color );
    HRESULT SetRangeMax (
        float Value );
    HRESULT SetRangeMin (
        float Value );
    HRESULT WriteDoubleValue (
        double Value );
    HRESULT WriteAsyncDoubleValue (
        double TimeStamp,
        double Value );
    long GetDWTypeLibVersion ( );
    VARIANT_BOOL GetSupportsDouble ( );
    HRESULT SetDoubleFloat (
        VARIANT_BOOL DoubleFloat );
    HRESULT StartEvents ( );
    HRESULT StopEvents ( );
    HRESULT WriteEvent (
        long EventType,
        _bstr_t EventTypeString,
        double Time,
        _bstr_t Comment );
    HRESULT SetApp (
        struct IApp * App );
    HRESULT SetChannel (
        struct IChannel * Ch );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SetAbsMin (
        /*[in]*/ float AbsMin ) = 0;
      virtual HRESULT __stdcall raw_SetAbsMax (
        /*[in]*/ float AbsMax ) = 0;
      virtual HRESULT __stdcall raw_SetTrigOffset (
        /*[in]*/ double TrigTime ) = 0;
      virtual HRESULT __stdcall raw_SetChannelColor (
        /*[in]*/ long Color ) = 0;
      virtual HRESULT __stdcall raw_SetRangeMax (
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetRangeMin (
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_WriteDoubleValue (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall raw_WriteAsyncDoubleValue (
        /*[in]*/ double TimeStamp,
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall raw_GetDWTypeLibVersion (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_SupportsDouble (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall raw_SetDoubleFloat (
        /*[in]*/ VARIANT_BOOL DoubleFloat ) = 0;
      virtual HRESULT __stdcall raw_StartEvents ( ) = 0;
      virtual HRESULT __stdcall raw_StopEvents ( ) = 0;
      virtual HRESULT __stdcall raw_WriteEvent (
        /*[in]*/ long EventType,
        /*[in]*/ BSTR EventTypeString,
        /*[in]*/ double Time,
        /*[in]*/ BSTR Comment ) = 0;
      virtual HRESULT __stdcall raw_SetApp (
        /*[in]*/ struct IApp * App ) = 0;
      virtual HRESULT __stdcall raw_SetChannel (
        /*[in]*/ struct IChannel * Ch ) = 0;
};

struct __declspec(uuid("3a2b361a-ee1b-4ceb-9848-2c0982bcac7f"))
ICustomDAQ : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCardFound))
    VARIANT_BOOL CardFound;
    __declspec(property(get=GetNumChannels))
    long NumChannels;
    __declspec(property(get=GetNumCNTChannels))
    long NumCNTChannels;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetCardFound ( );
    long GetNumChannels ( );
    HRESULT GetDeviceType ( );
    HRESULT GetBitResolution (
        long ChIndex,
        long * Bits );
    HRESULT GetSampleRates (
        VARIANT * List );
    HRESULT CheckSampleRate (
        long WantedRate,
        long NumChannels,
        const _variant_t & ChList,
        long * AdjustedRate );
    HRESULT StartAcq (
        long SampleRate,
        VARIANT_BOOL SetupMode );
    HRESULT StopAcq ( );
    HRESULT GetData (
        long * Samples );
    HRESULT GetCurrentTime (
        __int64 * Time );
    HRESULT SetApp (
        struct IApp * App );
    HRESULT GetCardName (
        BSTR * Name );
    HRESULT GetDWTypeLibVersion (
        long * Version );
    HRESULT GetBufferSize (
        long * Value );
    HRESULT ShowSetupFrame (
        long AppHandle,
        long Handle );
    HRESULT HideSetupFrame ( );
    HRESULT GetChannelGain (
        float * Gain );
    HRESULT GetMinMax (
        long ChnIndex,
        float * Min,
        float * Max );
    HRESULT GetOptionsCount (
        long * Cnt );
    HRESULT GetOptionName (
        long Index,
        BSTR * Name );
    long GetNumCNTChannels ( );
    HRESULT GetCNTBitResolution (
        long ChIndex,
        long * Bits );
    HRESULT GetDeviceCode (
        BSTR * Code,
        BSTR * Verify );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CardFound (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall get_NumChannels (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_GetDeviceType ( ) = 0;
      virtual HRESULT __stdcall raw_GetBitResolution (
        /*[in]*/ long ChIndex,
        /*[in,out]*/ long * Bits ) = 0;
      virtual HRESULT __stdcall raw_GetSampleRates (
        /*[in,out]*/ VARIANT * List ) = 0;
      virtual HRESULT __stdcall raw_CheckSampleRate (
        /*[in]*/ long WantedRate,
        /*[in]*/ long NumChannels,
        /*[in]*/ VARIANT ChList,
        /*[in,out]*/ long * AdjustedRate ) = 0;
      virtual HRESULT __stdcall raw_StartAcq (
        /*[in]*/ long SampleRate,
        /*[in]*/ VARIANT_BOOL SetupMode ) = 0;
      virtual HRESULT __stdcall raw_StopAcq ( ) = 0;
      virtual HRESULT __stdcall raw_GetData (
        /*[in,out]*/ long * Samples ) = 0;
      virtual HRESULT __stdcall raw_GetCurrentTime (
        /*[in,out]*/ __int64 * Time ) = 0;
      virtual HRESULT __stdcall raw_SetApp (
        /*[in]*/ struct IApp * App ) = 0;
      virtual HRESULT __stdcall raw_GetCardName (
        /*[in,out]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall raw_GetDWTypeLibVersion (
        /*[in,out]*/ long * Version ) = 0;
      virtual HRESULT __stdcall raw_GetBufferSize (
        /*[out]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_ShowSetupFrame (
        /*[in]*/ long AppHandle,
        /*[in]*/ long Handle ) = 0;
      virtual HRESULT __stdcall raw_HideSetupFrame ( ) = 0;
      virtual HRESULT __stdcall raw_GetChannelGain (
        /*[out]*/ float * Gain ) = 0;
      virtual HRESULT __stdcall raw_GetMinMax (
        /*[in]*/ long ChnIndex,
        /*[in,out]*/ float * Min,
        /*[in,out]*/ float * Max ) = 0;
      virtual HRESULT __stdcall raw_GetOptionsCount (
        /*[in,out]*/ long * Cnt ) = 0;
      virtual HRESULT __stdcall raw_GetOptionName (
        /*[in]*/ long Index,
        /*[in,out]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall get_NumCNTChannels (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_GetCNTBitResolution (
        /*[in]*/ long ChIndex,
        /*[in,out]*/ long * Bits ) = 0;
      virtual HRESULT __stdcall raw_GetDeviceCode (
        /*[out]*/ BSTR * Code,
        /*[out]*/ BSTR * Verify ) = 0;
};

struct __declspec(uuid("0d7e8d61-796e-47ab-9631-2fc80a5af203"))
IExportFrame : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT ShowFrame (
        long Handle,
        long * FrameHeight );
    HRESULT HideFrame ( );
    HRESULT Apply ( );
    HRESULT SetExpApp (
        struct IApp * App );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_ShowFrame (
        /*[in]*/ long Handle,
        /*[out]*/ long * FrameHeight ) = 0;
      virtual HRESULT __stdcall raw_HideFrame ( ) = 0;
      virtual HRESULT __stdcall raw_Apply ( ) = 0;
      virtual HRESULT __stdcall raw_SetExpApp (
        /*[in]*/ struct IApp * App ) = 0;
};

struct __declspec(uuid("d9d2402a-73a9-47c3-a121-951a7efe4fcf"))
IVCContext : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDChannels))
    IChannelListPtr DChannels;
    __declspec(property(get=GetDInputGroups))
    IInputGroupsPtr DInputGroups;

    //
    // Wrapper methods for error-handling
    //

    IChannelListPtr GetDChannels ( );
    HRESULT Repaint ( );
    HRESULT DataRegionChanged ( );
    HRESULT BroadcastPosChanged ( );
    HRESULT BroadcastScaleChanged (
        struct T_RecordPosition Min,
        struct T_RecordPosition Max,
        long ZoomLevel,
        double DeltaT );
    IInputGroupsPtr GetDInputGroups ( );
    HRESULT NeedData (
        struct T_RecordPosition StartPos,
        struct T_RecordPosition EndPos,
        long MinLevel,
        VARIANT_BOOL Expand,
        struct IChannelList * ChList );
    HRESULT RefreshVisualProperties ( );
    VARIANT_BOOL ShowInputField (
        long X,
        long Y,
        BSTR * Text );
    IInputSlotsPtr GetInputSlots ( );
    IProcessingMarkerPtr CreateProcessingMarker (
        _bstr_t Guid );
    VARIANT_BOOL InitProcessingMarker (
        struct IProcessingMarker * ProcessingMarker,
        struct IChannel * Channel,
        VARIANT_BOOL ShowSetupFrame );
    HRESULT DeleteProcessingMarker (
        struct IProcessingMarker * ProcessingMarker );
    HRESULT ProcessingMarkerChanged (
        struct IProcessingMarker * ProcessingMarker,
        struct IMarkerInput * MarkerInput );
    HRESULT EditProcessingMarker (
        struct IProcessingMarker * ProcessingMarker,
        struct IChannel * Channel,
        VARIANT_BOOL ShowSetupFrame );
    HRESULT DisplaySyncAcquire ( );
    HRESULT DisplaySyncRelease ( );
    double GetCurrentValue (
        struct IChannel * Channel,
        enum ComplexPresentation ComplexPresent );
    long GetCurrentSamplePosition (
        struct IChannel * Channel );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DChannels (
        /*[out,retval]*/ struct IChannelList * * Value ) = 0;
      virtual HRESULT __stdcall raw_Repaint ( ) = 0;
      virtual HRESULT __stdcall raw_DataRegionChanged ( ) = 0;
      virtual HRESULT __stdcall raw_BroadcastPosChanged ( ) = 0;
      virtual HRESULT __stdcall raw_BroadcastScaleChanged (
        /*[in]*/ struct T_RecordPosition Min,
        /*[in]*/ struct T_RecordPosition Max,
        /*[in]*/ long ZoomLevel,
        /*[in]*/ double DeltaT ) = 0;
      virtual HRESULT __stdcall get_DInputGroups (
        /*[out,retval]*/ struct IInputGroups * * Value ) = 0;
      virtual HRESULT __stdcall raw_NeedData (
        /*[in]*/ struct T_RecordPosition StartPos,
        /*[in]*/ struct T_RecordPosition EndPos,
        /*[in]*/ long MinLevel,
        /*[in]*/ VARIANT_BOOL Expand,
        /*[in]*/ struct IChannelList * ChList ) = 0;
      virtual HRESULT __stdcall raw_RefreshVisualProperties ( ) = 0;
      virtual HRESULT __stdcall raw_ShowInputField (
        /*[in]*/ long X,
        /*[in]*/ long Y,
        /*[in,out]*/ BSTR * Text,
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall raw_GetInputSlots (
        /*[out,retval]*/ struct IInputSlots * * Value ) = 0;
      virtual HRESULT __stdcall raw_CreateProcessingMarker (
        /*[in]*/ BSTR Guid,
        /*[out,retval]*/ struct IProcessingMarker * * ProcessingMarker ) = 0;
      virtual HRESULT __stdcall raw_InitProcessingMarker (
        /*[in]*/ struct IProcessingMarker * ProcessingMarker,
        /*[in]*/ struct IChannel * Channel,
        /*[in]*/ VARIANT_BOOL ShowSetupFrame,
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall raw_DeleteProcessingMarker (
        /*[in]*/ struct IProcessingMarker * ProcessingMarker ) = 0;
      virtual HRESULT __stdcall raw_ProcessingMarkerChanged (
        /*[in]*/ struct IProcessingMarker * ProcessingMarker,
        /*[in]*/ struct IMarkerInput * MarkerInput ) = 0;
      virtual HRESULT __stdcall raw_EditProcessingMarker (
        /*[in]*/ struct IProcessingMarker * ProcessingMarker,
        /*[in]*/ struct IChannel * Channel,
        /*[in]*/ VARIANT_BOOL ShowSetupFrame ) = 0;
      virtual HRESULT __stdcall raw_DisplaySyncAcquire ( ) = 0;
      virtual HRESULT __stdcall raw_DisplaySyncRelease ( ) = 0;
      virtual HRESULT __stdcall raw_GetCurrentValue (
        /*[in]*/ struct IChannel * Channel,
        /*[in]*/ enum ComplexPresentation ComplexPresent,
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall raw_GetCurrentSamplePosition (
        /*[in]*/ struct IChannel * Channel,
        /*[out,retval]*/ long * Value ) = 0;
};

struct __declspec(uuid("9b3ff991-2d72-4474-a82d-2464d071a715"))
IMathContext : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetInputChannels))
    IChannelListPtr InputChannels;
    __declspec(property(get=GetOutputChannels))
    IChannelListPtr OutputChannels;
    __declspec(property(get=GetSubItemCount))
    long SubItemCount;
    __declspec(property(get=GetSubItem))
    IMathContextPtr SubItem[];
    __declspec(property(get=GetObjectContext))
    IMathContextPtr ObjectContext;
    __declspec(property(get=GetCurrentModule))
    IMathModulePtr CurrentModule;
    __declspec(property(get=GetCurrentContext))
    IMathObjContextPtr CurrentContext;

    //
    // Wrapper methods for error-handling
    //

    IChannelPtr MountChannel (
        long Id,
        _bstr_t Descriptor );
    IChannelListPtr GetInputChannels ( );
    IChannelListPtr GetOutputChannels ( );
    IChannelPtr MountChannelEx (
        VARIANT_BOOL * Created,
        long Id,
        _bstr_t Descriptor,
        _bstr_t AUnit,
        _bstr_t Name,
        long Color );
    IInputGroupPtr MountInputGroup (
        long Id );
    long GetSubItemCount ( );
    IMathContextPtr GetSubItem (
        long Index );
    HRESULT UnmountChannel (
        struct IChannel * * Ch );
    HRESULT SetDefaultChProps (
        VARIANT_BOOL Force );
    IMathContextPtr GetObjectContext ( );
    IMathModulePtr GetCurrentModule ( );
    IMathObjContextPtr GetCurrentContext ( );
    HRESULT Apply ( );
    VARIANT_BOOL HasError ( );
    HRESULT SetAsOffline ( );
    long GetInputCalcDelay ( );
    _variant_t MathContextPointer ( );
    _variant_t MathModulePointer (
        long Index );
    HRESULT SetCustomOfflinePercentage (
        long Percentage );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_MountChannel (
        /*[in]*/ long Id,
        /*[in]*/ BSTR Descriptor,
        /*[out,retval]*/ struct IChannel * * Value ) = 0;
      virtual HRESULT __stdcall get_InputChannels (
        /*[out,retval]*/ struct IChannelList * * Value ) = 0;
      virtual HRESULT __stdcall get_OutputChannels (
        /*[out,retval]*/ struct IChannelList * * Value ) = 0;
      virtual HRESULT __stdcall raw_MountChannelEx (
        /*[out]*/ VARIANT_BOOL * Created,
        /*[in]*/ long Id,
        /*[in]*/ BSTR Descriptor,
        /*[in]*/ BSTR AUnit,
        /*[in]*/ BSTR Name,
        /*[in]*/ long Color,
        /*[out,retval]*/ struct IChannel * * Value ) = 0;
      virtual HRESULT __stdcall raw_MountInputGroup (
        /*[in]*/ long Id,
        /*[out,retval]*/ struct IInputGroup * * Value ) = 0;
      virtual HRESULT __stdcall get_SubItemCount (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_SubItem (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IMathContext * * Value ) = 0;
      virtual HRESULT __stdcall raw_UnmountChannel (
        /*[in,out]*/ struct IChannel * * Ch ) = 0;
      virtual HRESULT __stdcall raw_SetDefaultChProps (
        /*[in]*/ VARIANT_BOOL Force ) = 0;
      virtual HRESULT __stdcall get_ObjectContext (
        /*[out,retval]*/ struct IMathContext * * Value ) = 0;
      virtual HRESULT __stdcall get_CurrentModule (
        /*[out,retval]*/ struct IMathModule * * Value ) = 0;
      virtual HRESULT __stdcall get_CurrentContext (
        /*[out,retval]*/ struct IMathObjContext * * Value ) = 0;
      virtual HRESULT __stdcall raw_Apply ( ) = 0;
      virtual HRESULT __stdcall raw_HasError (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall raw_SetAsOffline ( ) = 0;
      virtual HRESULT __stdcall raw_GetInputCalcDelay (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_MathContextPointer (
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall raw_MathModulePointer (
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall raw_SetCustomOfflinePercentage (
        /*[in]*/ long Percentage ) = 0;
};

struct __declspec(uuid("14c2577b-0281-475a-9302-394d1fa1b473"))
IMathFrameContext : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCurrentModule))
    IMathModulePtr CurrentModule;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Apply (
        const _variant_t & Props );
    IMathModulePtr GetCurrentModule ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Apply (
        /*[in]*/ VARIANT Props ) = 0;
      virtual HRESULT __stdcall get_CurrentModule (
        /*[out,retval]*/ struct IMathModule * * Value ) = 0;
};

struct __declspec(uuid("6f188a41-ad92-4380-b560-02a07dda1339"))
IMath : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMathObject))
    IMathObjectPtr MathObject[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IMathObjectPtr GetMathObject (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    IMathObjectPtr FindObjByID (
        long Index );
    IMathObjectPtr AddObj (
        _bstr_t Guid );
    HRESULT RemoveObj (
        long I );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_MathObject (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IMathObject * * Value ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Value ) = 0;
      virtual HRESULT __stdcall raw_FindObjByID (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IMathObject * * Value ) = 0;
      virtual HRESULT __stdcall raw_AddObj (
        /*[in]*/ BSTR Guid,
        /*[out,retval]*/ struct IMathObject * * Value ) = 0;
      virtual HRESULT __stdcall raw_RemoveObj (
        /*[in]*/ long I ) = 0;
};

struct __declspec(uuid("b5ff31ac-f12b-4c28-adce-14874043c10a"))
IMathObject : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMathModule))
    IMathModulePtr MathModule[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetMathObjContext))
    IMathObjContextPtr MathObjContext;
    __declspec(property(get=GetMathGUID))
    _bstr_t MathGUID;
    __declspec(property(get=GetId))
    long Id;
    __declspec(property(get=GetMathType))
    _bstr_t MathType;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IMathModulePtr GetMathModule (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    IMathObjContextPtr GetMathObjContext ( );
    _bstr_t GetMathGUID ( );
    long GetId ( );
    IMathModulePtr FindModuleByID (
        long I );
    _bstr_t GetMathType ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t Value );
    HRESULT MarkAsOffline ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_MathModule (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IMathModule * * Value ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Value ) = 0;
      virtual HRESULT __stdcall get_MathObjContext (
        /*[out,retval]*/ struct IMathObjContext * * Value ) = 0;
      virtual HRESULT __stdcall get_MathGUID (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_FindModuleByID (
        /*[in]*/ long I,
        /*[out,retval]*/ struct IMathModule * * Value ) = 0;
      virtual HRESULT __stdcall get_MathType (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall raw_MarkAsOffline ( ) = 0;
};

struct __declspec(uuid("e17a04ba-e047-4896-892e-a8937cc290b6"))
IMathModule : IMathItem
{
    //
    // Property data
    //

    __declspec(property(get=GetId))
    long Id;
    __declspec(property(get=GetMathObject))
    IMathObjectPtr MathObject;

    //
    // Wrapper methods for error-handling
    //

    long GetId ( );
    IMathObjectPtr GetMathObject ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_MathObject (
        /*[out,retval]*/ struct IMathObject * * Value ) = 0;
};

struct __declspec(uuid("41315abf-26aa-44b6-a758-c45c3c685997"))
IMathObjContext : IMathItem
{
    //
    // Property data
    //

    __declspec(property(get=GetMathObject))
    IMathObjectPtr MathObject;

    //
    // Wrapper methods for error-handling
    //

    IMathObjectPtr GetMathObject ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MathObject (
        /*[out,retval]*/ struct IMathObject * * Value ) = 0;
};

struct __declspec(uuid("0c418a3e-cdf3-4f89-b28b-8d63aca8398f"))
IMathChannel : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDefaultMin,put=PutDefaultMin))
    double DefaultMin;
    __declspec(property(get=GetDefaultMax,put=PutDefaultMax))
    double DefaultMax;
    __declspec(property(get=GetDefaultRes,put=PutDefaultRes))
    long DefaultRes;
    __declspec(property(get=GetMathObject))
    IMathObjectPtr MathObject;

    //
    // Wrapper methods for error-handling
    //

    double GetDefaultMin ( );
    void PutDefaultMin (
        double Value );
    double GetDefaultMax ( );
    void PutDefaultMax (
        double Value );
    long GetDefaultRes ( );
    void PutDefaultRes (
        long Value );
    IMathObjectPtr GetMathObject ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DefaultMin (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_DefaultMin (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_DefaultMax (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_DefaultMax (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_DefaultRes (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_DefaultRes (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_MathObject (
        /*[out,retval]*/ struct IMathObject * * Value ) = 0;
};

struct __declspec(uuid("154b310e-83cd-4d67-bdb6-e5073b56fcfa"))
IInputSlot : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetInputGroup,put=PutInputGroup))
    IInputGroupPtr InputGroup;
    __declspec(property(get=GetSlotType))
    long SlotType;
    __declspec(property(get=GetIndentLevel,put=PutIndentLevel))
    long IndentLevel;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetIsStatic,put=PutIsStatic))
    VARIANT_BOOL IsStatic;
    __declspec(property(get=GetIsOptional,put=PutIsOptional))
    VARIANT_BOOL IsOptional;
    __declspec(property(get=GetTag,put=PutTag))
    _bstr_t Tag;
    __declspec(property(get=GetGroupTag,put=PutGroupTag))
    _bstr_t GroupTag;
    __declspec(property(get=GetActive,put=PutActive))
    VARIANT_BOOL Active;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetInputDescription))
    _bstr_t InputDescription;
    __declspec(property(get=GetLongInputDescription))
    _bstr_t LongInputDescription;
    __declspec(property(put=PutOnAcceptChannel))
    IAcceptChannelPtr OnAcceptChannel;
    __declspec(property(put=PutOnAcceptGroup))
    IAcceptGroupPtr OnAcceptGroup;
    __declspec(property(get=GetInputCh,put=PutInputCh))
    IInputChPtr InputCh;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    void PutName (
        _bstr_t Value );
    VARIANT_BOOL GetIsStatic ( );
    void PutIsStatic (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetIsOptional ( );
    void PutIsOptional (
        VARIANT_BOOL Value );
    _bstr_t GetTag ( );
    void PutTag (
        _bstr_t Value );
    _bstr_t GetGroupTag ( );
    void PutGroupTag (
        _bstr_t Value );
    VARIANT_BOOL GetActive ( );
    void PutActive (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL Value );
    _bstr_t GetInputDescription ( );
    _bstr_t GetLongInputDescription ( );
    HRESULT Clear ( );
    VARIANT_BOOL IsAssigned ( );
    VARIANT_BOOL HasDescriptor ( );
    void PutOnAcceptChannel (
        struct IAcceptChannel * _arg1 );
    void PutOnAcceptGroup (
        struct IAcceptGroup * _arg1 );
    IInputChPtr GetInputCh ( );
    void PutInputCh (
        struct IInputCh * Value );
    IInputGroupPtr GetInputGroup ( );
    void PutInputGroup (
        struct IInputGroup * Value );
    long GetSlotType ( );
    VARIANT_BOOL SendMessageEvent (
        _bstr_t MsgHeader,
        _bstr_t MsgData,
        BSTR * MsgOut );
    long GetIndentLevel ( );
    void PutIndentLevel (
        long Value );
    HRESULT SetChannel (
        struct IChannel * Value,
        long Ind );
    IChannelPtr GetChannel ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_IsStatic (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_IsStatic (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_IsOptional (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_IsOptional (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Tag (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_Tag (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_GroupTag (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_GroupTag (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_Active (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Active (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_InputDescription (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall get_LongInputDescription (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall raw_IsAssigned (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall raw_HasDescriptor (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_OnAcceptChannel (
        /*[in]*/ struct IAcceptChannel * _arg1 ) = 0;
      virtual HRESULT __stdcall put_OnAcceptGroup (
        /*[in]*/ struct IAcceptGroup * _arg1 ) = 0;
      virtual HRESULT __stdcall get_InputCh (
        /*[out,retval]*/ struct IInputCh * * Value ) = 0;
      virtual HRESULT __stdcall put_InputCh (
        /*[in]*/ struct IInputCh * Value ) = 0;
      virtual HRESULT __stdcall get_InputGroup (
        /*[out,retval]*/ struct IInputGroup * * Value ) = 0;
      virtual HRESULT __stdcall put_InputGroup (
        /*[in]*/ struct IInputGroup * Value ) = 0;
      virtual HRESULT __stdcall get_SlotType (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_SendMessageEvent (
        /*[in]*/ BSTR MsgHeader,
        /*[in]*/ BSTR MsgData,
        /*[out]*/ BSTR * MsgOut,
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall get_IndentLevel (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_IndentLevel (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetChannel (
        /*[in]*/ struct IChannel * Value,
        /*[in]*/ long Ind ) = 0;
      virtual HRESULT __stdcall raw_GetChannel (
        /*[out,retval]*/ struct IChannel * * Value ) = 0;
};

struct __declspec(uuid("a4302d26-b5c4-4a54-b1ba-d46cf4be3769"))
IInputSlots : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetItems))
    IInputSlotPtr Items[];
    __declspec(property(get=GetActiveCount))
    long ActiveCount;

    //
    // Wrapper methods for error-handling
    //

    IInputSlotPtr AddSlotByTag (
        _bstr_t Tag );
    IInputSlotPtr AddSlot (
        VARIANT_BOOL Extending );
    IInputSlotPtr InsertSlot (
        long Index );
    IInputSlotPtr FindOrAddSlot (
        _bstr_t Tag );
    VARIANT_BOOL HasEmptySlot ( );
    long GetUsedSlots ( );
    IInputSlotPtr GetFirstUsedSlot ( );
    long GetFirstUsedIndex ( );
    IInputSlotPtr GetLastUsedSlot ( );
    long FindChannel (
        struct IChannel * Channel );
    VARIANT_BOOL HasSyncChannels ( );
    HRESULT Save ( );
    HRESULT Restore ( );
    long FindInput (
        struct IInputSlot * Input );
    long FindByTag (
        _bstr_t Tag );
    IInputSlotPtr FindSlotByTag (
        _bstr_t Tag );
    HRESULT ClearSlotsInGroup (
        struct IInputSlot * Input );
    _bstr_t ToString ( );
    IInputSlotPtr GetItems (
        long Index );
    long GetActiveCount ( );
    long GetCount ( );
    HRESULT Delete (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AddSlotByTag (
        /*[in]*/ BSTR Tag,
        /*[out,retval]*/ struct IInputSlot * * Value ) = 0;
      virtual HRESULT __stdcall raw_AddSlot (
        /*[in]*/ VARIANT_BOOL Extending,
        /*[out,retval]*/ struct IInputSlot * * Value ) = 0;
      virtual HRESULT __stdcall raw_InsertSlot (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IInputSlot * * Value ) = 0;
      virtual HRESULT __stdcall raw_FindOrAddSlot (
        /*[in]*/ BSTR Tag,
        /*[out,retval]*/ struct IInputSlot * * Value ) = 0;
      virtual HRESULT __stdcall raw_HasEmptySlot (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall raw_GetUsedSlots (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_GetFirstUsedSlot (
        /*[out,retval]*/ struct IInputSlot * * Value ) = 0;
      virtual HRESULT __stdcall raw_GetFirstUsedIndex (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_GetLastUsedSlot (
        /*[out,retval]*/ struct IInputSlot * * Value ) = 0;
      virtual HRESULT __stdcall raw_FindChannel (
        /*[in]*/ struct IChannel * Channel,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_HasSyncChannels (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall raw_Save ( ) = 0;
      virtual HRESULT __stdcall raw_Restore ( ) = 0;
      virtual HRESULT __stdcall raw_FindInput (
        /*[in]*/ struct IInputSlot * Input,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_FindByTag (
        /*[in]*/ BSTR Tag,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_FindSlotByTag (
        /*[in]*/ BSTR Tag,
        /*[out,retval]*/ struct IInputSlot * * Value ) = 0;
      virtual HRESULT __stdcall raw_ClearSlotsInGroup (
        /*[in]*/ struct IInputSlot * Input ) = 0;
      virtual HRESULT __stdcall raw_ToString (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall get_Items (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IInputSlot * * Value ) = 0;
      virtual HRESULT __stdcall get_ActiveCount (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in]*/ long Index ) = 0;
};

struct __declspec(uuid("7223209c-7bb1-44f6-a7d1-9be1a0ad40e9"))
IAcceptChannel : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL Call (
        struct IInputSlot * Slot,
        struct IInputCh * InputCh );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Call (
        /*[in]*/ struct IInputSlot * Slot,
        /*[in]*/ struct IInputCh * InputCh,
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
};

struct __declspec(uuid("5792b1cb-b287-46a7-ae1b-ddba565035bb"))
IAcceptGroup : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL Call (
        struct IInputSlot * Slot,
        struct IInputGroup * Group );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Call (
        /*[in]*/ struct IInputSlot * Slot,
        /*[in]*/ struct IInputGroup * Group,
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
};

//
// Named GUID constants initializations
//

extern "C" const GUID __declspec(selectany) LIBID_DEWESoft =
    {0x96d9b72c,0x93f3,0x4d0c,{0x90,0xbb,0x14,0x66,0x84,0x51,0x56,0xef}};
extern "C" const GUID __declspec(selectany) DIID_IAppEvents =
    {0xc15bab67,0x52bb,0x4664,{0x8c,0x9d,0xe8,0xcc,0x1a,0x1a,0x4c,0x44}};
extern "C" const GUID __declspec(selectany) CLSID_App =
    {0x58a7d77d,0x64f1,0x4db8,{0xa6,0xcb,0xf2,0xb4,0xca,0xb8,0x40,0x56}};
extern "C" const GUID __declspec(selectany) IID_IScreen =
    {0x8262475b,0x8f95,0x4917,{0xa3,0x39,0xa3,0x43,0xcb,0x5d,0x50,0x65}};
extern "C" const GUID __declspec(selectany) IID_IScreens =
    {0xa3923065,0x75e3,0x4dfb,{0xb0,0x49,0x5c,0xcb,0x98,0x1c,0x15,0xf3}};
extern "C" const GUID __declspec(selectany) IID_IMasterClock =
    {0x254bf4b3,0xcf9c,0x49a3,{0x8f,0x75,0x7c,0xe3,0x5e,0xf0,0x1a,0x5d}};
extern "C" const GUID __declspec(selectany) IID_IAISetupScreen =
    {0x56102555,0x9e45,0x4ae6,{0xb3,0xbe,0xa4,0xd7,0xf8,0x30,0x29,0x6e}};
extern "C" const GUID __declspec(selectany) IID_IDaqChannel =
    {0x158b5c24,0xcf4d,0x4edf,{0xb2,0xc8,0x68,0xd4,0x6a,0x5c,0xd6,0x76}};
extern "C" const GUID __declspec(selectany) IID_IVideoLoadEngine =
    {0x0e036530,0xb449,0x4ebc,{0xaf,0x84,0xfb,0x2c,0xa6,0x67,0x57,0x35}};
extern "C" const GUID __declspec(selectany) IID_IVideoLoadEngines =
    {0x87d35b4c,0x8fa5,0x4080,{0x9c,0xde,0xac,0x49,0xca,0xda,0x92,0xc5}};
extern "C" const GUID __declspec(selectany) IID_IPadData =
    {0x97ff1354,0xfd61,0x4339,{0x94,0xc9,0xb3,0x66,0x91,0x41,0x0c,0x4e}};
extern "C" const GUID __declspec(selectany) IID_IDaqData =
    {0x129fc1e1,0x2091,0x4789,{0x97,0x8b,0xfa,0xa0,0x5f,0x25,0x92,0x60}};
extern "C" const GUID __declspec(selectany) IID_IModule =
    {0xda7bd5dc,0xc815,0x4471,{0xad,0xa6,0x8b,0x7b,0xe9,0x12,0x6e,0x1f}};
extern "C" const GUID __declspec(selectany) IID_IModules =
    {0xb37a70cb,0x5b08,0x490a,{0xae,0x57,0x3d,0x75,0xf1,0xc5,0x9b,0x1c}};
extern "C" const GUID __declspec(selectany) IID_IAveragedFFT =
    {0x82d459fe,0xbc05,0x4ff2,{0x85,0x97,0x74,0xbb,0x45,0x01,0x06,0x08}};
extern "C" const GUID __declspec(selectany) IID_INothing =
    {0xd7050b91,0x6a5d,0x4228,{0x93,0x78,0x00,0x21,0x32,0x5c,0x81,0x5c}};
extern "C" const GUID __declspec(selectany) IID_IPluginLicense =
    {0x20627eb4,0xd51b,0x4267,{0xa6,0xcb,0x8c,0x86,0x11,0x2e,0x75,0x02}};
extern "C" const GUID __declspec(selectany) IID_IDaqGroup =
    {0xfc698ce1,0x0973,0x498a,{0xaa,0x6b,0x2f,0x82,0x83,0x0b,0xe3,0xa6}};
extern "C" const GUID __declspec(selectany) IID_IFileNameSettings =
    {0xceb1a90b,0xd594,0x47b5,{0xa1,0x54,0xbb,0x7b,0x46,0x03,0xac,0xa2}};
extern "C" const GUID __declspec(selectany) IID_IPluginChannel =
    {0xe39d43bc,0xbfb8,0x4d48,{0xaf,0x5b,0x53,0xeb,0xa5,0x5c,0x88,0x17}};
extern "C" const GUID __declspec(selectany) IID_IDiscreteItem =
    {0x04242cbe,0xcf38,0x4a86,{0xb5,0x4b,0xd7,0x8a,0x9b,0x64,0xe0,0xfb}};
extern "C" const GUID __declspec(selectany) IID_IDiscreteList =
    {0x53330bbc,0x6b11,0x4805,{0x8c,0x41,0x48,0xb1,0x30,0x47,0xdc,0x42}};
extern "C" const GUID __declspec(selectany) IID_IGHObject =
    {0xb2fdbf74,0x7a7d,0x4be1,{0xbf,0xdc,0x59,0xf3,0x64,0xf3,0x20,0xdc}};
extern "C" const GUID __declspec(selectany) IID_IGlobalHeader =
    {0x14bb3a33,0xf7a5,0x4656,{0x8c,0x94,0x3b,0x52,0x9d,0x73,0x06,0xb0}};
extern "C" const GUID __declspec(selectany) IID_ITiming =
    {0xf8f34a4f,0xcbad,0x4240,{0x9d,0xaf,0xc2,0x26,0x28,0x2b,0x86,0x15}};
extern "C" const GUID __declspec(selectany) IID_IDewePlugin =
    {0x5c45f430,0xee53,0x49dc,{0x93,0x5b,0x36,0x31,0x4a,0x52,0xd4,0x38}};
extern "C" const GUID __declspec(selectany) IID_IPluginChannelXMLHelper =
    {0xe3638e01,0xed8e,0x40c4,{0xba,0xac,0xd0,0x0b,0x5b,0x02,0x3e,0xa7}};
extern "C" const GUID __declspec(selectany) IID_IRegistrationHelper =
    {0x5649e2dc,0x2ef0,0x4d1d,{0x8e,0x23,0x2a,0x0d,0xc0,0x41,0xd0,0xa5}};
extern "C" const GUID __declspec(selectany) IID_IAmplifier =
    {0x39f60bb4,0x26eb,0x47c1,{0x88,0x4a,0xd1,0x01,0x14,0xfa,0x06,0xe7}};
extern "C" const GUID __declspec(selectany) IID_IAmplChain =
    {0x24428804,0x6902,0x4cc5,{0x80,0x8c,0x86,0xb3,0x62,0x41,0x4b,0xda}};
extern "C" const GUID __declspec(selectany) IID_IAmplChainList =
    {0x01c5e234,0xc56d,0x4fa3,{0x8c,0x77,0xe1,0xad,0x04,0x84,0x79,0x0d}};
extern "C" const GUID __declspec(selectany) IID_IAmplInterface =
    {0x40aadaed,0xbcc1,0x4134,{0xb1,0x54,0xde,0x6e,0x01,0x6d,0xe7,0x03}};
extern "C" const GUID __declspec(selectany) IID_IAmplInterfaces =
    {0x2e02870e,0x2b86,0x40be,{0xba,0xd3,0x1f,0xf6,0xff,0x4d,0x03,0xc9}};
extern "C" const GUID __declspec(selectany) IID_IImportChannel =
    {0xb05e7b8b,0x09a8,0x418e,{0x8b,0x32,0x92,0x2b,0xd7,0x29,0xf1,0xad}};
extern "C" const GUID __declspec(selectany) IID_IPluginLicense2 =
    {0x06ed52b2,0x5a28,0x4564,{0x99,0xce,0x10,0xed,0x7a,0x82,0xf9,0x33}};
extern "C" const GUID __declspec(selectany) IID_IOfflineCalc =
    {0x6d30b59f,0x0060,0x40db,{0xb6,0xb2,0x7f,0x87,0x46,0x5c,0xe3,0xb7}};
extern "C" const GUID __declspec(selectany) IID_ICustomDAQ2 =
    {0x062c4672,0xb1c5,0x43fa,{0x8c,0x77,0x62,0xc1,0xdc,0xb9,0x28,0xf0}};
extern "C" const GUID __declspec(selectany) IID_IDigitalTrigLevel =
    {0xc58c7b68,0xe2f7,0x478a,{0xac,0xf7,0x11,0xb8,0xd6,0xa1,0x65,0x09}};
extern "C" const GUID __declspec(selectany) IID_ISyncSource =
    {0xaa6c3d58,0xed6d,0x4529,{0xaa,0xf8,0xec,0xb0,0xa6,0x82,0xa2,0x70}};
extern "C" const GUID __declspec(selectany) IID_ICANMsg =
    {0x1d828c6f,0x8559,0x4000,{0x84,0xb1,0x57,0x04,0x51,0x54,0x17,0x53}};
extern "C" const GUID __declspec(selectany) IID_ICANPortContext =
    {0x953fd7c5,0xa46c,0x4f92,{0xa2,0x29,0x22,0x0a,0x12,0xa1,0xa1,0x15}};
extern "C" const GUID __declspec(selectany) IID_ICANContext =
    {0x6dd0e754,0x22ab,0x4687,{0x8f,0xd4,0x28,0xd9,0x47,0x5c,0xd0,0x2c}};
extern "C" const GUID __declspec(selectany) IID_IProjectManager =
    {0x0ab26cc9,0x1f8f,0x4289,{0x9f,0x0e,0x6f,0xb4,0x2b,0xa4,0xca,0xc0}};
extern "C" const GUID __declspec(selectany) IID_IDIPort =
    {0xcc93ddf0,0xd660,0x47bf,{0x97,0xd8,0x36,0x8a,0xfc,0xe0,0xa6,0xbe}};
extern "C" const GUID __declspec(selectany) IID_IDIGroup =
    {0xa727cf4a,0xfbaf,0x45f6,{0xbc,0x6a,0x8a,0x58,0xe0,0x5a,0xeb,0x3f}};
extern "C" const GUID __declspec(selectany) IID_IDIChannel =
    {0x1a6efdac,0x300e,0x40d7,{0x8a,0x4e,0x0f,0x4c,0x37,0x09,0x93,0xdd}};
extern "C" const GUID __declspec(selectany) IID_IVideoFrame =
    {0x999f8e10,0xec80,0x4d2a,{0xa7,0x85,0xc1,0xfd,0x3c,0xb8,0x7f,0x22}};
extern "C" const GUID __declspec(selectany) IID_ICamera =
    {0xc102fc8b,0xbfde,0x4d2f,{0x95,0x4c,0x06,0x2c,0xf1,0x9e,0xaa,0x6b}};
extern "C" const GUID __declspec(selectany) IID_IVideo =
    {0x85163d18,0x0a7e,0x4844,{0x93,0xeb,0xf9,0xa0,0xc4,0xc4,0x39,0x68}};
extern "C" const GUID __declspec(selectany) IID_IViewInfo =
    {0xdaa5f907,0x902b,0x4d5b,{0x98,0x2b,0x4a,0xfc,0xb1,0x91,0xee,0xb1}};
extern "C" const GUID __declspec(selectany) IID_ILockableCursor =
    {0x4e5157c0,0xcb61,0x4a6e,{0x81,0x83,0xe4,0xd7,0x47,0x56,0x8c,0x21}};
extern "C" const GUID __declspec(selectany) IID_ILockableCursors =
    {0xb2ede09d,0xd64b,0x4ef2,{0xae,0xfd,0x69,0x45,0xa7,0x6d,0xfa,0xc4}};
extern "C" const GUID __declspec(selectany) IID_IMathItem2 =
    {0x83054c30,0x0f5b,0x433d,{0x98,0x63,0xe5,0x21,0xc5,0xca,0x25,0x4b}};
extern "C" const GUID __declspec(selectany) IID_IDwXMLNode =
    {0x44a1b53f,0x7d56,0x41dd,{0xa6,0x54,0x17,0xd9,0xb6,0x38,0xb7,0x7c}};
extern "C" const GUID __declspec(selectany) IID_ISequencer =
    {0xf9c98ee1,0x7c70,0x43b6,{0xb7,0x57,0x6f,0xdc,0x23,0xcc,0x58,0xad}};
extern "C" const GUID __declspec(selectany) IID_IVariableChannel =
    {0xaee49e04,0x2a77,0x4647,{0xb3,0x9c,0x99,0xff,0x64,0xb3,0x84,0xd9}};
extern "C" const GUID __declspec(selectany) IID_IUIHelper =
    {0xfa9adfd0,0x98d2,0x483e,{0xbb,0x09,0x59,0x1c,0xfb,0x63,0x4b,0x01}};
extern "C" const GUID __declspec(selectany) IID_IMeasUnit =
    {0x70a1113c,0x15c8,0x45df,{0xad,0x86,0x7a,0xcb,0xfb,0x11,0xb3,0xda}};
extern "C" const GUID __declspec(selectany) IID_IRemoteManager =
    {0x0d7aa807,0xa31e,0x4096,{0xb5,0x2a,0xdf,0x59,0x7c,0x05,0x35,0x87}};
extern "C" const GUID __declspec(selectany) IID_IVCProperty =
    {0xceb5afb5,0x7ac3,0x4115,{0xb6,0x0b,0xb3,0x32,0x2b,0x19,0xf5,0xd1}};
extern "C" const GUID __declspec(selectany) IID_IVCIntegerProperty =
    {0x6f818df3,0x5fb4,0x413b,{0xa4,0xc7,0x0e,0x73,0x4a,0xcd,0x7a,0xc4}};
extern "C" const GUID __declspec(selectany) IID_IVCColorProperty =
    {0x61b5989d,0x5b64,0x42a0,{0xbc,0x43,0x63,0x1c,0x9c,0x69,0x99,0xe7}};
extern "C" const GUID __declspec(selectany) IID_IVCFloatProperty =
    {0xa5ea1e02,0xf560,0x4db9,{0xa8,0x5d,0xa7,0xed,0x8b,0xe5,0xfa,0xe5}};
extern "C" const GUID __declspec(selectany) IID_IVCTextProperty =
    {0xfdb7daea,0xa9ea,0x4809,{0x91,0x01,0xa5,0x3e,0x57,0xe3,0x76,0x6b}};
extern "C" const GUID __declspec(selectany) IID_IVCSelectProperty =
    {0x332dd867,0xfe98,0x4284,{0x91,0x84,0x5c,0x4a,0x04,0xe6,0x1b,0xe8}};
extern "C" const GUID __declspec(selectany) IID_IVCCheckBoxProperty =
    {0x693fc2c1,0xab56,0x4d99,{0xba,0x5a,0x50,0x8b,0x19,0x56,0xc2,0xea}};
extern "C" const GUID __declspec(selectany) IID_IAcqLoop =
    {0x01451b04,0xcf12,0x4183,{0x96,0x81,0x47,0xd5,0x95,0x63,0xf6,0xfa}};
extern "C" const GUID __declspec(selectany) IID_IVCSearchProperty =
    {0x741407bd,0x5878,0x42b6,{0x8d,0xe3,0x30,0x46,0x8e,0xab,0x47,0xe4}};
extern "C" const GUID __declspec(selectany) IID_IVCPropertiesGroup =
    {0x46d31c0c,0x521f,0x4e84,{0xbf,0x6d,0x05,0x51,0xce,0xe2,0xc9,0x23}};
extern "C" const GUID __declspec(selectany) IID_IVCProperties =
    {0x48b39869,0x9b9a,0x4d13,{0x87,0x63,0xa5,0x95,0xb4,0x15,0x5c,0x57}};
extern "C" const GUID __declspec(selectany) IID_IResamplerChannel =
    {0x317f5d39,0x7aea,0x46fc,{0x93,0x98,0xcb,0x96,0xd9,0x78,0xd7,0x3d}};
extern "C" const GUID __declspec(selectany) IID_IRTModule =
    {0x2525da0a,0xb39e,0x48de,{0xa4,0xb7,0x48,0xe0,0xf6,0x37,0xa0,0xc5}};
extern "C" const GUID __declspec(selectany) IID_IRTCore =
    {0x908cbc49,0xc871,0x4622,{0xa0,0x41,0x62,0x83,0x1e,0x4b,0x1c,0x26}};
extern "C" const GUID __declspec(selectany) IID_IReport =
    {0x8349dfe4,0x587a,0x429c,{0xbc,0xb7,0xe3,0x77,0x50,0x5f,0xc3,0xa4}};
extern "C" const GUID __declspec(selectany) IID_IGenericBitmap =
    {0xe67e5bf0,0x5dbd,0x4619,{0x9c,0x37,0x9c,0xd0,0x1d,0x70,0x13,0x87}};
extern "C" const GUID __declspec(selectany) IID_IGDIBitmap =
    {0x1515619c,0xfe53,0x4a69,{0x80,0x3e,0x70,0x7b,0x13,0x1b,0x66,0xd6}};
extern "C" const GUID __declspec(selectany) IID_IStoreEngine =
    {0x97c5783f,0x0b84,0x47d9,{0x82,0x94,0x9f,0x33,0xb2,0x73,0x90,0x76}};
extern "C" const GUID __declspec(selectany) IID_IAOChannel =
    {0xc6e7dd46,0x7bca,0x42f3,{0x9a,0xc7,0x00,0x77,0xd1,0x9d,0x4e,0xcf}};
extern "C" const GUID __declspec(selectany) IID_IPlugin4 =
    {0xbea4a4fb,0x010a,0x4d58,{0x91,0x40,0x72,0x97,0x83,0xed,0x0f,0x99}};
extern "C" const GUID __declspec(selectany) IID_IPowerModule =
    {0xc4a25fdc,0x9f2e,0x413d,{0x9e,0xc8,0x8d,0xf4,0x3b,0xd2,0x10,0xca}};
extern "C" const GUID __declspec(selectany) IID_IPowerModules =
    {0x2cd91570,0x4eef,0x4ab9,{0xa2,0x4c,0xd3,0xc6,0x63,0xb4,0xf5,0xb1}};
extern "C" const GUID __declspec(selectany) IID_ICustomExport3 =
    {0x947bf399,0x9ef8,0x4417,{0xa5,0xc0,0xd5,0xcc,0xd7,0x9a,0x0b,0x14}};
extern "C" const GUID __declspec(selectany) IID_ISetupMessages =
    {0xf1dd1197,0xa2c6,0x478a,{0x84,0x0c,0xb2,0x26,0x86,0x4b,0x11,0xd3}};
extern "C" const GUID __declspec(selectany) IID_IDwXMLDocument =
    {0x83ba9c2d,0xf71f,0x476f,{0xab,0x58,0x27,0xb8,0x03,0x28,0xd7,0x3c}};
extern "C" const GUID __declspec(selectany) IID_IProperties =
    {0xdbb2d89c,0x443b,0x4abf,{0x83,0x8e,0x27,0xcd,0xea,0x6e,0x42,0x4c}};
extern "C" const GUID __declspec(selectany) IID_IInputGroup =
    {0x74e73f54,0xf623,0x4271,{0x80,0x71,0xd3,0xe7,0x15,0xb9,0xef,0x70}};
extern "C" const GUID __declspec(selectany) IID_IInputGroups =
    {0x185eb8a2,0x805f,0x4b63,{0xa1,0xfc,0xbb,0xee,0x49,0xa6,0x93,0x37}};
extern "C" const GUID __declspec(selectany) IID_IXMLHelper =
    {0xff17d484,0xf89e,0x4bbe,{0xb9,0x8d,0x16,0xba,0x39,0x01,0x13,0xa3}};
extern "C" const GUID __declspec(selectany) IID_IPermission =
    {0xb1e6cc98,0xe25d,0x4345,{0xab,0x33,0x17,0x88,0x74,0xef,0x5e,0x3a}};
extern "C" const GUID __declspec(selectany) IID_ISynchronization =
    {0xd0817355,0xada8,0x4495,{0x8f,0x78,0x9c,0xec,0x87,0x07,0x9f,0x31}};
extern "C" const GUID __declspec(selectany) IID_IDeviceNode =
    {0xd5e34dae,0xa4bb,0x43cb,{0x8d,0x4e,0xc2,0x4d,0x7a,0x08,0x8b,0x59}};
extern "C" const GUID __declspec(selectany) IID_ICanvasPen =
    {0xdafc614c,0x558e,0x4a51,{0xa5,0xc9,0xa4,0xba,0x46,0x74,0x29,0xb7}};
extern "C" const GUID __declspec(selectany) IID_ICanvasBrush =
    {0xc2336c94,0xefd4,0x4ef9,{0xa9,0x82,0x61,0x6f,0x23,0x11,0x46,0x8f}};
extern "C" const GUID __declspec(selectany) IID_ICanvasFont =
    {0x48d1b1fc,0x2c76,0x4c54,{0x8e,0x3c,0xad,0x9f,0xf9,0xc7,0xa9,0x19}};
extern "C" const GUID __declspec(selectany) IID_ICanvas =
    {0xf54b3bb3,0xa3a5,0x461a,{0xa5,0x24,0xf4,0x16,0xf1,0x08,0x25,0xde}};
extern "C" const GUID __declspec(selectany) IID_IRTModuleLoader =
    {0x6cba1a35,0x3f2d,0x4736,{0x8e,0xa2,0xae,0x71,0x4d,0x17,0x7a,0x17}};
extern "C" const GUID __declspec(selectany) IID_IMarkerObject =
    {0x8e644726,0x47e1,0x47db,{0xb6,0x5d,0x3a,0x73,0x4b,0x91,0x13,0x01}};
extern "C" const GUID __declspec(selectany) IID_IMarkerInput =
    {0x148514f1,0xa09f,0x4201,{0x9c,0x8c,0x82,0x67,0x11,0x25,0x86,0xfa}};
extern "C" const GUID __declspec(selectany) IID_IPairedValueMarkerInput =
    {0x77c5b419,0x4d13,0x4b28,{0x81,0x26,0x4f,0x3f,0xc0,0x59,0x31,0x95}};
extern "C" const GUID __declspec(selectany) IID_ISingleValueMarkerInput =
    {0xe0ff8031,0x73cb,0x4b3b,{0x9c,0x3c,0xe9,0x58,0x14,0x88,0xa9,0xc9}};
extern "C" const GUID __declspec(selectany) IID_IMarkerObjectsList =
    {0xf0bbcaa5,0xaba4,0x4a34,{0x97,0x60,0x6d,0xbb,0xe0,0x4e,0xc6,0xab}};
extern "C" const GUID __declspec(selectany) IID_IRTCPropertyInfo =
    {0xea09a4c1,0xdb94,0x434a,{0xa8,0x3c,0xb0,0x21,0x2d,0xab,0x37,0xbe}};
extern "C" const GUID __declspec(selectany) IID_IRTCPropertiesInfo =
    {0xd111aa85,0x8c13,0x41ce,{0x9a,0xc7,0x7b,0x1b,0xb9,0x23,0xb0,0xc0}};
extern "C" const GUID __declspec(selectany) IID_IRTCModule =
    {0x81c0a81f,0xd7a5,0x46fd,{0xb4,0x60,0xe7,0x53,0xda,0x4e,0x92,0x92}};
extern "C" const GUID __declspec(selectany) IID_IRTCModules =
    {0x6add4b81,0x50fb,0x49ad,{0x83,0xd0,0x4b,0x45,0xad,0x81,0x51,0xb8}};
extern "C" const GUID __declspec(selectany) IID_IRTCController =
    {0xf60fc481,0xba79,0x44f1,{0xbe,0x38,0x7e,0x3c,0x09,0x36,0xab,0x81}};
extern "C" const GUID __declspec(selectany) IID_IRTCControllers =
    {0xd91f9d72,0x0565,0x4db5,{0xb8,0x29,0xf8,0x31,0xbc,0xe6,0x38,0xe0}};
extern "C" const GUID __declspec(selectany) IID_IRTC =
    {0xce7001a4,0x9a02,0x427e,{0xb3,0x8e,0x91,0xfb,0xac,0x57,0xea,0x35}};
extern "C" const GUID __declspec(selectany) IID_ICANPort =
    {0xf560c6ca,0xc5fd,0x4921,{0xae,0x58,0xa4,0xf6,0x9b,0x17,0xa3,0xe9}};
extern "C" const GUID __declspec(selectany) IID_ICAN =
    {0x1d49da44,0xd8ee,0x4cd7,{0x8b,0x62,0xdd,0x4e,0x7b,0x52,0x3b,0x8e}};
extern "C" const GUID __declspec(selectany) IID_IDaq =
    {0xaa2e8a89,0xaadd,0x4b5f,{0x81,0xb9,0xd9,0xf7,0x6b,0xf3,0x5c,0x2a}};
extern "C" const GUID __declspec(selectany) IID_IData =
    {0x45be650b,0x1f90,0x46bf,{0xbc,0x65,0x85,0x3f,0x09,0xa0,0xa2,0x41}};
extern "C" const GUID __declspec(selectany) IID_IChannel =
    {0xcae48a7c,0x581e,0x4c0b,{0xae,0x4f,0x7a,0x2e,0xb8,0x9c,0x0d,0xff}};
extern "C" const GUID __declspec(selectany) IID_IChannelList =
    {0x788183a5,0x1fc0,0x48e8,{0x93,0xec,0xa6,0xee,0x07,0x5a,0x42,0xf9}};
extern "C" const GUID __declspec(selectany) IID_IChannelGroup =
    {0x763e6e43,0x6464,0x4cb8,{0x97,0x01,0xa6,0x45,0xb0,0x60,0xf2,0x16}};
extern "C" const GUID __declspec(selectany) IID_IChannelGroups =
    {0xefc6dff0,0xb694,0x41f8,{0x90,0x5d,0x45,0x61,0x27,0x24,0xbd,0x7d}};
extern "C" const GUID __declspec(selectany) IID_IPluginGroup =
    {0x21b73cc2,0xac60,0x4bab,{0xbe,0xf0,0xfa,0x44,0x53,0x89,0x4e,0xef}};
extern "C" const GUID __declspec(selectany) IID_IDataSection =
    {0x7515b878,0x6b71,0x4020,{0xbf,0xf3,0xb8,0x80,0x45,0x1e,0x16,0x3b}};
extern "C" const GUID __declspec(selectany) IID_IDataSections =
    {0x9289b1ac,0x5753,0x4d6b,{0xb8,0xd6,0x9e,0x98,0x61,0x94,0x87,0x5c}};
extern "C" const GUID __declspec(selectany) IID_ILoadEngine =
    {0xa1114daa,0x8d7f,0x4809,{0x92,0xf9,0xd6,0xc1,0xdc,0xbf,0x5d,0x81}};
extern "C" const GUID __declspec(selectany) IID_IChannelConnection =
    {0x44f950d5,0x4db2,0x4bc8,{0xa6,0x36,0x65,0x3d,0x98,0xcb,0xf6,0x52}};
extern "C" const GUID __declspec(selectany) IID_IChannelGroup2 =
    {0xc0b4dee8,0x073d,0x4e57,{0x9d,0xac,0x8a,0x72,0xcb,0xc6,0xa5,0x1f}};
extern "C" const GUID __declspec(selectany) IID_IAOGroup =
    {0x78087aeb,0xd02b,0x488f,{0x97,0x57,0xba,0x68,0x5d,0x03,0x77,0x1c}};
extern "C" const GUID __declspec(selectany) IID_ITriggerCondition =
    {0x9d97cef7,0x1a44,0x4065,{0x90,0x4a,0x28,0x57,0x50,0x32,0x57,0x2d}};
extern "C" const GUID __declspec(selectany) IID_ITriggerCondList =
    {0x2ca6fa4f,0x0e5c,0x4b4e,{0x9e,0x8f,0xe2,0x41,0xbe,0x14,0xe6,0x22}};
extern "C" const GUID __declspec(selectany) IID_ITrig =
    {0x3e3732b1,0x3146,0x429d,{0x8c,0x33,0xf8,0x9a,0xe5,0xff,0xde,0x92}};
extern "C" const GUID __declspec(selectany) IID_ITrigger =
    {0xb2f13d39,0x72c9,0x497a,{0x8a,0x38,0x9d,0x16,0xdd,0xf6,0xd9,0xf2}};
extern "C" const GUID __declspec(selectany) IID_IAlarmCond =
    {0xa4d0a424,0xae57,0x4d56,{0x94,0x5e,0x3b,0x8d,0x13,0x69,0xdd,0xec}};
extern "C" const GUID __declspec(selectany) IID_IAlarms =
    {0xf785eaad,0x9fbf,0x40a2,{0x85,0x32,0x3a,0xc4,0x6d,0xc8,0xce,0x28}};
extern "C" const GUID __declspec(selectany) IID_IUserInterface =
    {0x5d479bea,0x0369,0x46dc,{0x86,0x68,0xeb,0xec,0xc8,0x3e,0x0b,0x9f}};
extern "C" const GUID __declspec(selectany) IID_IMathItem =
    {0x5db01f14,0xc1ec,0x4b60,{0xa2,0x58,0x59,0x45,0xb0,0x9e,0xb8,0x18}};
extern "C" const GUID __declspec(selectany) IID_IChannelListEx =
    {0x9d693130,0x279e,0x443a,{0xb4,0xca,0x6c,0x2a,0xda,0x91,0x37,0x24}};
extern "C" const GUID __declspec(selectany) IID_IImportGroup =
    {0x9ea5ff19,0x04b2,0x4138,{0x81,0xdb,0x88,0xec,0xda,0xb9,0x5f,0x21}};
extern "C" const GUID __declspec(selectany) IID_ICNTGroup =
    {0x89dc7c60,0x9fce,0x48d3,{0xa7,0x0a,0xeb,0x03,0x5c,0xfc,0x3a,0x44}};
extern "C" const GUID __declspec(selectany) IID_ICntChannel =
    {0x1bffb38d,0x377e,0x4e0a,{0xa6,0x97,0x0e,0x3d,0x25,0xaa,0x76,0x8d}};
extern "C" const GUID __declspec(selectany) IID_ITrigInfo =
    {0xdf31d5d6,0xd4c4,0x47b6,{0x84,0xec,0x73,0xb7,0x48,0xb6,0x7c,0x22}};
extern "C" const GUID __declspec(selectany) IID_IEvent =
    {0x4d89cff3,0x0bfa,0x4ce1,{0xa1,0x7f,0xe4,0x49,0xb5,0xcd,0xa7,0x2e}};
extern "C" const GUID __declspec(selectany) IID_IEventList =
    {0xc30bc69b,0x93bd,0x44c2,{0xaf,0x67,0x95,0xc1,0x28,0x65,0xf8,0xa1}};
extern "C" const GUID __declspec(selectany) IID_IDisplayFrameTemplate =
    {0xe224aecc,0xb2f3,0x42ee,{0xa7,0xc1,0x46,0x50,0xd1,0xa5,0xd7,0x40}};
extern "C" const GUID __declspec(selectany) IID_IDisplayFrameTemplates =
    {0x2af787a0,0xcf72,0x41a2,{0xa0,0xc9,0xd8,0xdc,0x56,0x67,0x63,0x87}};
extern "C" const GUID __declspec(selectany) IID_IDisplayTemplate =
    {0x96a73a79,0xb803,0x4331,{0x92,0x04,0xb2,0x87,0x08,0xf0,0x81,0x1b}};
extern "C" const GUID __declspec(selectany) IID_IIndexChanger =
    {0xb657e514,0x6aa4,0x4b43,{0xaf,0x88,0xd5,0xd4,0xc8,0xb6,0x25,0x1c}};
extern "C" const GUID __declspec(selectany) IID_IAxisViewInfo =
    {0x0850b5b8,0x80c8,0x41a5,{0xa3,0x4d,0x04,0xad,0xfe,0x00,0xa0,0x00}};
extern "C" const GUID __declspec(selectany) IID_IAxisDef =
    {0x7a49908d,0x487a,0x4f85,{0x96,0xf2,0xd5,0x3b,0x74,0x5e,0x91,0xcf}};
extern "C" const GUID __declspec(selectany) IID_IArrayInfo =
    {0x0db0148a,0x639a,0x4adc,{0xb7,0x81,0x21,0x3b,0x14,0xf1,0xf9,0xef}};
extern "C" const GUID __declspec(selectany) IID_IMarkerOutput =
    {0xe499821c,0x932c,0x4f1a,{0x9a,0xc4,0x0a,0x14,0x0a,0xbc,0x99,0xa1}};
extern "C" const GUID __declspec(selectany) IID_IMarkerOwner =
    {0xf5d0f0f2,0x88d6,0x463c,{0x89,0xb4,0x0a,0x2e,0xed,0xac,0x82,0x2c}};
extern "C" const GUID __declspec(selectany) IID_IProcessingMarker =
    {0x52b00a03,0x89c4,0x499f,{0xb8,0xc4,0x29,0xb6,0xed,0xea,0xd1,0x2a}};
extern "C" const GUID __declspec(selectany) IID_IProcessingMarkerList =
    {0xcb6a91bb,0xc4f8,0x46a3,{0xbe,0x89,0xe0,0xd4,0xfa,0xcf,0xfd,0xd3}};
extern "C" const GUID __declspec(selectany) IID_IInputCh =
    {0xd590c57b,0x41c9,0x40fa,{0x9d,0x27,0x9f,0x82,0xeb,0xfc,0x75,0xcd}};
extern "C" const GUID __declspec(selectany) IID_ICppResamplerEngine =
    {0x8a172d7b,0xa444,0x46fd,{0x81,0x7a,0xf6,0x1a,0x8f,0xfc,0x48,0x0e}};
extern "C" const GUID __declspec(selectany) IID_IApp =
    {0x82d0cab4,0x6b17,0x4810,{0xba,0x3f,0x06,0xc2,0x35,0xe7,0x63,0x66}};
extern "C" const GUID __declspec(selectany) IID_IPlugin =
    {0xf095a7a6,0xc7cc,0x4492,{0xa4,0xf1,0x25,0x59,0x6b,0x54,0xc6,0x73}};
extern "C" const GUID __declspec(selectany) IID_IPlugin2 =
    {0xb06829e7,0x7afc,0x4921,{0xb5,0x30,0x6e,0xcb,0xe2,0x86,0xc9,0x05}};
extern "C" const GUID __declspec(selectany) IID_ICustomExport =
    {0x66c046ab,0x0518,0x453d,{0x9e,0x52,0x06,0x34,0x05,0x74,0xa1,0xc2}};
extern "C" const GUID __declspec(selectany) IID_IPlugin3 =
    {0x99edf4c9,0x4784,0x4a66,{0xa1,0xca,0x2e,0x39,0x5e,0xc3,0x19,0xd6}};
extern "C" const GUID __declspec(selectany) IID_ICustomExport2 =
    {0x6b0b2596,0xbc6b,0x4c04,{0x81,0x55,0xed,0x28,0x56,0x96,0xda,0x7d}};
extern "C" const GUID __declspec(selectany) IID_ICustomDAQ =
    {0x3a2b361a,0xee1b,0x4ceb,{0x98,0x48,0x2c,0x09,0x82,0xbc,0xac,0x7f}};
extern "C" const GUID __declspec(selectany) IID_IExportFrame =
    {0x0d7e8d61,0x796e,0x47ab,{0x96,0x31,0x2f,0xc8,0x0a,0x5a,0xf2,0x03}};
extern "C" const GUID __declspec(selectany) IID_IVCContext =
    {0xd9d2402a,0x73a9,0x47c3,{0xa1,0x21,0x95,0x1a,0x7e,0xfe,0x4f,0xcf}};
extern "C" const GUID __declspec(selectany) IID_IMathContext =
    {0x9b3ff991,0x2d72,0x4474,{0xa8,0x2d,0x24,0x64,0xd0,0x71,0xa7,0x15}};
extern "C" const GUID __declspec(selectany) IID_IMathFrameContext =
    {0x14c2577b,0x0281,0x475a,{0x93,0x02,0x39,0x4d,0x1f,0xa1,0xb4,0x73}};
extern "C" const GUID __declspec(selectany) IID_IMath =
    {0x6f188a41,0xad92,0x4380,{0xb5,0x60,0x02,0xa0,0x7d,0xda,0x13,0x39}};
extern "C" const GUID __declspec(selectany) IID_IMathObject =
    {0xb5ff31ac,0xf12b,0x4c28,{0xad,0xce,0x14,0x87,0x40,0x43,0xc1,0x0a}};
extern "C" const GUID __declspec(selectany) IID_IMathModule =
    {0xe17a04ba,0xe047,0x4896,{0x89,0x2e,0xa8,0x93,0x7c,0xc2,0x90,0xb6}};
extern "C" const GUID __declspec(selectany) IID_IMathObjContext =
    {0x41315abf,0x26aa,0x44b6,{0xa7,0x58,0xc4,0x5c,0x3c,0x68,0x59,0x97}};
extern "C" const GUID __declspec(selectany) IID_IMathChannel =
    {0x0c418a3e,0xcdf3,0x4f89,{0xb2,0x8b,0x8d,0x63,0xac,0xa8,0x39,0x8f}};
extern "C" const GUID __declspec(selectany) IID_IInputSlot =
    {0x154b310e,0x83cd,0x4d67,{0xbd,0xb6,0xe5,0x07,0x3b,0x56,0xfc,0xfa}};
extern "C" const GUID __declspec(selectany) IID_IInputSlots =
    {0xa4302d26,0xb5c4,0x4a54,{0xb1,0xba,0xd4,0x6c,0xf4,0xbe,0x37,0x69}};
extern "C" const GUID __declspec(selectany) IID_IAcceptChannel =
    {0x7223209c,0x7bb1,0x44f6,{0xa7,0xd1,0x9b,0xe1,0xa0,0xad,0x40,0xe9}};
extern "C" const GUID __declspec(selectany) IID_IAcceptGroup =
    {0x5792b1cb,0xb287,0x46a7,{0xae,0x1b,0xdd,0xba,0x56,0x50,0x35,0xbb}};

//
// Function implementation mapping
//

#pragma start_map_region("c:\users\theoz\onedrive\documents\github\dewesoft_http_data_writer\http_requests\httprequestsplugin\x64\release\intermediate\dewesoft.tli")
__declspec(implementation_key(1)) HRESULT IAppEvents::OnGetData ( );
__declspec(implementation_key(2)) HRESULT IAppEvents::OnStartStoring ( );
__declspec(implementation_key(3)) HRESULT IAppEvents::OnStopStoring ( );
__declspec(implementation_key(4)) HRESULT IAppEvents::OnTrigger ( long Mid, long Dir, double Time );
__declspec(implementation_key(5)) HRESULT IAppEvents::OnException ( _bstr_t Str );
__declspec(implementation_key(6)) HRESULT IAppEvents::OnTriggerStop ( long Mid, long Dir, double Time );
__declspec(implementation_key(7)) HRESULT IAppEvents::OnAlarm ( long CondIndex, VARIANT_BOOL Status );
__declspec(implementation_key(8)) HRESULT IAppEvents::OnExit ( );
__declspec(implementation_key(9)) HRESULT IAppEvents::OnEvent ( enum EventReason Reason, const _variant_t & Param );
__declspec(implementation_key(10)) HRESULT IAppEvents::OnDataLost ( );
__declspec(implementation_key(11)) HRESULT IAppEvents::OnGetTime ( long * TimeLo, long * TimeHi );
__declspec(implementation_key(12)) HRESULT IAppEvents::OnMessageBox ( _bstr_t Tex, _bstr_t Caption, long MsgType, long * Result );
__declspec(implementation_key(13)) HRESULT IAppEvents::OnProgress ( long PercentDone );
__declspec(implementation_key(14)) _bstr_t IScreen::GetName ( );
__declspec(implementation_key(15)) long IScreen::GetId ( );
__declspec(implementation_key(16)) HRESULT IScreen::Show ( );
__declspec(implementation_key(17)) VARIANT_BOOL IScreen::GetIsCurrent ( );
__declspec(implementation_key(18)) HRESULT IScreen::SetCursor ( long ACursor, double Time, VARIANT_BOOL AbsTime );
__declspec(implementation_key(19)) HRESULT IScreen::ZoomIn ( );
__declspec(implementation_key(20)) HRESULT IScreen::ZoomOut ( );
__declspec(implementation_key(21)) double IScreen::GetCursor ( long ACursor, VARIANT_BOOL AbsTime );
__declspec(implementation_key(22)) HRESULT IScreen::AddControl ( long Id );
__declspec(implementation_key(23)) HRESULT IScreen::RemoveControl ( long Index );
__declspec(implementation_key(24)) HRESULT IScreen::AssignChannel ( long ControlIndex, _bstr_t ChannelName );
__declspec(implementation_key(25)) HRESULT IScreen::UnassignChannel ( long ControlIndex, long ControlChannelIndex );
__declspec(implementation_key(26)) _bstr_t IScreen::GetTemplateName ( );
__declspec(implementation_key(27)) VARIANT_BOOL IScreen::IsChannelAssigned ( long ControlIndex, long ControlChannelIndex );
__declspec(implementation_key(28)) HRESULT IScreen::CopyImageToFile ( long Width, long Height, long Background, _bstr_t FileName );
__declspec(implementation_key(29)) long IScreens::GetCount ( );
__declspec(implementation_key(30)) IScreenPtr IScreens::GetItem ( long Index );
__declspec(implementation_key(31)) IUnknownPtr IScreens::Get_NewEnum ( );
__declspec(implementation_key(32)) IScreenPtr IScreens::GetCurrent ( );
__declspec(implementation_key(33)) HRESULT IScreens::FindWidgetByID ( _bstr_t WidgetUniqueID );
__declspec(implementation_key(34)) VARIANT_BOOL IScreens::IsReportGroupOwner ( _bstr_t Datafile, _bstr_t GroupName );
__declspec(implementation_key(35)) double IMasterClock::GetCurrentTime ( );
__declspec(implementation_key(36)) double IMasterClock::GetAcqTime ( );
__declspec(implementation_key(37)) HRESULT IAISetupScreen::ShowChannelSetup ( long ChNo );
__declspec(implementation_key(38)) HRESULT IAISetupScreen::SetColumnVisible ( long ColNo, VARIANT_BOOL Visible );
__declspec(implementation_key(39)) double IDaqChannel::GetCardGain ( );
__declspec(implementation_key(40)) double IDaqChannel::GetCardOffset ( );
__declspec(implementation_key(41)) double IDaqChannel::GetModuleGain ( );
__declspec(implementation_key(42)) double IDaqChannel::GetModuleOffset ( );
__declspec(implementation_key(43)) long IDaqChannel::GetModuleType ( );
__declspec(implementation_key(44)) VARIANT_BOOL IDaqChannel::GetAutoZero ( );
__declspec(implementation_key(45)) void IDaqChannel::PutAutoZero ( VARIANT_BOOL Value );
__declspec(implementation_key(46)) HRESULT IDaqChannel::SetCardGain ( float Gain );
__declspec(implementation_key(47)) unsigned short IDaqChannel::GetBoardOpt ( long Index );
__declspec(implementation_key(48)) long IDaqChannel::GetCardBitResolution ( );
__declspec(implementation_key(49)) float IDaqChannel::GetCustomSensorScale ( );
__declspec(implementation_key(50)) void IDaqChannel::PutCustomSensorScale ( float Value );
__declspec(implementation_key(51)) float IDaqChannel::GetCustomSensorOffset ( );
__declspec(implementation_key(52)) void IDaqChannel::PutCustomSensorOffset ( float Value );
__declspec(implementation_key(53)) HRESULT IDaqChannel::SetBoardOpt ( long Index, unsigned short Used );
__declspec(implementation_key(54)) VARIANT_BOOL IDaqChannel::SetSensor ( _bstr_t SensorName );
__declspec(implementation_key(55)) _bstr_t IDaqChannel::GetSensor ( );
__declspec(implementation_key(56)) _bstr_t IDaqChannel::GetSensorType ( );
__declspec(implementation_key(57)) HRESULT IVideoLoadEngine::GetFramesInfo ( VARIANT * Frames );
__declspec(implementation_key(58)) long IVideoLoadEngines::GetCount ( );
__declspec(implementation_key(59)) IUnknownPtr IVideoLoadEngines::Get_NewEnum ( );
__declspec(implementation_key(60)) IVideoLoadEnginePtr IVideoLoadEngines::GetItem ( long Index );
__declspec(implementation_key(61)) _bstr_t IPadData::GetName ( );
__declspec(implementation_key(62)) short IPadData::GetModuleType ( );
__declspec(implementation_key(63)) short IPadData::GetSpeedCode ( );
__declspec(implementation_key(64)) short IPadData::GetConfigCode ( );
__declspec(implementation_key(65)) _bstr_t IPadData::CopyToString ( );
__declspec(implementation_key(66)) float IPadData::ModuleAmpl ( );
__declspec(implementation_key(67)) float IPadData::ModuleOffset ( );
__declspec(implementation_key(68)) _bstr_t IPadData::CopyUnitToString ( );
__declspec(implementation_key(69)) _bstr_t IPadData::ShortCopyToString ( );
__declspec(implementation_key(70)) float IPadData::GetData ( long Index );
__declspec(implementation_key(71)) short IPadData::GetRangeCode ( );
__declspec(implementation_key(72)) void IPadData::PutRangeCode ( short Value );
__declspec(implementation_key(73)) short IPadData::GetAddress ( );
__declspec(implementation_key(74)) void IPadData::PutAddress ( short Value );
__declspec(implementation_key(75)) _bstr_t IPadData::GetRanges ( long Index );
__declspec(implementation_key(76)) long IPadData::GetRangesCount ( );
__declspec(implementation_key(77)) long IPadData::GetRangeIndex ( long Index );
__declspec(implementation_key(78)) _bstr_t IDaqData::GetName ( );
__declspec(implementation_key(79)) _bstr_t IDaqData::CopyToString ( );
__declspec(implementation_key(80)) _bstr_t IDaqData::ShortCopyToString ( );
__declspec(implementation_key(81)) _bstr_t IDaqData::CopyUnitToString ( );
__declspec(implementation_key(82)) float IDaqData::ModuleAmpl ( );
__declspec(implementation_key(83)) float IDaqData::ModuleOffset ( );
__declspec(implementation_key(84)) short IDaqData::GetAddress ( );
__declspec(implementation_key(85)) void IDaqData::PutAddress ( short Value );
__declspec(implementation_key(86)) unsigned char IDaqData::GetRangeCode ( );
__declspec(implementation_key(87)) void IDaqData::PutRangeCode ( unsigned char Value );
__declspec(implementation_key(88)) unsigned char IDaqData::GetFilterCode ( );
__declspec(implementation_key(89)) void IDaqData::PutFilterCode ( unsigned char Value );
__declspec(implementation_key(90)) unsigned char IDaqData::GetICPInput ( );
__declspec(implementation_key(91)) void IDaqData::PutICPInput ( unsigned char Value );
__declspec(implementation_key(92)) unsigned char IDaqData::GetVRange ( );
__declspec(implementation_key(93)) void IDaqData::PutVRange ( unsigned char Value );
__declspec(implementation_key(94)) unsigned char IDaqData::GetOverflow ( );
__declspec(implementation_key(95)) void IDaqData::PutOverflow ( unsigned char Value );
__declspec(implementation_key(96)) unsigned char IDaqData::GetCurrentSource ( );
__declspec(implementation_key(97)) void IDaqData::PutCurrentSource ( unsigned char Value );
__declspec(implementation_key(98)) unsigned char IDaqData::GetHighpassType ( );
__declspec(implementation_key(99)) void IDaqData::PutHighpassType ( unsigned char Value );
__declspec(implementation_key(100)) unsigned char IDaqData::GetModuleError ( );
__declspec(implementation_key(101)) void IDaqData::PutModuleError ( unsigned char Value );
__declspec(implementation_key(102)) unsigned char IDaqData::GetRemote ( );
__declspec(implementation_key(103)) void IDaqData::PutRemote ( unsigned char Value );
__declspec(implementation_key(104)) _bstr_t IDaqData::GetRanges ( long ARangeCode );
__declspec(implementation_key(105)) long IDaqData::GetRangesCount ( );
__declspec(implementation_key(106)) _bstr_t IDaqData::GetFilters ( unsigned char AFilterCode );
__declspec(implementation_key(107)) long IDaqData::GetFiltersCount ( );
__declspec(implementation_key(108)) short IDaqData::GetModuleType ( );
__declspec(implementation_key(109)) void IDaqData::PutModuleType ( short Value );
__declspec(implementation_key(110)) long IDaqData::GetDaqNNamesCount ( );
__declspec(implementation_key(111)) _bstr_t IDaqData::GetDaqNNames ( short ANameCode );
__declspec(implementation_key(112)) double IDaqData::ThermLinearize ( double InputVoltage );
__declspec(implementation_key(113)) char IDaqData::GetFREQAInputCoupling ( );
__declspec(implementation_key(114)) void IDaqData::PutFREQAInputCoupling ( char Value );
__declspec(implementation_key(115)) char IDaqData::GetFREQAOutputFilter ( );
__declspec(implementation_key(116)) void IDaqData::PutFREQAOutputFilter ( char Value );
__declspec(implementation_key(117)) float IDaqData::GetFREQATriggerLevel ( );
__declspec(implementation_key(118)) void IDaqData::PutFREQATriggerLevel ( float Value );
__declspec(implementation_key(119)) short IModule::GetIndex ( );
__declspec(implementation_key(120)) IPadDataPtr IModule::GetPadData ( );
__declspec(implementation_key(121)) HRESULT IModule::SetPad ( long NewAddress );
__declspec(implementation_key(122)) HRESULT IModule::GetDataPad ( );
__declspec(implementation_key(123)) IDaqDataPtr IModule::GetDaqData ( );
__declspec(implementation_key(124)) VARIANT_BOOL IModule::SetDaq ( );
__declspec(implementation_key(125)) HRESULT IModule::SetDaqAddress ( long Address, long Timeout );
__declspec(implementation_key(126)) VARIANT_BOOL IModule::FillModule ( long Address, long Timeout );
__declspec(implementation_key(127)) HRESULT IModule::DetectModule ( long Address );
__declspec(implementation_key(128)) short IModule::GetModuleType ( );
__declspec(implementation_key(129)) void IModule::PutModuleType ( short Value );
__declspec(implementation_key(130)) HRESULT IModule::ClearModule ( );
__declspec(implementation_key(131)) _bstr_t IModule::GetSerialNumber ( );
__declspec(implementation_key(132)) HRESULT IModule::FREQAFindTriggerLevel ( );
__declspec(implementation_key(133)) HRESULT IModule::SetModule ( long SetType );
__declspec(implementation_key(134)) long IModules::GetCount ( );
__declspec(implementation_key(135)) IUnknownPtr IModules::Get_NewEnum ( );
__declspec(implementation_key(136)) IModulePtr IModules::GetItem ( long Index );
__declspec(implementation_key(137)) long IAveragedFFT::GetAverageType ( );
__declspec(implementation_key(138)) void IAveragedFFT::PutAverageType ( long Value );
__declspec(implementation_key(139)) long IAveragedFFT::GetWindow ( );
__declspec(implementation_key(140)) void IAveragedFFT::PutWindow ( long Value );
__declspec(implementation_key(141)) long IAveragedFFT::GetLines ( );
__declspec(implementation_key(142)) void IAveragedFFT::PutLines ( long Value );
__declspec(implementation_key(143)) long IAveragedFFT::GetAveCount ( );
__declspec(implementation_key(144)) void IAveragedFFT::PutAveCount ( long Value );
__declspec(implementation_key(145)) HRESULT IAveragedFFT::GetData ( long ChNo, long OctaveDivider, long Weighting, long * BandCount, VARIANT * Data );
__declspec(implementation_key(146)) HRESULT IAveragedFFT::GetChannels ( VARIANT * Channels );
__declspec(implementation_key(147)) VARIANT_BOOL IAveragedFFT::CalculateFromPos ( long Mid, long Dir );
__declspec(implementation_key(148)) long IAveragedFFT::GetOverlap ( );
__declspec(implementation_key(149)) void IAveragedFFT::PutOverlap ( long Value );
__declspec(implementation_key(150)) HRESULT IAveragedFFT::GetFFTData ( long ChNo, long Weighting, long DCCutoff, VARIANT * Data );
__declspec(implementation_key(151)) HRESULT IAveragedFFT::GetCPBData ( long ChNo, long OctaveDivider, long Weighting, long * BandCount, VARIANT * Data );
__declspec(implementation_key(152)) HRESULT IAveragedFFT::GetCPBXData ( long ChNo, long OctaveDivider, long Weighting, long * BandCount, VARIANT * Data );
__declspec(implementation_key(153)) long IPluginLicense::GetRegTypeWanted ( );
__declspec(implementation_key(154)) long IPluginLicense::GetTrustedCode ( long Param );
__declspec(implementation_key(155)) _bstr_t IPluginLicense::GetHardwareCode ( );
__declspec(implementation_key(156)) VARIANT_BOOL IPluginLicense::SetLicenseCode ( _bstr_t LicenseCode );
__declspec(implementation_key(157)) long IDaqGroup::GetCount ( );
__declspec(implementation_key(158)) IDaqChannelPtr IDaqGroup::GetItem ( long Index );
__declspec(implementation_key(159)) IUnknownPtr IDaqGroup::Get_NewEnum ( );
__declspec(implementation_key(160)) VARIANT_BOOL IFileNameSettings::GetAutoCreate ( );
__declspec(implementation_key(161)) void IFileNameSettings::PutAutoCreate ( VARIANT_BOOL Value );
__declspec(implementation_key(162)) VARIANT_BOOL IFileNameSettings::GetUseMultiFile ( );
__declspec(implementation_key(163)) void IFileNameSettings::PutUseMultiFile ( VARIANT_BOOL Value );
__declspec(implementation_key(164)) _bstr_t IFileNameSettings::GetBaseFileName ( );
__declspec(implementation_key(165)) void IFileNameSettings::PutBaseFileName ( _bstr_t Value );
__declspec(implementation_key(166)) VARIANT_BOOL IFileNameSettings::GetUseTime ( );
__declspec(implementation_key(167)) void IFileNameSettings::PutUseTime ( VARIANT_BOOL Value );
__declspec(implementation_key(168)) VARIANT_BOOL IFileNameSettings::GetUseDate ( );
__declspec(implementation_key(169)) void IFileNameSettings::PutUseDate ( VARIANT_BOOL Value );
__declspec(implementation_key(170)) short IFileNameSettings::GetAutoFlipFile ( );
__declspec(implementation_key(171)) void IFileNameSettings::PutAutoFlipFile ( short Value );
__declspec(implementation_key(172)) float IFileNameSettings::GetAutoFlipSize ( );
__declspec(implementation_key(173)) void IFileNameSettings::PutAutoFlipSize ( float Value );
__declspec(implementation_key(174)) long IFileNameSettings::GetAutoFlipUnit ( );
__declspec(implementation_key(175)) void IFileNameSettings::PutAutoFlipUnit ( long Value );
__declspec(implementation_key(176)) VARIANT_BOOL IFileNameSettings::GetAutoFlipAbsTime ( );
__declspec(implementation_key(177)) void IFileNameSettings::PutAutoFlipAbsTime ( VARIANT_BOOL Value );
__declspec(implementation_key(178)) long IFileNameSettings::GetMultiFileStartIndex ( );
__declspec(implementation_key(179)) void IFileNameSettings::PutMultiFileStartIndex ( long Value );
__declspec(implementation_key(180)) HRESULT IFileNameSettings::AutoFlipUnits ( _bstr_t PluginGUID, VARIANT * Units );
__declspec(implementation_key(181)) HRESULT IPluginChannel::ReserveMemory ( long DBSize );
__declspec(implementation_key(182)) HRESULT IPluginChannel::FreeMemory ( );
__declspec(implementation_key(183)) HRESULT IPluginChannel::SetIndex ( long Level, const _variant_t & Ind );
__declspec(implementation_key(184)) HRESULT IPluginChannel::SetChNo ( _bstr_t Value );
__declspec(implementation_key(185)) HRESULT IPluginChannel::SetSettings ( _bstr_t Value );
__declspec(implementation_key(186)) _bstr_t IPluginChannel::GetLongName ( );
__declspec(implementation_key(187)) void IPluginChannel::PutLongName ( _bstr_t Value );
__declspec(implementation_key(188)) HRESULT IPluginChannel::MarkAsOffline ( );
__declspec(implementation_key(189)) _bstr_t IPluginChannel::GetPluginGUID ( );
__declspec(implementation_key(190)) long IPluginChannel::GetDefaultRes ( );
__declspec(implementation_key(191)) void IPluginChannel::PutDefaultRes ( long Value );
__declspec(implementation_key(192)) VARIANT_BOOL IPluginChannel::GetAlwaysReserveMemoryInSetup ( );
__declspec(implementation_key(193)) void IPluginChannel::PutAlwaysReserveMemoryInSetup ( VARIANT_BOOL Value );
__declspec(implementation_key(194)) double IPluginChannel::GetDefaultMax ( );
__declspec(implementation_key(195)) void IPluginChannel::PutDefaultMax ( double Value );
__declspec(implementation_key(196)) double IPluginChannel::GetDefaultMin ( );
__declspec(implementation_key(197)) void IPluginChannel::PutDefaultMin ( double Value );
__declspec(implementation_key(198)) long IPluginChannel::GetAsyncBufSize ( );
__declspec(implementation_key(199)) void IPluginChannel::PutAsyncBufSize ( long Value );
__declspec(implementation_key(200)) HRESULT IPluginChannel::SetCalcSingleValue ( VARIANT_BOOL Value );
__declspec(implementation_key(201)) HRESULT IPluginChannel::SetCanOverload ( VARIANT_BOOL Value );
__declspec(implementation_key(202)) long IDiscreteItem::GetValue ( );
__declspec(implementation_key(203)) void IDiscreteItem::PutValue ( long Value );
__declspec(implementation_key(204)) _bstr_t IDiscreteItem::GetCaption ( );
__declspec(implementation_key(205)) void IDiscreteItem::PutCaption ( _bstr_t Value );
__declspec(implementation_key(206)) long IDiscreteItem::GetColor ( );
__declspec(implementation_key(207)) void IDiscreteItem::PutColor ( long Value );
__declspec(implementation_key(208)) long IDiscreteList::GetCount ( );
__declspec(implementation_key(209)) IUnknownPtr IDiscreteList::Get_NewEnum ( );
__declspec(implementation_key(210)) HRESULT IDiscreteList::Remove ( long Ind );
__declspec(implementation_key(211)) IDiscreteItemPtr IDiscreteList::GetItem ( long Index );
__declspec(implementation_key(212)) IDiscreteItemPtr IDiscreteList::Add ( );
__declspec(implementation_key(213)) IDiscreteItemPtr IDiscreteList::Find ( long Val );
__declspec(implementation_key(214)) _bstr_t IGHObject::GetData ( );
__declspec(implementation_key(215)) void IGHObject::PutData ( _bstr_t Value );
__declspec(implementation_key(216)) _bstr_t IGHObject::GetCaption ( );
__declspec(implementation_key(217)) void IGHObject::PutCaption ( _bstr_t Value );
__declspec(implementation_key(218)) long IGHObject::GetObjType ( );
__declspec(implementation_key(219)) _variant_t IGHObject::GetSubList ( );
__declspec(implementation_key(220)) void IGHObject::PutSubList ( const _variant_t & Value );
__declspec(implementation_key(221)) HRESULT IGHObject::SetObjType ( long Value );
__declspec(implementation_key(222)) _bstr_t IGHObject::GetUniqueID ( );
__declspec(implementation_key(223)) void IGHObject::PutUniqueID ( _bstr_t Value );
__declspec(implementation_key(224)) long IGHObject::GetDataType ( );
__declspec(implementation_key(225)) void IGHObject::PutDataType ( long Value );
__declspec(implementation_key(226)) _bstr_t IGHObject::GetDefaultData ( );
__declspec(implementation_key(227)) void IGHObject::PutDefaultData ( _bstr_t Value );
__declspec(implementation_key(228)) long IGlobalHeader::GetCount ( );
__declspec(implementation_key(229)) IUnknownPtr IGlobalHeader::Get_NewEnum ( );
__declspec(implementation_key(230)) IGHObjectPtr IGlobalHeader::GetItem ( long Ind );
__declspec(implementation_key(231)) IGHObjectPtr IGlobalHeader::Add ( );
__declspec(implementation_key(232)) HRESULT IGlobalHeader::Remove ( long Index );
__declspec(implementation_key(233)) VARIANT_BOOL ITiming::GetTracking ( );
__declspec(implementation_key(234)) HRESULT IDewePlugin::OnMessage ( long Msg, const _variant_t & InParam, VARIANT * OutParam );
__declspec(implementation_key(235)) _variant_t IPluginChannelXMLHelper::FindNode ( long IndexLevel, const _variant_t & Ind, VARIANT_BOOL ChannelNode, VARIANT_BOOL AllowCreate );
__declspec(implementation_key(236)) HRESULT IPluginChannelXMLHelper::StartExtractChannels ( );
__declspec(implementation_key(237)) VARIANT_BOOL IPluginChannelXMLHelper::ExtractNextChannel ( long * IndexLevel, VARIANT * Ind );
__declspec(implementation_key(238)) HRESULT IPluginChannelXMLHelper::MountAllChannels ( );
__declspec(implementation_key(239)) HRESULT IRegistrationHelper::CheckRegistration ( );
__declspec(implementation_key(240)) VARIANT_BOOL IRegistrationHelper::ActiveLicenseIncludes ( GUID Guid );
__declspec(implementation_key(241)) long IAmplifier::IOControl ( long IOCode, const _variant_t & InParam, VARIANT * OutParam );
__declspec(implementation_key(242)) long IAmplChain::GetCount ( );
__declspec(implementation_key(243)) IUnknownPtr IAmplChain::Get_NewEnum ( );
__declspec(implementation_key(244)) IAmplifierPtr IAmplChain::GetItem ( long Index );
__declspec(implementation_key(245)) long IAmplChain::IOControl ( long IOCode, const _variant_t & InParam, VARIANT * OutParam );
__declspec(implementation_key(246)) long IAmplChainList::GetCount ( );
__declspec(implementation_key(247)) IUnknownPtr IAmplChainList::Get_NewEnum ( );
__declspec(implementation_key(248)) IAmplChainPtr IAmplChainList::GetItem ( long Index );
__declspec(implementation_key(249)) IAmplChainListPtr IAmplInterface::GetChainList ( );
__declspec(implementation_key(250)) IAmplInterfacePtr IAmplInterface::GetSubInterface ( );
__declspec(implementation_key(251)) long IAmplInterface::IOControl ( long IOCode, const _variant_t & InParam, VARIANT * OutParam );
__declspec(implementation_key(252)) IAmplInterfacePtr IAmplInterfaces::GetMainInterface ( );
__declspec(implementation_key(253)) long IImportChannel::GetDefaultRes ( );
__declspec(implementation_key(254)) void IImportChannel::PutDefaultRes ( long Value );
__declspec(implementation_key(255)) _bstr_t IPluginLicense2::GetLicenseCode ( VARIANT_BOOL Builtin );
__declspec(implementation_key(256)) HRESULT IOfflineCalc::StoreCalculatedChannels ( );
__declspec(implementation_key(257)) HRESULT IOfflineCalc::Calculate ( );
__declspec(implementation_key(258)) HRESULT ICustomDAQ2::OnMessage ( long Msg, const _variant_t & InParam, VARIANT * OutParam );
__declspec(implementation_key(259)) long IDigitalTrigLevel::GetTrigType ( );
__declspec(implementation_key(260)) long IDigitalTrigLevel::GetCoupling ( );
__declspec(implementation_key(261)) long IDigitalTrigLevel::GetTrigLevel ( );
__declspec(implementation_key(262)) long IDigitalTrigLevel::GetReTrigLevel ( );
__declspec(implementation_key(263)) double ISyncSource::GetSampleRate ( );
__declspec(implementation_key(264)) void ISyncSource::PutSampleRate ( double Value );
__declspec(implementation_key(265)) VARIANT_BOOL ISyncSource::GetIsSyncSource ( );
__declspec(implementation_key(266)) void ISyncSource::PutIsSyncSource ( VARIANT_BOOL Value );
__declspec(implementation_key(267)) HRESULT ICANMsg::AddData ( const _variant_t & Data, double TimeStamp );
__declspec(implementation_key(268)) ICANMsgPtr ICANPortContext::GetMsg ( long ArbId, VARIANT_BOOL Extended, long DLC );
__declspec(implementation_key(269)) HRESULT ICANPortContext::SetTotalMsgCount ( long Value );
__declspec(implementation_key(270)) HRESULT ICANPortContext::SetErrMsgCount ( long Value );
__declspec(implementation_key(271)) VARIANT_BOOL ICANPortContext::GetListenOnly ( );
__declspec(implementation_key(272)) VARIANT_BOOL ICANPortContext::GetUsed ( );
__declspec(implementation_key(273)) long ICANPortContext::GetBaudRate ( );
__declspec(implementation_key(274)) VARIANT_BOOL ICANPortContext::GetTermination ( );
__declspec(implementation_key(275)) VARIANT_BOOL ICANPortContext::GetCaptured ( );
__declspec(implementation_key(276)) ICANPortContextPtr ICANContext::GetPorts ( long Index );
__declspec(implementation_key(277)) long ICANContext::GetPortCount ( );
__declspec(implementation_key(278)) double ICANContext::GetClock ( );
__declspec(implementation_key(279)) double ICANContext::GetClockOffset ( );
__declspec(implementation_key(280)) VARIANT_BOOL IProjectManager::ChangeProject ( _bstr_t ProjectName );
__declspec(implementation_key(281)) _bstr_t IProjectManager::GetCurrentProject ( );
__declspec(implementation_key(282)) _variant_t IProjectManager::GetProjects ( );
__declspec(implementation_key(283)) HRESULT IDIPort::ApplyDBBuf ( );
__declspec(implementation_key(284)) long IDIGroup::GetCount ( );
__declspec(implementation_key(285)) IUnknownPtr IDIGroup::Get_NewEnum ( );
__declspec(implementation_key(286)) IDIPortPtr IDIGroup::GetItem ( long Index );
__declspec(implementation_key(287)) long IDIChannel::GetDIFilter ( );
__declspec(implementation_key(288)) VARIANT_BOOL IDIChannel::GetDIInvert ( );
__declspec(implementation_key(289)) IDigitalTrigLevelPtr IDIChannel::GetTrigLevels ( );
__declspec(implementation_key(290)) _variant_t IVideoFrame::GetData ( );
__declspec(implementation_key(291)) long IVideoFrame::GetBufSize ( );
__declspec(implementation_key(292)) double IVideoFrame::GetTS ( );
__declspec(implementation_key(293)) IVideoFramePtr ICamera::GetFrameList ( long Index );
__declspec(implementation_key(294)) _variant_t ICamera::GetBitmapInfoHeader ( );
__declspec(implementation_key(295)) long ICamera::GetFrameBufSize ( );
__declspec(implementation_key(296)) long ICamera::GetFramePos ( );
__declspec(implementation_key(297)) _bstr_t ICamera::GetName ( );
__declspec(implementation_key(298)) long ICamera::GetFrameDataSize ( );
__declspec(implementation_key(299)) long ICamera::GetFrameSizeInBytes ( );
__declspec(implementation_key(300)) VARIANT_BOOL ICamera::GetUsed ( );
__declspec(implementation_key(301)) HRESULT ICamera::Start ( );
__declspec(implementation_key(302)) HRESULT ICamera::Stop ( );
__declspec(implementation_key(303)) _variant_t ICamera::TakeSnapshot ( );
__declspec(implementation_key(304)) _bstr_t ICamera::GetDisplayName ( );
__declspec(implementation_key(305)) long IVideo::GetCameraCount ( );
__declspec(implementation_key(306)) ICameraPtr IVideo::GetCameras ( long Index );
__declspec(implementation_key(307)) long IViewInfo::GetAxisViewType ( );
__declspec(implementation_key(308)) void IViewInfo::PutAxisViewType ( long Value );
__declspec(implementation_key(309)) long IViewInfo::GetDefaultVC ( );
__declspec(implementation_key(310)) void IViewInfo::PutDefaultVC ( long Value );
__declspec(implementation_key(311)) VARIANT_BOOL ILockableCursor::GetLocked ( );
__declspec(implementation_key(312)) double ILockableCursor::GetPosition ( );
__declspec(implementation_key(313)) void ILockableCursor::PutPosition ( double Value );
__declspec(implementation_key(314)) HRESULT ILockableCursor::Lock ( );
__declspec(implementation_key(315)) HRESULT ILockableCursor::Unlock ( );
__declspec(implementation_key(316)) long ILockableCursors::GetCount ( );
__declspec(implementation_key(317)) IUnknownPtr ILockableCursors::Get_NewEnum ( );
__declspec(implementation_key(318)) ILockableCursorPtr ILockableCursors::GetItem ( long Index );
__declspec(implementation_key(319)) long IMathItem2::IOControl ( long Msg, const _variant_t & InParam, VARIANT * OutParam );
__declspec(implementation_key(320)) IUnknownPtr IMathItem2::GetImplObject ( );
__declspec(implementation_key(321)) HRESULT IDwXMLNode::SetValue ( _bstr_t Value );
__declspec(implementation_key(322)) HRESULT IDwXMLNode::AddChild ( struct IDwXMLNode * Node );
__declspec(implementation_key(323)) HRESULT IDwXMLNode::RemoveChildNode ( struct IDwXMLNode * Node );
__declspec(implementation_key(324)) HRESULT IDwXMLNode::ClearChildNodes ( );
__declspec(implementation_key(325)) IDwXMLNodePtr IDwXMLNode::FindChildNode ( _bstr_t NodeName );
__declspec(implementation_key(326)) IDwXMLNodePtr IDwXMLNode::GetChild ( long I );
__declspec(implementation_key(327)) long IDwXMLNode::GetChildCount ( );
__declspec(implementation_key(328)) IDwXMLNodePtr IDwXMLNode::Clone ( );
__declspec(implementation_key(329)) IDwXMLNodePtr IDwXMLNode::GetNextSibling ( );
__declspec(implementation_key(330)) HRESULT IDwXMLNode::AddAttrNode ( struct IDwXMLNode * AttrNode );
__declspec(implementation_key(331)) HRESULT IDwXMLNode::RemoveAttrNode ( struct IDwXMLNode * AttrNode );
__declspec(implementation_key(332)) IDwXMLNodePtr IDwXMLNode::FindAttrNode ( _bstr_t AttrNodeName );
__declspec(implementation_key(333)) IDwXMLNodePtr IDwXMLNode::GetAttr ( long I );
__declspec(implementation_key(334)) long IDwXMLNode::GetAttrCount ( );
__declspec(implementation_key(335)) HRESULT IDwXMLNode::ClearAttrNodes ( );
__declspec(implementation_key(336)) _bstr_t IDwXMLNode::GetName ( );
__declspec(implementation_key(337)) _bstr_t IDwXMLNode::GetValue ( );
__declspec(implementation_key(338)) HRESULT ISequencer::ImportSeqVariables ( _bstr_t FileName );
__declspec(implementation_key(339)) HRESULT ISequencer::ExportSeqVariables ( _bstr_t FileName );
__declspec(implementation_key(340)) HRESULT ISequencer::StopSequence ( );
__declspec(implementation_key(341)) _bstr_t ISequencer::GetName ( );
__declspec(implementation_key(342)) HRESULT IVariableChannel::SetControlValue ( double Value );
__declspec(implementation_key(343)) HRESULT IUIHelper::AddMUI ( void * Param1 );
__declspec(implementation_key(344)) VARIANT_BOOL IMeasUnit::GetUsed ( );
__declspec(implementation_key(345)) void IMeasUnit::PutUsed ( VARIANT_BOOL Value );
__declspec(implementation_key(346)) HRESULT IMeasUnit::SendCustomCommand ( _bstr_t CmdIn, _bstr_t DataIn, BSTR * CmdOut, BSTR * DataOut );
__declspec(implementation_key(347)) HRESULT IMeasUnit::EnterSync ( );
__declspec(implementation_key(348)) HRESULT IMeasUnit::LeaveSync ( );
__declspec(implementation_key(349)) VARIANT_BOOL IRemoteManager::GetConnected ( );
__declspec(implementation_key(350)) long IRemoteManager::GetCount ( );
__declspec(implementation_key(351)) IUnknownPtr IRemoteManager::Get_NewEnum ( );
__declspec(implementation_key(352)) IMeasUnitPtr IRemoteManager::GetItem ( long Index );
__declspec(implementation_key(353)) _bstr_t IVCProperty::GetId ( );
__declspec(implementation_key(354)) _bstr_t IVCProperty::GetText ( );
__declspec(implementation_key(355)) void IVCProperty::PutText ( _bstr_t Value );
__declspec(implementation_key(356)) _bstr_t IVCProperty::GetRightText ( );
__declspec(implementation_key(357)) void IVCProperty::PutRightText ( _bstr_t Value );
__declspec(implementation_key(358)) _bstr_t IVCProperty::GetDescription ( );
__declspec(implementation_key(359)) void IVCProperty::PutDescription ( _bstr_t Value );
__declspec(implementation_key(360)) VARIANT_BOOL IVCProperty::GetVisible ( );
__declspec(implementation_key(361)) void IVCProperty::PutVisible ( VARIANT_BOOL Value );
__declspec(implementation_key(362)) VARIANT_BOOL IVCProperty::GetEnabled ( );
__declspec(implementation_key(363)) void IVCProperty::PutEnabled ( VARIANT_BOOL Value );
__declspec(implementation_key(364)) long IVCProperty::GetIndent ( );
__declspec(implementation_key(365)) void IVCProperty::PutIndent ( long Value );
__declspec(implementation_key(366)) HRESULT IVCProperty::AddButton ( _bstr_t Hint, _bstr_t IconName );
__declspec(implementation_key(367)) VARIANT_BOOL IVCProperty::GetAllowUnified ( );
__declspec(implementation_key(368)) void IVCProperty::PutAllowUnified ( VARIANT_BOOL Value );
__declspec(implementation_key(369)) long IVCProperty::GetDefaultButtonIndex ( );
__declspec(implementation_key(370)) void IVCProperty::PutDefaultButtonIndex ( long Value );
__declspec(implementation_key(371)) long IVCIntegerProperty::GetValue ( );
__declspec(implementation_key(372)) void IVCIntegerProperty::PutValue ( long Value );
__declspec(implementation_key(373)) long IVCIntegerProperty::GetMinValue ( );
__declspec(implementation_key(374)) void IVCIntegerProperty::PutMinValue ( long Value );
__declspec(implementation_key(375)) long IVCIntegerProperty::GetMaxValue ( );
__declspec(implementation_key(376)) void IVCIntegerProperty::PutMaxValue ( long Value );
__declspec(implementation_key(377)) long IVCColorProperty::GetColor ( );
__declspec(implementation_key(378)) void IVCColorProperty::PutColor ( long Value );
__declspec(implementation_key(379)) double IVCFloatProperty::GetValue ( );
__declspec(implementation_key(380)) void IVCFloatProperty::PutValue ( double Value );
__declspec(implementation_key(381)) double IVCFloatProperty::GetMinValue ( );
__declspec(implementation_key(382)) void IVCFloatProperty::PutMinValue ( double Value );
__declspec(implementation_key(383)) double IVCFloatProperty::GetMaxValue ( );
__declspec(implementation_key(384)) void IVCFloatProperty::PutMaxValue ( double Value );
__declspec(implementation_key(385)) _bstr_t IVCTextProperty::GetValue ( );
__declspec(implementation_key(386)) void IVCTextProperty::PutValue ( _bstr_t Value );
__declspec(implementation_key(387)) long IVCSelectProperty::GetItemIndex ( );
__declspec(implementation_key(388)) void IVCSelectProperty::PutItemIndex ( long Value );
__declspec(implementation_key(389)) long IVCSelectProperty::GetCount ( );
__declspec(implementation_key(390)) HRESULT IVCSelectProperty::Add ( _bstr_t Item );
__declspec(implementation_key(391)) HRESULT IVCSelectProperty::Clear ( );
__declspec(implementation_key(392)) _bstr_t IVCSelectProperty::Item ( long Index );
__declspec(implementation_key(393)) VARIANT_BOOL IVCCheckBoxProperty::GetChecked ( );
__declspec(implementation_key(394)) void IVCCheckBoxProperty::PutChecked ( VARIANT_BOOL Value );
__declspec(implementation_key(395)) VARIANT_BOOL IAcqLoop::GetMaxUpdateRateMode ( );
__declspec(implementation_key(396)) void IAcqLoop::PutMaxUpdateRateMode ( VARIANT_BOOL Value );
__declspec(implementation_key(397)) long IVCSearchProperty::GetItemIndex ( );
__declspec(implementation_key(398)) void IVCSearchProperty::PutItemIndex ( long Value );
__declspec(implementation_key(399)) long IVCSearchProperty::GetCount ( );
__declspec(implementation_key(400)) HRESULT IVCSearchProperty::Add ( _bstr_t Item );
__declspec(implementation_key(401)) HRESULT IVCSearchProperty::Clear ( );
__declspec(implementation_key(402)) _bstr_t IVCSearchProperty::Item ( long Index );
__declspec(implementation_key(403)) _bstr_t IVCPropertiesGroup::GetName ( );
__declspec(implementation_key(404)) void IVCPropertiesGroup::PutName ( _bstr_t Value );
__declspec(implementation_key(405)) IVCIntegerPropertyPtr IVCPropertiesGroup::AddIntegerProperty ( _bstr_t PropertyID, _bstr_t Name );
__declspec(implementation_key(406)) IVCPropertyPtr IVCPropertiesGroup::FindProperty ( _bstr_t PropertyID );
__declspec(implementation_key(407)) _bstr_t IVCPropertiesGroup::GetId ( );
__declspec(implementation_key(408)) IVCColorPropertyPtr IVCPropertiesGroup::AddColorProperty ( _bstr_t PropertyID, _bstr_t Name );
__declspec(implementation_key(409)) IVCFloatPropertyPtr IVCPropertiesGroup::AddFloatProperty ( _bstr_t PropertyID, _bstr_t Name );
__declspec(implementation_key(410)) IVCTextPropertyPtr IVCPropertiesGroup::AddTextProperty ( _bstr_t PropertyID, _bstr_t Name );
__declspec(implementation_key(411)) IVCSelectPropertyPtr IVCPropertiesGroup::AddSelectProperty ( _bstr_t PropertyID, _bstr_t Name );
__declspec(implementation_key(412)) IVCCheckBoxPropertyPtr IVCPropertiesGroup::AddCheckBoxProperty ( _bstr_t PropertyID, _bstr_t Name );
__declspec(implementation_key(413)) IVCPropertyPtr IVCPropertiesGroup::AddLabelProperty ( _bstr_t PropertyID, _bstr_t Name );
__declspec(implementation_key(414)) VARIANT_BOOL IVCPropertiesGroup::GetExpanded ( );
__declspec(implementation_key(415)) void IVCPropertiesGroup::PutExpanded ( VARIANT_BOOL Value );
__declspec(implementation_key(416)) VARIANT_BOOL IVCPropertiesGroup::GetVisible ( );
__declspec(implementation_key(417)) void IVCPropertiesGroup::PutVisible ( VARIANT_BOOL Value );
__declspec(implementation_key(418)) IVCSearchPropertyPtr IVCPropertiesGroup::AddSearchProperty ( _bstr_t PropertyID, _bstr_t Name );
__declspec(implementation_key(419)) long IVCPropertiesGroup::GetMinPropertyTextWidth ( );
__declspec(implementation_key(420)) void IVCPropertiesGroup::PutMinPropertyTextWidth ( long Value );
__declspec(implementation_key(421)) IVCPropertiesGroupPtr IVCProperties::FindGroup ( _bstr_t GroupID );
__declspec(implementation_key(422)) IVCPropertyPtr IVCProperties::FindProperty ( _bstr_t GroupID, _bstr_t PropertyID );
__declspec(implementation_key(423)) IVCPropertiesGroupPtr IVCProperties::AddOrFindGroup ( _bstr_t GroupID );
__declspec(implementation_key(424)) HRESULT IResamplerChannel::SetInterpolate ( long InterpolationType );
__declspec(implementation_key(425)) _variant_t IResamplerChannel::GetTimesBuffer ( );
__declspec(implementation_key(426)) _variant_t IResamplerChannel::GetDoubleValuesBuffer ( );
__declspec(implementation_key(427)) _variant_t IResamplerChannel::GetBinaryPointersBuffer ( );
__declspec(implementation_key(428)) _variant_t IResamplerChannel::GetBinarySizesBuffer ( );
__declspec(implementation_key(429)) _variant_t IResamplerChannel::GetDirectDataBuffer ( );
__declspec(implementation_key(430)) IUnknownPtr IRTModule::GetDataModule ( );
__declspec(implementation_key(431)) _bstr_t IRTModule::GetModuleId ( );
__declspec(implementation_key(432)) IUnknownPtr IRTCore::GetData ( );
__declspec(implementation_key(433)) HRESULT IReport::OpenWidgetInCurrentWordDocument ( _bstr_t WidgetID );
__declspec(implementation_key(434)) HRESULT IReport::SetActiveDocument ( _bstr_t DocumentFilePath );
__declspec(implementation_key(435)) HRESULT IReport::OnWordShutdown ( );
__declspec(implementation_key(436)) _bstr_t IReport::GetActiveDocument ( );
__declspec(implementation_key(437)) HRESULT IReport::LinkDewesoftToWord ( _bstr_t DocumentName );
__declspec(implementation_key(438)) HRESULT IReport::UpdateSelectedWidget ( );
__declspec(implementation_key(439)) VARIANT_BOOL IReport::GetIsInReportingMode ( );
__declspec(implementation_key(440)) long IGenericBitmap::AddReference ( );
__declspec(implementation_key(441)) long IGenericBitmap::ReleaseReference ( );
__declspec(implementation_key(442)) HRESULT IGenericBitmap::Resize ( long W, long H );
__declspec(implementation_key(443)) HRESULT IGenericBitmap::SetData ( __int64 Data );
__declspec(implementation_key(444)) long IGenericBitmap::GetWidth ( );
__declspec(implementation_key(445)) long IGenericBitmap::GetHeight ( );
__declspec(implementation_key(446)) long IGenericBitmap::GetBitDepth ( );
__declspec(implementation_key(447)) long IGenericBitmap::GetScanLineSize ( );
__declspec(implementation_key(448)) __int64 IGenericBitmap::GetScanLine ( long I );
__declspec(implementation_key(449)) long IGenericBitmap::GetReferenceCount ( );
__declspec(implementation_key(450)) __int64 IGDIBitmap::GetDC ( );
__declspec(implementation_key(451)) VARIANT_BOOL IStoreEngine::GetStoring ( );
__declspec(implementation_key(452)) long IStoreEngine::GetStoreMode ( );
__declspec(implementation_key(453)) VARIANT_BOOL IStoreEngine::GetIsTriggering ( );
__declspec(implementation_key(454)) unsigned __int64 IStoreEngine::GetFileSize ( );
__declspec(implementation_key(455)) HRESULT IStoreEngine::AddNewEvent ( enum EventType Type_, const _variant_t & Data );
__declspec(implementation_key(456)) _bstr_t IStoreEngine::GetFileName ( );
__declspec(implementation_key(457)) double IStoreEngine::GetTrackingOffset ( );
__declspec(implementation_key(458)) HRESULT IStoreEngine::StartStoreTimeChanged ( );
__declspec(implementation_key(459)) VARIANT_BOOL IStoreEngine::GetPaused ( );
__declspec(implementation_key(460)) VARIANT_BOOL IStoreEngine::GetAllowIBSkipping ( );
__declspec(implementation_key(461)) void IStoreEngine::PutAllowIBSkipping ( VARIANT_BOOL Value );
__declspec(implementation_key(462)) HRESULT IStoreEngine::StartNewMultifile ( );
__declspec(implementation_key(463)) HRESULT IStoreEngine::AddNewEventWithTime ( enum EventType Type_, const _variant_t & Data, double Time );
__declspec(implementation_key(464)) enum AOWaveForm IAOChannel::GetWaveForm ( );
__declspec(implementation_key(465)) void IAOChannel::PutWaveForm ( enum AOWaveForm Value );
__declspec(implementation_key(466)) float IAOChannel::GetAmpl ( );
__declspec(implementation_key(467)) void IAOChannel::PutAmpl ( float Value );
__declspec(implementation_key(468)) float IAOChannel::GetOffset ( );
__declspec(implementation_key(469)) void IAOChannel::PutOffset ( float Value );
__declspec(implementation_key(470)) float IAOChannel::GetPhase ( );
__declspec(implementation_key(471)) void IAOChannel::PutPhase ( float Value );
__declspec(implementation_key(472)) long IAOChannel::GetFilterType ( );
__declspec(implementation_key(473)) void IAOChannel::PutFilterType ( long Value );
__declspec(implementation_key(474)) long IAOChannel::GetFilterProtoType ( );
__declspec(implementation_key(475)) void IAOChannel::PutFilterProtoType ( long Value );
__declspec(implementation_key(476)) long IAOChannel::GetFilterOrder ( );
__declspec(implementation_key(477)) void IAOChannel::PutFilterOrder ( long Value );
__declspec(implementation_key(478)) float IAOChannel::GetFilterFreq2 ( );
__declspec(implementation_key(479)) void IAOChannel::PutFilterFreq2 ( float Value );
__declspec(implementation_key(480)) float IAOChannel::GetFilterFreq1 ( );
__declspec(implementation_key(481)) void IAOChannel::PutFilterFreq1 ( float Value );
__declspec(implementation_key(482)) long IAOChannel::GetRange ( );
__declspec(implementation_key(483)) void IAOChannel::PutRange ( long Value );
__declspec(implementation_key(484)) HRESULT IPlugin4::OnEvent ( enum EventIDs EventID, const _variant_t & InParam, VARIANT * OutParam );
__declspec(implementation_key(485)) HRESULT IPowerModule::LoadFromXML ( enum XMLType AType, const _variant_t & XML );
__declspec(implementation_key(486)) HRESULT IPowerModule::SaveToXML ( enum XMLType AType, VARIANT * XML );
__declspec(implementation_key(487)) HRESULT IPowerModule::GetFFT ( long ValueType, long Phase, VARIANT * Data );
__declspec(implementation_key(488)) float IPowerModule::GetFFTSampleRate ( );
__declspec(implementation_key(489)) long IPowerModule::GetFFTBlockSize ( );
__declspec(implementation_key(490)) long IPowerModule::GetModuleIndex ( );
__declspec(implementation_key(491)) HRESULT IPowerModule::SaveToXML1 ( long AType, VARIANT * XML );
__declspec(implementation_key(492)) HRESULT IPowerModule::LoadFromXML1 ( long AType, const _variant_t & XML );
__declspec(implementation_key(493)) _variant_t IPowerModule::GetVectorScopeData ( );
__declspec(implementation_key(494)) long IPowerModules::GetCount ( );
__declspec(implementation_key(495)) IUnknownPtr IPowerModules::Get_NewEnum ( );
__declspec(implementation_key(496)) IPowerModulePtr IPowerModules::GetItem ( long Index );
__declspec(implementation_key(497)) IPowerModulePtr IPowerModules::Add ( );
__declspec(implementation_key(498)) HRESULT IPowerModules::Remove ( long Ind );
__declspec(implementation_key(499)) HRESULT ICustomExport3::OnEvent ( enum CustomExpEventIDs EventIDs, const _variant_t & InParam, VARIANT * OutParam );
__declspec(implementation_key(500)) HRESULT ISetupMessages::Add ( enum SetupMessageType MsgType, _bstr_t Header, _bstr_t Text );
__declspec(implementation_key(501)) IDwXMLNodePtr IDwXMLDocument::GetStartNode ( );
__declspec(implementation_key(502)) HRESULT IDwXMLDocument::SetStartNode ( struct IDwXMLNode * Node );
__declspec(implementation_key(503)) IDwXMLNodePtr IDwXMLDocument::CreateNode ( _bstr_t NodeName, _bstr_t NodeValue );
__declspec(implementation_key(504)) HRESULT IDwXMLDocument::WriteInteger ( struct IDwXMLNode * Node, _bstr_t Name, long Value, long Default );
__declspec(implementation_key(505)) VARIANT_BOOL IDwXMLDocument::GetWriteDefault ( );
__declspec(implementation_key(506)) void IDwXMLDocument::PutWriteDefault ( VARIANT_BOOL Value );
__declspec(implementation_key(507)) VARIANT_BOOL IDwXMLDocument::GetSearchForExistingNodes ( );
__declspec(implementation_key(508)) void IDwXMLDocument::PutSearchForExistingNodes ( VARIANT_BOOL Value );
__declspec(implementation_key(509)) HRESULT IDwXMLDocument::ReadInteger ( struct IDwXMLNode * Node, _bstr_t Name, long * Value, long Default );
__declspec(implementation_key(510)) HRESULT IDwXMLDocument::WriteString ( struct IDwXMLNode * Node, _bstr_t Name, _bstr_t Value, _bstr_t Default );
__declspec(implementation_key(511)) HRESULT IDwXMLDocument::ReadString ( struct IDwXMLNode * Node, _bstr_t Name, BSTR * Value, _bstr_t Default );
__declspec(implementation_key(512)) HRESULT IDwXMLDocument::UpdateString ( struct IDwXMLNode * Node, _bstr_t Name, BSTR * Value, _bstr_t Default );
__declspec(implementation_key(513)) enum UpdateType IDwXMLDocument::GetUpdateOperation ( );
__declspec(implementation_key(514)) void IDwXMLDocument::PutUpdateOperation ( enum UpdateType Value );
__declspec(implementation_key(515)) HRESULT IDwXMLDocument::UpdateInteger ( struct IDwXMLNode * Node, _bstr_t Name, long * Value, long Default );
__declspec(implementation_key(516)) HRESULT IDwXMLDocument::ReadBoolean ( struct IDwXMLNode * Node, _bstr_t Name, VARIANT_BOOL * Value, VARIANT_BOOL Default );
__declspec(implementation_key(517)) HRESULT IDwXMLDocument::WriteBoolean ( struct IDwXMLNode * Node, _bstr_t Name, VARIANT_BOOL Value, VARIANT_BOOL Default );
__declspec(implementation_key(518)) HRESULT IDwXMLDocument::UpdateBoolean ( struct IDwXMLNode * Node, _bstr_t Name, VARIANT_BOOL * Value, VARIANT_BOOL Default );
__declspec(implementation_key(519)) HRESULT IDwXMLDocument::ReadByte ( struct IDwXMLNode * Node, _bstr_t Name, unsigned char * Value, unsigned char Default );
__declspec(implementation_key(520)) HRESULT IDwXMLDocument::WriteByte ( struct IDwXMLNode * Node, _bstr_t Name, unsigned char Value, unsigned char Default );
__declspec(implementation_key(521)) HRESULT IDwXMLDocument::UpdateByte ( struct IDwXMLNode * Node, _bstr_t Name, unsigned char * Value, unsigned char Default );
__declspec(implementation_key(522)) HRESULT IDwXMLDocument::ReadLongWord ( struct IDwXMLNode * Node, _bstr_t Name, unsigned long * Value, unsigned long Default );
__declspec(implementation_key(523)) HRESULT IDwXMLDocument::WriteLongWord ( struct IDwXMLNode * Node, _bstr_t Name, unsigned long Value, unsigned long Default );
__declspec(implementation_key(524)) HRESULT IDwXMLDocument::UpdateLongWord ( struct IDwXMLNode * Node, _bstr_t Name, unsigned long * Value, unsigned long Default );
__declspec(implementation_key(525)) HRESULT IDwXMLDocument::ReadWord ( struct IDwXMLNode * Node, _bstr_t Name, unsigned short * Value, unsigned short Default );
__declspec(implementation_key(526)) HRESULT IDwXMLDocument::WriteWord ( struct IDwXMLNode * Node, _bstr_t Name, unsigned short Value, unsigned short Default );
__declspec(implementation_key(527)) HRESULT IDwXMLDocument::UpdateWord ( struct IDwXMLNode * Node, _bstr_t Name, unsigned short * Value, unsigned short Default );
__declspec(implementation_key(528)) HRESULT IDwXMLDocument::ReadSmallInt ( struct IDwXMLNode * Node, _bstr_t Name, short * Value, short Default );
__declspec(implementation_key(529)) HRESULT IDwXMLDocument::WriteSmallInt ( struct IDwXMLNode * Node, _bstr_t Name, short Value, short Default );
__declspec(implementation_key(530)) HRESULT IDwXMLDocument::UpdateSmallInt ( struct IDwXMLNode * Node, _bstr_t Name, short * Value, short Default );
__declspec(implementation_key(531)) HRESULT IDwXMLDocument::ReadSingle ( struct IDwXMLNode * Node, _bstr_t Name, float * Value, float Default );
__declspec(implementation_key(532)) HRESULT IDwXMLDocument::WriteSingle ( struct IDwXMLNode * Node, _bstr_t Name, float Value, float Default );
__declspec(implementation_key(533)) HRESULT IDwXMLDocument::UpdateSingle ( struct IDwXMLNode * Node, _bstr_t Name, float * Value, float Default );
__declspec(implementation_key(534)) HRESULT IDwXMLDocument::ReadDouble ( struct IDwXMLNode * Node, _bstr_t Name, double * Value, double Default );
__declspec(implementation_key(535)) HRESULT IDwXMLDocument::WriteDouble ( struct IDwXMLNode * Node, _bstr_t Name, double Value, double Default );
__declspec(implementation_key(536)) HRESULT IDwXMLDocument::UpdateDouble ( struct IDwXMLNode * Node, _bstr_t Name, double * Value, double Default );
__declspec(implementation_key(537)) HRESULT IDwXMLDocument::ReadByteArray ( struct IDwXMLNode * Node, _bstr_t Name, VARIANT * Value );
__declspec(implementation_key(538)) HRESULT IDwXMLDocument::WriteByteArray ( struct IDwXMLNode * Node, _bstr_t Name, const _variant_t & Value );
__declspec(implementation_key(539)) long IProperties::GetCount ( );
__declspec(implementation_key(540)) IUnknownPtr IProperties::Get_NewEnum ( );
__declspec(implementation_key(541)) _variant_t IProperties::GetItem ( const _variant_t & Index );
__declspec(implementation_key(542)) void IProperties::PutItem ( const _variant_t & Index, const _variant_t & Value );
__declspec(implementation_key(543)) HRESULT IProperties::Add ( _bstr_t Name, const _variant_t & Value );
__declspec(implementation_key(544)) IDwXMLDocumentPtr IProperties::GetXmlItem ( _bstr_t Name );
__declspec(implementation_key(545)) IDwXMLDocumentPtr IProperties::AddXmlItem ( _bstr_t Name );
__declspec(implementation_key(546)) _variant_t IInputGroup::GetIndex ( );
__declspec(implementation_key(547)) _bstr_t IInputGroup::GetName ( );
__declspec(implementation_key(548)) void IInputGroup::PutName ( _bstr_t Value );
__declspec(implementation_key(549)) _bstr_t IInputGroup::GetGuid ( );
__declspec(implementation_key(550)) void IInputGroup::PutGuid ( _bstr_t Value );
__declspec(implementation_key(551)) IPropertiesPtr IInputGroup::GetProperties ( );
__declspec(implementation_key(552)) long IInputGroups::GetCount ( );
__declspec(implementation_key(553)) IUnknownPtr IInputGroups::Get_NewEnum ( );
__declspec(implementation_key(554)) IInputGroupPtr IInputGroups::GetItem ( long Index );
__declspec(implementation_key(555)) IDwXMLDocumentPtr IXMLHelper::GetCustomIDwXMLDocument ( VARIANT_BOOL Write );
__declspec(implementation_key(556)) _bstr_t IPermission::GetUniqueID ( );
__declspec(implementation_key(557)) _bstr_t IPermission::GetName ( );
__declspec(implementation_key(558)) void IPermission::PutName ( _bstr_t Value );
__declspec(implementation_key(559)) enum TPermissionType IPermission::GetPermissionType ( );
__declspec(implementation_key(560)) void IPermission::PutPermissionType ( enum TPermissionType Value );
__declspec(implementation_key(561)) IPermissionPtr IPermission::GetOrCreatePermission ( _bstr_t UniqueID );
__declspec(implementation_key(562)) HRESULT ISynchronization::AddSourceMode ( enum TSyncMode SyncMode );
__declspec(implementation_key(563)) HRESULT ISynchronization::RemoveSourceMode ( enum TSyncMode SyncMode );
__declspec(implementation_key(564)) HRESULT ISynchronization::AddSlaveMode ( enum TSyncMode SyncMode );
__declspec(implementation_key(565)) HRESULT ISynchronization::RemoveSlaveMode ( enum TSyncMode SyncMode );
__declspec(implementation_key(566)) HRESULT ISynchronization::CustomSourceModeAdd ( _bstr_t CustomMode );
__declspec(implementation_key(567)) long ISynchronization::CustomSourceModeCount ( );
__declspec(implementation_key(568)) _bstr_t ISynchronization::CustomSourceModeItem ( long I );
__declspec(implementation_key(569)) HRESULT ISynchronization::CustomSlaveModeAdd ( _bstr_t SyncMode );
__declspec(implementation_key(570)) long ISynchronization::CustomSlaveModeCount ( );
__declspec(implementation_key(571)) _bstr_t ISynchronization::CustomSlaveModeItem ( long I );
__declspec(implementation_key(572)) VARIANT_BOOL ISynchronization::GetIsClockSource ( );
__declspec(implementation_key(573)) void ISynchronization::PutIsClockSource ( VARIANT_BOOL Value );
__declspec(implementation_key(574)) enum TSyncMode ISynchronization::GetCurrentMode ( );
__declspec(implementation_key(575)) void ISynchronization::PutCurrentMode ( enum TSyncMode Value );
__declspec(implementation_key(576)) int ISynchronization::GetCurrentCustomModeValue ( );
__declspec(implementation_key(577)) void ISynchronization::PutCurrentCustomModeValue ( int Value );
__declspec(implementation_key(578)) int ISynchronization::GetCurrentCustomModeIdx ( );
__declspec(implementation_key(579)) void ISynchronization::PutCurrentCustomModeIdx ( int Value );
__declspec(implementation_key(580)) VARIANT_BOOL ISynchronization::GetSupportsAutomaticMode ( );
__declspec(implementation_key(581)) void ISynchronization::PutSupportsAutomaticMode ( VARIANT_BOOL Value );
__declspec(implementation_key(582)) VARIANT_BOOL ISynchronization::GetAutomaticMode ( );
__declspec(implementation_key(583)) void ISynchronization::PutAutomaticMode ( VARIANT_BOOL Value );
__declspec(implementation_key(584)) _bstr_t IDeviceNode::GetName ( );
__declspec(implementation_key(585)) void IDeviceNode::PutName ( _bstr_t Value );
__declspec(implementation_key(586)) IDeviceNodePtr IDeviceNode::AddSubDevice ( _bstr_t Name );
__declspec(implementation_key(587)) ISynchronizationPtr IDeviceNode::CreateSynchronization ( );
__declspec(implementation_key(588)) HRESULT IDeviceNode::SetSynchronization ( struct ISynchronization * Sync );
__declspec(implementation_key(589)) long ICanvasPen::GetColor ( );
__declspec(implementation_key(590)) void ICanvasPen::PutColor ( long Value );
__declspec(implementation_key(591)) long ICanvasPen::GetWidth ( );
__declspec(implementation_key(592)) void ICanvasPen::PutWidth ( long Value );
__declspec(implementation_key(593)) enum CanvasPenStyle ICanvasPen::GetStyle ( );
__declspec(implementation_key(594)) void ICanvasPen::PutStyle ( enum CanvasPenStyle Value );
__declspec(implementation_key(595)) enum CanvasPenMode ICanvasPen::GetMode ( );
__declspec(implementation_key(596)) void ICanvasPen::PutMode ( enum CanvasPenMode Value );
__declspec(implementation_key(597)) long ICanvasBrush::GetColor ( );
__declspec(implementation_key(598)) void ICanvasBrush::PutColor ( long Value );
__declspec(implementation_key(599)) enum CanvasBrushStyle ICanvasBrush::GetStyle ( );
__declspec(implementation_key(600)) void ICanvasBrush::PutStyle ( enum CanvasBrushStyle Value );
__declspec(implementation_key(601)) _bstr_t ICanvasFont::GetName ( );
__declspec(implementation_key(602)) void ICanvasFont::PutName ( _bstr_t Value );
__declspec(implementation_key(603)) long ICanvasFont::GetColor ( );
__declspec(implementation_key(604)) void ICanvasFont::PutColor ( long Value );
__declspec(implementation_key(605)) long ICanvasFont::GetSize ( );
__declspec(implementation_key(606)) void ICanvasFont::PutSize ( long Value );
__declspec(implementation_key(607)) long ICanvasFont::GetHeight ( );
__declspec(implementation_key(608)) void ICanvasFont::PutHeight ( long Value );
__declspec(implementation_key(609)) long ICanvasFont::GetOrientation ( );
__declspec(implementation_key(610)) void ICanvasFont::PutOrientation ( long Value );
__declspec(implementation_key(611)) long ICanvasFont::GetAngle ( );
__declspec(implementation_key(612)) void ICanvasFont::PutAngle ( long Value );
__declspec(implementation_key(613)) long ICanvasFont::GetStyle ( );
__declspec(implementation_key(614)) void ICanvasFont::PutStyle ( long Value );
__declspec(implementation_key(615)) enum CanvasFontQuality ICanvasFont::GetQuality ( );
__declspec(implementation_key(616)) void ICanvasFont::PutQuality ( enum CanvasFontQuality Value );
__declspec(implementation_key(617)) HRESULT ICanvas::LineTo ( long X, long Y );
__declspec(implementation_key(618)) HRESULT ICanvas::MoveTo ( long X, long Y );
__declspec(implementation_key(619)) HRESULT ICanvas::CircleRadius ( long X, long Y, long R );
__declspec(implementation_key(620)) HRESULT ICanvas::Ellipse ( long X1, long Y1, long X2, long Y2 );
__declspec(implementation_key(621)) HRESULT ICanvas::Rectangle ( long X1, long Y1, long X2, long Y2 );
__declspec(implementation_key(622)) HRESULT ICanvas::TextOut ( long X, long Y, _bstr_t Text );
__declspec(implementation_key(623)) ICanvasBrushPtr ICanvas::GetBrush ( );
__declspec(implementation_key(624)) ICanvasPenPtr ICanvas::GetPen ( );
__declspec(implementation_key(625)) ICanvasFontPtr ICanvas::GetFont ( );
__declspec(implementation_key(626)) HRESULT ICanvas::Arc ( long X1, long Y1, long X2, long Y2, long X3, long Y3, long X4, long Y4 );
__declspec(implementation_key(627)) HRESULT ICanvas::FillRect ( long Left, long Top, long Right, long Bottom );
__declspec(implementation_key(628)) HRESULT ICanvas::FloodFill ( long X, long Y, long Color, enum CanvasFillStyle FillStyle );
__declspec(implementation_key(629)) HRESULT ICanvas::Pie ( long X1, long Y1, long X2, long Y2, long X3, long Y3, long X4, long Y4 );
__declspec(implementation_key(630)) long ICanvas::TextWidth ( _bstr_t Text );
__declspec(implementation_key(631)) long ICanvas::TextHeight ( _bstr_t Text );
__declspec(implementation_key(632)) HRESULT ICanvas::TextRect ( long Left, long Top, long Right, long Bottom, _bstr_t Text, long TextFormat );
__declspec(implementation_key(633)) HRESULT ICanvas::Polygon ( VARIANT * Points, long Count );
__declspec(implementation_key(634)) HRESULT ICanvas::Polyline ( VARIANT * Points, long Count );
__declspec(implementation_key(635)) HRESULT ICanvas::SetClipRegion ( long Left, long Top, long Right, long Bottom );
__declspec(implementation_key(636)) HRESULT ICanvas::ClearClipRegion ( );
__declspec(implementation_key(637)) VARIANT_BOOL ICanvas::BitBlt ( long X, long Y, long Width, long Height, __int64 SrcDC, long XSrc, long YSrc );
__declspec(implementation_key(638)) VARIANT_BOOL ICanvas::StretchBlt ( long DestX, long DestY, long DestW, long DestH, __int64 SrcDC, long SrcX, long SrcY, long SrcW, long SrcH );
__declspec(implementation_key(639)) IGDIBitmapPtr ICanvas::CreateGDIBitmap ( long Width, long Height, long BitDepth );
__declspec(implementation_key(640)) HRESULT ICanvas::Draw ( long X, long Y, struct IGenericBitmap * Bmp );
__declspec(implementation_key(641)) HRESULT IRTModuleLoader::AddDriver ( IUnknown * Driver );
__declspec(implementation_key(642)) IRTModulePtr IRTModuleLoader::LoadModule ( _bstr_t Name, long MinMajorVersion, long MinMinorVeresion, enum RTModuleLoadOptions LoadOptions );
__declspec(implementation_key(643)) enum IMarkerValueType IMarkerObject::GetValueType ( );
__declspec(implementation_key(644)) void IMarkerObject::PutValueType ( enum IMarkerValueType Value );
__declspec(implementation_key(645)) _bstr_t IMarkerObject::GetName ( );
__declspec(implementation_key(646)) void IMarkerObject::PutName ( _bstr_t Value );
__declspec(implementation_key(647)) VARIANT_BOOL IMarkerObject::GetIsReadOnly ( );
__declspec(implementation_key(648)) long IMarkerObject::GetColor ( );
__declspec(implementation_key(649)) void IMarkerObject::PutColor ( long Value );
__declspec(implementation_key(650)) VARIANT_BOOL IMarkerObject::GetVisible ( );
__declspec(implementation_key(651)) void IMarkerObject::PutVisible ( VARIANT_BOOL Value );
__declspec(implementation_key(652)) _bstr_t IMarkerObject::GetValueUnit ( );
__declspec(implementation_key(653)) void IMarkerObject::PutValueUnit ( _bstr_t Value );
__declspec(implementation_key(654)) HRESULT IMarkerObject::AddAxisType ( enum IMarkerValueType Value );
__declspec(implementation_key(655)) VARIANT_BOOL IMarkerInput::GetUsingChannelInput ( );
__declspec(implementation_key(656)) void IMarkerInput::PutUsingChannelInput ( VARIANT_BOOL Value );
__declspec(implementation_key(657)) double IMarkerInput::GetValueEx ( );
__declspec(implementation_key(658)) void IMarkerInput::PutValueEx ( double Value );
__declspec(implementation_key(659)) _variant_t IPairedValueMarkerInput::GetValues ( );
__declspec(implementation_key(660)) HRESULT IPairedValueMarkerInput::SetValues ( VARIANT * Values );
__declspec(implementation_key(661)) long IPairedValueMarkerInput::GetNumberOfPairs ( );
__declspec(implementation_key(662)) void IPairedValueMarkerInput::PutNumberOfPairs ( long Value );
__declspec(implementation_key(663)) double ISingleValueMarkerInput::GetValue ( );
__declspec(implementation_key(664)) void ISingleValueMarkerInput::PutValue ( double Value );
__declspec(implementation_key(665)) long IMarkerObjectsList::GetCount ( );
__declspec(implementation_key(666)) IMarkerObjectPtr IMarkerObjectsList::GetItems ( long Index );
__declspec(implementation_key(667)) void IMarkerObjectsList::PutItems ( long Index, struct IMarkerObject * Value );
__declspec(implementation_key(668)) HRESULT IMarkerObjectsList::Add ( struct IMarkerObject * Value );
__declspec(implementation_key(669)) long IMarkerObjectsList::Remove ( struct IMarkerObject * Value );
__declspec(implementation_key(670)) HRESULT IMarkerObjectsList::Clear ( );
__declspec(implementation_key(671)) HRESULT IMarkerObjectsList::Insert ( long Index, struct IMarkerObject * Value );
__declspec(implementation_key(672)) HRESULT IMarkerObjectsList::Delete ( long Index );
__declspec(implementation_key(673)) _bstr_t IRTCPropertyInfo::GetName ( );
__declspec(implementation_key(674)) enum TRTCoreType IRTCPropertyInfo::GetType ( );
__declspec(implementation_key(675)) long IRTCPropertiesInfo::GetCount ( );
__declspec(implementation_key(676)) IRTCPropertyInfoPtr IRTCPropertiesInfo::GetItems ( long Index );
__declspec(implementation_key(677)) VARIANT_BOOL IRTCModule::GetEnabled ( );
__declspec(implementation_key(678)) void IRTCModule::PutEnabled ( VARIANT_BOOL Value );
__declspec(implementation_key(679)) _bstr_t IRTCModule::GetName ( );
__declspec(implementation_key(680)) _variant_t IRTCModule::GetProperty ( _bstr_t Query );
__declspec(implementation_key(681)) VARIANT_BOOL IRTCModule::SetProperty ( _bstr_t Query, const _variant_t & Value );
__declspec(implementation_key(682)) _variant_t IRTCModule::ExecuteProperty ( _bstr_t Query, const _variant_t & Params );
__declspec(implementation_key(683)) _variant_t IRTCModule::GetDeviceProperty ( _bstr_t Query );
__declspec(implementation_key(684)) VARIANT_BOOL IRTCModule::SetDeviceProperty ( _bstr_t Query, const _variant_t & Value );
__declspec(implementation_key(685)) _variant_t IRTCModule::ExecuteDeviceProperty ( _bstr_t Query, const _variant_t & Params );
__declspec(implementation_key(686)) IRTCPropertiesInfoPtr IRTCModule::GetPropertiesInfo ( _bstr_t Query );
__declspec(implementation_key(687)) IRTCPropertiesInfoPtr IRTCModule::GetDevicePropertiesInfo ( _bstr_t Query );
__declspec(implementation_key(688)) long IRTCModules::GetCount ( );
__declspec(implementation_key(689)) IRTCModulePtr IRTCModules::GetItems ( long Index );
__declspec(implementation_key(690)) VARIANT_BOOL IRTCController::ApplyChanges ( );
__declspec(implementation_key(691)) HRESULT IRTCController::Start ( );
__declspec(implementation_key(692)) HRESULT IRTCController::Stop ( );
__declspec(implementation_key(693)) IRTCModulesPtr IRTCController::GetModules ( );
__declspec(implementation_key(694)) enum TRTCStatus IRTCController::GetStatus ( );
__declspec(implementation_key(695)) HRESULT IRTCController::ReadDefaultValues ( );
__declspec(implementation_key(696)) VARIANT_BOOL IRTCController::IsConfigChanged ( );
__declspec(implementation_key(697)) _bstr_t IRTCController::CheckConfiguration ( );
__declspec(implementation_key(698)) long IRTCController::GetScanCycleFrequency ( );
__declspec(implementation_key(699)) void IRTCController::PutScanCycleFrequency ( long Value );
__declspec(implementation_key(700)) long IRTCControllers::GetCount ( );
__declspec(implementation_key(701)) IRTCControllerPtr IRTCControllers::GetItems ( long Index );
__declspec(implementation_key(702)) HRESULT IRTCControllers::Start ( );
__declspec(implementation_key(703)) HRESULT IRTCControllers::Stop ( );
__declspec(implementation_key(704)) VARIANT_BOOL IRTCControllers::ApplyChanges ( );
__declspec(implementation_key(705)) HRESULT IRTCControllers::ReadDefaultValues ( );
__declspec(implementation_key(706)) VARIANT_BOOL IRTCControllers::IsConfigChanged ( );
__declspec(implementation_key(707)) _bstr_t IRTCControllers::CheckConfiguration ( );
__declspec(implementation_key(708)) IRTCControllersPtr IRTC::GetControllers ( );
__declspec(implementation_key(709)) VARIANT_BOOL ICANPort::SendFrame ( VARIANT_BOOL Extended, long ArbId, struct T_CANFrame Data, long Size );
__declspec(implementation_key(710)) HRESULT ICANPort::EnableOutput ( VARIANT_BOOL Enable );
__declspec(implementation_key(711)) long ICANPort::GetMessageCount ( );
__declspec(implementation_key(712)) VARIANT_BOOL ICANPort::ReadMessage ( double * TimeStamp, long * ArbId, long * DataLo, long * DataHi );
__declspec(implementation_key(713)) HRESULT ICANPort::StartRead ( );
__declspec(implementation_key(714)) HRESULT ICANPort::EndRead ( );
__declspec(implementation_key(715)) _variant_t ICANPort::GetBaudRateList ( );
__declspec(implementation_key(716)) HRESULT ICANPort::SetBaudRate ( long BaudRate );
__declspec(implementation_key(717)) long ICANPort::GetBaudRate ( );
__declspec(implementation_key(718)) long ICANPort::GetTotalMsgCount ( );
__declspec(implementation_key(719)) long ICANPort::GetTotalErrMsgCount ( );
__declspec(implementation_key(720)) HRESULT ICANPort::Capture ( VARIANT_BOOL Status );
__declspec(implementation_key(721)) VARIANT_BOOL ICANPort::GetUseListenOnly ( );
__declspec(implementation_key(722)) void ICANPort::PutUseListenOnly ( VARIANT_BOOL Value );
__declspec(implementation_key(723)) _bstr_t ICANPort::GetInterfaceName ( );
__declspec(implementation_key(724)) VARIANT_BOOL ICAN::GetSupportsOutput ( );
__declspec(implementation_key(725)) long ICAN::GetCount ( );
__declspec(implementation_key(726)) IUnknownPtr ICAN::Get_NewEnum ( );
__declspec(implementation_key(727)) ICANPortPtr ICAN::GetItem ( long Index );
__declspec(implementation_key(728)) _bstr_t IDaq::GetDeviceCode ( long Index );
__declspec(implementation_key(729)) long IDaq::GetCardCount ( );
__declspec(implementation_key(730)) long IDaq::GetDaqType ( );
__declspec(implementation_key(731)) VARIANT_BOOL IDaq::GetDataLost ( );
__declspec(implementation_key(732)) void IDaq::PutDataLost ( VARIANT_BOOL Value );
__declspec(implementation_key(733)) struct DaqDeviceInfo IDaq::GetDeviceInfo ( long Index );
__declspec(implementation_key(734)) long IDaq::SetDeviceCalDate ( long Index, _bstr_t CalDate, _bstr_t Pwd );
__declspec(implementation_key(735)) long IDaq::GetDITrgLevel ( long PinNr, long * TrgLevel, long * ReTrgLevel, unsigned char * Coupling, unsigned char * SupportLevel );
__declspec(implementation_key(736)) long IDaq::SetDITrgLevel ( long PinNr, long TrgLevel, long ReTrgLevel, unsigned char Coupling );
__declspec(implementation_key(737)) long IDaq::GetCNTTrgLevel ( long CNTNr, unsigned char PinType, long * TrgLevel, long * ReTrgLevel, unsigned char * Coupling, unsigned char * SupportLevel );
__declspec(implementation_key(738)) long IDaq::SetCNTTrgLevel ( long CNTNr, unsigned char PinType, long TrgLevel, long ReTrgLevel, unsigned char Coupling );
__declspec(implementation_key(739)) long IDaq::IOControl ( long Msg, const _variant_t & InParam, VARIANT * OutParam );
__declspec(implementation_key(740)) VARIANT_BOOL IDaq::GetCanAutoCalculate ( );
__declspec(implementation_key(741)) ISynchronizationPtr IDaq::CreateSynchronization ( );
__declspec(implementation_key(742)) IChannelGroupsPtr IData::GetGroups ( );
__declspec(implementation_key(743)) long IData::GetSampleRate ( );
__declspec(implementation_key(744)) IChannelPtr IData::FindChannel ( _bstr_t Name );
__declspec(implementation_key(745)) long IData::GetSamples ( );
__declspec(implementation_key(746)) HRESULT IData::GetSamplesAcquired ( long * Mid, long * Dir );
__declspec(implementation_key(747)) IChannelListPtr IData::GetShownChannels ( );
__declspec(implementation_key(748)) IChannelListPtr IData::GetActiveChannels ( );
__declspec(implementation_key(749)) long IData::GetExternalClock ( );
__declspec(implementation_key(750)) DATE IData::GetStartStoreTime ( );
__declspec(implementation_key(751)) IChannelPtr IData::FindChannelByIndex ( struct T_ChIndex Index );
__declspec(implementation_key(752)) struct T_RecordPosition IData::GetCurrentPos ( );
__declspec(implementation_key(753)) void IData::PutCurrentPos ( struct T_RecordPosition Value );
__declspec(implementation_key(754)) struct T_RecordPosition IData::GetEndStamp ( );
__declspec(implementation_key(755)) void IData::PutEndStamp ( struct T_RecordPosition Value );
__declspec(implementation_key(756)) struct T_RecordPosition IData::GetStartStamp ( );
__declspec(implementation_key(757)) void IData::PutStartStamp ( struct T_RecordPosition Value );
__declspec(implementation_key(758)) _bstr_t IData::GetIndexName ( struct T_ChIndex Index );
__declspec(implementation_key(759)) IChannelPtr IData::FindChannelByIndex1 ( long IndexLevel, long I1, long I2, long I3, long I4, long I5 );
__declspec(implementation_key(760)) _bstr_t IData::GetIndexName1 ( long IndexLevel, long I1, long I2, long I3, long I4, long I5 );
__declspec(implementation_key(761)) HRESULT IData::BuildChannelList ( );
__declspec(implementation_key(762)) IChannelListPtr IData::GetAllChannels ( );
__declspec(implementation_key(763)) IChannelListPtr IData::GetUsedChannels ( );
__declspec(implementation_key(764)) HRESULT IData::StartDataSync ( );
__declspec(implementation_key(765)) HRESULT IData::EndDataSync ( );
__declspec(implementation_key(766)) _bstr_t IData::GetIndexNameShort ( struct T_ChIndex ChIndex );
__declspec(implementation_key(767)) _bstr_t IData::GetIndexNameShort1 ( long IndexLevel, long I1, long I2, long I3, long I4, long I5 );
__declspec(implementation_key(768)) DATE IData::GetStartStoreTimeUTC ( );
__declspec(implementation_key(769)) HRESULT IData::ApplyChannels ( );
__declspec(implementation_key(770)) HRESULT IData::SetStartStoreTimeUTC ( DATE Time );
__declspec(implementation_key(771)) HRESULT IData::SetExternalClock ( long Value );
__declspec(implementation_key(772)) VARIANT_BOOL IData::GetExternalTrigger ( );
__declspec(implementation_key(773)) void IData::PutExternalTrigger ( VARIANT_BOOL Value );
__declspec(implementation_key(774)) long IData::GetMaxCalcDelay ( );
__declspec(implementation_key(775)) struct T_RecordPosition IData::GetFirstTimeStamp ( );
__declspec(implementation_key(776)) struct T_RecordPosition IData::GetMRealTimeStamp ( );
__declspec(implementation_key(777)) VARIANT_BOOL IData::GetMeasureMode ( );
__declspec(implementation_key(778)) VARIANT_BOOL IData::GetFreezeMode ( );
__declspec(implementation_key(779)) double IData::GetSampleRateEx ( );
__declspec(implementation_key(780)) double IData::GetCurrentPosD ( );
__declspec(implementation_key(781)) void IData::PutCurrentPosD ( double Value );
__declspec(implementation_key(782)) double IData::GetStartStampD ( );
__declspec(implementation_key(783)) void IData::PutStartStampD ( double Value );
__declspec(implementation_key(784)) double IData::GetEndStampD ( );
__declspec(implementation_key(785)) void IData::PutEndStampD ( double Value );
__declspec(implementation_key(786)) long IData::GetIBRate ( long Level );
__declspec(implementation_key(787)) long IData::GetIBAbsRate ( long Level );
__declspec(implementation_key(788)) long IData::GetIBAbsMidRate ( long Level );
__declspec(implementation_key(789)) long IData::GetIBLevels ( );
__declspec(implementation_key(790)) IInputGroupsPtr IData::GetInputGroups ( );
__declspec(implementation_key(791)) IChannelPtr IData::FindChannelByIndexEx ( const _variant_t & Index );
__declspec(implementation_key(792)) long IData::GetSRDivLCM ( );
__declspec(implementation_key(793)) VARIANT_BOOL IData::GetAnalyseMode ( );
__declspec(implementation_key(794)) HRESULT IData::SelectDataRegion ( double StartPos, double StopPos );
__declspec(implementation_key(795)) long IData::GetCalcDelayLimit ( );
__declspec(implementation_key(796)) _bstr_t IData::GetIndexNameEx ( const _variant_t & Index );
__declspec(implementation_key(797)) double IData::GetRelativeTimeOffset ( );
__declspec(implementation_key(798)) void IData::PutRelativeTimeOffset ( double Value );
__declspec(implementation_key(799)) _bstr_t IData::GetTimestring ( double Time, enum TimeDisplay TimeDisplay, VARIANT_BOOL ForceZeroPrec );
__declspec(implementation_key(800)) IProcessingMarkerListPtr IData::GetProcessingMarkers ( );
__declspec(implementation_key(801)) struct T_ReducedRec IChannel::GetIBValues ( long Index );
__declspec(implementation_key(802)) struct T_ReducedRec IChannel::GetRBValues ( long Index );
__declspec(implementation_key(803)) float IChannel::GetDBValues ( long Index );
__declspec(implementation_key(804)) long IChannel::GetDBBufSize ( );
__declspec(implementation_key(805)) long IChannel::GetDBDataSize ( );
__declspec(implementation_key(806)) long IChannel::GetDBPos ( );
__declspec(implementation_key(807)) long IChannel::GetIBBufSize ( );
__declspec(implementation_key(808)) long IChannel::GetIBDataSize ( );
__declspec(implementation_key(809)) long IChannel::GetIBPos ( );
__declspec(implementation_key(810)) long IChannel::GetRBBufSize ( );
__declspec(implementation_key(811)) long IChannel::GetRBDataSize ( );
__declspec(implementation_key(812)) long IChannel::GetRBPos ( );
__declspec(implementation_key(813)) _bstr_t IChannel::GetName ( );
__declspec(implementation_key(814)) void IChannel::PutName ( _bstr_t Value );
__declspec(implementation_key(815)) double IChannel::GetDBTimeStamp ( long Index );
__declspec(implementation_key(816)) VARIANT_BOOL IChannel::GetUsed ( );
__declspec(implementation_key(817)) void IChannel::PutUsed ( VARIANT_BOOL Value );
__declspec(implementation_key(818)) VARIANT_BOOL IChannel::GetShown ( );
__declspec(implementation_key(819)) void IChannel::PutShown ( VARIANT_BOOL Value );
__declspec(implementation_key(820)) _variant_t IChannel::GetUnscaledData ( );
__declspec(implementation_key(821)) _variant_t IChannel::GetScaledData ( );
__declspec(implementation_key(822)) long IChannel::GetDBAddress ( );
__declspec(implementation_key(823)) long IChannel::GetDataType ( );
__declspec(implementation_key(824)) long IChannel::GetBytes ( );
__declspec(implementation_key(825)) VARIANT_BOOL IChannel::GetAsync ( );
__declspec(implementation_key(826)) HRESULT IChannel::AddSingleSample ( float Value );
__declspec(implementation_key(827)) _variant_t IChannel::GetTSData ( );
__declspec(implementation_key(828)) _variant_t IChannel::GetUnscaledDataEx ( long Start, long Count );
__declspec(implementation_key(829)) float IChannel::ScaleValue ( float Value );
__declspec(implementation_key(830)) HRESULT IChannel::AddAsyncSingleSample ( float Value, double TimeStamp );
__declspec(implementation_key(831)) _variant_t IChannel::GetScaledDataEx ( long Start, long Count );
__declspec(implementation_key(832)) long IChannel::GetSRDiv ( );
__declspec(implementation_key(833)) IChannelGroupPtr IChannel::GetGroup ( );
__declspec(implementation_key(834)) _bstr_t IChannel::GetDescription ( );
__declspec(implementation_key(835)) void IChannel::PutDescription ( _bstr_t Value );
__declspec(implementation_key(836)) _bstr_t IChannel::GetUnit_ ( );
__declspec(implementation_key(837)) void IChannel::PutUnit_ ( _bstr_t Value );
__declspec(implementation_key(838)) HRESULT IChannel::AddAsyncDoubleSample ( double Value, double TimeStamp );
__declspec(implementation_key(839)) HRESULT IChannel::AddAsyncByteSample ( unsigned char Value, double TimeStamp );
__declspec(implementation_key(840)) long IChannel::GetMType ( );
__declspec(implementation_key(841)) void IChannel::PutMType ( long Value );
__declspec(implementation_key(842)) _bstr_t IChannel::GetMeasurement ( );
__declspec(implementation_key(843)) void IChannel::PutMeasurement ( _bstr_t Value );
__declspec(implementation_key(844)) IChannelConnectionPtr IChannel::CreateConnection ( );
__declspec(implementation_key(845)) long IChannel::GetMainDisplayColor ( );
__declspec(implementation_key(846)) void IChannel::PutMainDisplayColor ( long Value );
__declspec(implementation_key(847)) float IChannel::GetTypicalMinValue ( );
__declspec(implementation_key(848)) float IChannel::GetTypicalMaxValue ( );
__declspec(implementation_key(849)) struct T_ChIndex IChannel::GetIndex ( );
__declspec(implementation_key(850)) HRESULT IChannel::GetScaledDataEx1 ( long Start, long Count, VARIANT * Data );
__declspec(implementation_key(851)) HRESULT IChannel::GetUnscaledDataEx1 ( long Start, long Count, VARIANT * Data );
__declspec(implementation_key(852)) _variant_t IChannel::GetTSDataEx ( long Start, long Count );
__declspec(implementation_key(853)) HRESULT IChannel::GetTSDataEx1 ( long Start, long Count, VARIANT * Data );
__declspec(implementation_key(854)) HRESULT IChannel::GetIBValues ( long Pos, float * Min, float * Max, float * Ave, float * Rms );
__declspec(implementation_key(855)) HRESULT IChannel::GetRBValues ( long Pos, float * Min, float * Max, float * Ave, float * Rms );
__declspec(implementation_key(856)) HRESULT IChannel::GetIndex1 ( long * IndexLevel, long * I1, long * I2, long * I3, long * I4, long * I5 );
__declspec(implementation_key(857)) float IChannel::GetUserScaleMin ( );
__declspec(implementation_key(858)) void IChannel::PutUserScaleMin ( float Value );
__declspec(implementation_key(859)) float IChannel::GetUserScaleMax ( );
__declspec(implementation_key(860)) void IChannel::PutUserScaleMax ( float Value );
__declspec(implementation_key(861)) double IChannel::GetScale ( );
__declspec(implementation_key(862)) void IChannel::PutScale ( double Value );
__declspec(implementation_key(863)) double IChannel::GetOffset ( );
__declspec(implementation_key(864)) void IChannel::PutOffset ( double Value );
__declspec(implementation_key(865)) HRESULT IChannel::IncDBSamples ( long Count );
__declspec(implementation_key(866)) HRESULT IChannel::AddSingleSamples ( long Count, const _variant_t & Data, const _variant_t & Timestamps );
__declspec(implementation_key(867)) HRESULT IChannel::SetSRDiv ( long SRDiv );
__declspec(implementation_key(868)) HRESULT IChannel::SetSRDivType ( enum TSRDivType AType );
__declspec(implementation_key(869)) long IChannel::GetExportOrder ( );
__declspec(implementation_key(870)) void IChannel::PutExportOrder ( long Value );
__declspec(implementation_key(871)) long IChannel::GetCalcDelay ( );
__declspec(implementation_key(872)) void IChannel::PutCalcDelay ( long Value );
__declspec(implementation_key(873)) HRESULT IChannel::AddAsyncShortintSample ( char Value, double TimeStamp );
__declspec(implementation_key(874)) HRESULT IChannel::AddAsyncSmallintSample ( short Value, double TimeStamp );
__declspec(implementation_key(875)) HRESULT IChannel::AddAsyncIntegerSample ( long Value, double TimeStamp );
__declspec(implementation_key(876)) HRESULT IChannel::AddAsyncInt64Sample ( __int64 Value, double TimeStamp );
__declspec(implementation_key(877)) long IChannel::GetCalcSRDiv ( );
__declspec(implementation_key(878)) float IChannel::GetChangeThreshold ( );
__declspec(implementation_key(879)) void IChannel::PutChangeThreshold ( float Value );
__declspec(implementation_key(880)) IDiscreteListPtr IChannel::GetDiscreteList ( );
__declspec(implementation_key(881)) HRESULT IChannel::GetChannelSetup ( VARIANT * Data );
__declspec(implementation_key(882)) HRESULT IChannel::SetChannelSetup ( const _variant_t & Data );
__declspec(implementation_key(883)) HRESULT IChannel::SetDataType ( long ADataType );
__declspec(implementation_key(884)) long IChannel::GetBitCount ( );
__declspec(implementation_key(885)) void IChannel::PutBitCount ( long Value );
__declspec(implementation_key(886)) _bstr_t IChannel::GetSettings ( );
__declspec(implementation_key(887)) _bstr_t IChannel::GetChNo ( );
__declspec(implementation_key(888)) VARIANT_BOOL IChannel::GetExported ( );
__declspec(implementation_key(889)) void IChannel::PutExported ( VARIANT_BOOL Value );
__declspec(implementation_key(890)) double IChannel::GetAbsMin ( );
__declspec(implementation_key(891)) double IChannel::GetAbsMax ( );
__declspec(implementation_key(892)) VARIANT_BOOL IChannel::GetIsSingleValue ( );
__declspec(implementation_key(893)) double IChannel::GetSingleValue ( );
__declspec(implementation_key(894)) void IChannel::PutSingleValue ( double Value );
__declspec(implementation_key(895)) HRESULT IChannel::SetFreezeMode ( VARIANT_BOOL Freeze );
__declspec(implementation_key(896)) _bstr_t IChannel::GetLogicalName ( );
__declspec(implementation_key(897)) void IChannel::PutLogicalName ( _bstr_t Value );
__declspec(implementation_key(898)) __int64 IChannel::GetLogicalIndex ( );
__declspec(implementation_key(899)) void IChannel::PutLogicalIndex ( __int64 Value );
__declspec(implementation_key(900)) long IChannel::GetTag ( );
__declspec(implementation_key(901)) void IChannel::PutTag ( long Value );
__declspec(implementation_key(902)) HRESULT IChannel::SetAsync ( VARIANT_BOOL Async );
__declspec(implementation_key(903)) HRESULT IChannel::SetIsSingleValue ( VARIANT_BOOL Value );
__declspec(implementation_key(904)) double IChannel::GetScale_ ( );
__declspec(implementation_key(905)) void IChannel::PutScale_ ( double Value );
__declspec(implementation_key(906)) VARIANT_BOOL IChannel::GetStored ( );
__declspec(implementation_key(907)) void IChannel::PutStored ( VARIANT_BOOL Value );
__declspec(implementation_key(908)) HRESULT IChannel::AddByteSample ( unsigned char Value );
__declspec(implementation_key(909)) HRESULT IChannel::AddShortintSample ( char Value );
__declspec(implementation_key(910)) HRESULT IChannel::AddSmallintSample ( short Value );
__declspec(implementation_key(911)) HRESULT IChannel::AddWordSample ( unsigned short Value );
__declspec(implementation_key(912)) HRESULT IChannel::AddIntegerSample ( long Value );
__declspec(implementation_key(913)) HRESULT IChannel::AddIn64Sample ( __int64 Value );
__declspec(implementation_key(914)) HRESULT IChannel::AddDoubleSample ( double Value );
__declspec(implementation_key(915)) float IChannel::GetValueAtAbsPos ( long Pos, long * SeekPos, VARIANT_BOOL Interpolate );
__declspec(implementation_key(916)) double IChannel::GetValueAtAbsPosDouble ( long Pos, long * SeekPos, VARIANT_BOOL Interpolate );
__declspec(implementation_key(917)) HRESULT IChannel::UpdateXML ( const _variant_t & DOMDocument, const _variant_t & DOMNode, VARIANT_BOOL Write );
__declspec(implementation_key(918)) IArrayInfoPtr IChannel::GetArrayInfo ( );
__declspec(implementation_key(919)) VARIANT_BOOL IChannel::GetArrayChannel ( );
__declspec(implementation_key(920)) void IChannel::PutArrayChannel ( VARIANT_BOOL Value );
__declspec(implementation_key(921)) long IChannel::GetArraySize ( );
__declspec(implementation_key(922)) HRESULT IChannel::AddAsyncData ( const _variant_t & Data, double TimeStamp );
__declspec(implementation_key(923)) HRESULT IChannel::AddData ( const _variant_t & Data );
__declspec(implementation_key(924)) long IChannel::GetOfflineStatus ( );
__declspec(implementation_key(925)) float IChannel::GetExpectedAsyncRate ( );
__declspec(implementation_key(926)) void IChannel::PutExpectedAsyncRate ( float Value );
__declspec(implementation_key(927)) long IChannel::GetFirstIBLevel ( );
__declspec(implementation_key(928)) struct T_ReducedRec IChannel::GetIBValuesEx ( long Level, long Index );
__declspec(implementation_key(929)) long IChannel::GetIBPosEx ( long Level );
__declspec(implementation_key(930)) long IChannel::GetIBDataSizeEx ( long Level );
__declspec(implementation_key(931)) long IChannel::GetSelectorIndexLevel ( );
__declspec(implementation_key(932)) void IChannel::PutSelectorIndexLevel ( long Value );
__declspec(implementation_key(933)) long IChannel::GetSelectorIndexStartLevel ( );
__declspec(implementation_key(934)) void IChannel::PutSelectorIndexStartLevel ( long Value );
__declspec(implementation_key(935)) _variant_t IChannel::GetSelectorIndex ( );
__declspec(implementation_key(936)) void IChannel::PutSelectorIndex ( const _variant_t & Value );
__declspec(implementation_key(937)) _bstr_t IChannel::GetText ( );
__declspec(implementation_key(938)) void IChannel::PutText ( _bstr_t Value );
__declspec(implementation_key(939)) double IChannel::GetFirstX ( );
__declspec(implementation_key(940)) void IChannel::PutFirstX ( double Value );
__declspec(implementation_key(941)) double IChannel::GetSecondX ( );
__declspec(implementation_key(942)) void IChannel::PutSecondX ( double Value );
__declspec(implementation_key(943)) VARIANT_BOOL IChannel::GetIsControlChannel ( );
__declspec(implementation_key(944)) void IChannel::PutIsControlChannel ( VARIANT_BOOL Value );
__declspec(implementation_key(945)) long IChannel::GetControlChannelState ( );
__declspec(implementation_key(946)) void IChannel::PutControlChannelState ( long Value );
__declspec(implementation_key(947)) double IChannel::GetDBValuesDouble ( long Index );
__declspec(implementation_key(948)) HRESULT IChannel::AddAsyncString ( _bstr_t Value, double TimeStamp );
__declspec(implementation_key(949)) HRESULT IChannel::SetAsStringChannel ( long Size );
__declspec(implementation_key(950)) double IChannel::ScaleValueDouble ( double Value );
__declspec(implementation_key(951)) long IChannel::GetDStopDataAvail ( );
__declspec(implementation_key(952)) long IChannel::GetDStopDataAvailDir ( );
__declspec(implementation_key(953)) long IChannel::GetDStartDataAvail ( );
__declspec(implementation_key(954)) _variant_t IChannel::GetIndexEx ( );
__declspec(implementation_key(955)) HRESULT IChannel::ShowChannelSetup ( );
__declspec(implementation_key(956)) long IChannel::GetTSAddress ( );
__declspec(implementation_key(957)) long IChannel::GetControlChannelFlags ( );
__declspec(implementation_key(958)) void IChannel::PutControlChannelFlags ( long Value );
__declspec(implementation_key(959)) enum TSRDivType IChannel::GetSRDivType ( );
__declspec(implementation_key(960)) HRESULT IChannel::FastCalc ( );
__declspec(implementation_key(961)) HRESULT IChannel::FastCalcInt32 ( long Min, long Max, double Ave, double Rms );
__declspec(implementation_key(962)) HRESULT IChannel::AddIntegerSampleWithCalc ( long Value );
__declspec(implementation_key(963)) HRESULT IChannel::AddSmallintSampleWithCalc ( short Value );
__declspec(implementation_key(964)) HRESULT IChannel::AddShortintSampleWithCalc ( char Value );
__declspec(implementation_key(965)) HRESULT IChannel::FastCalcInt16 ( short Min, short Max, float Ave, float Rms );
__declspec(implementation_key(966)) IViewInfoPtr IChannel::GetViewInfo ( );
__declspec(implementation_key(967)) HRESULT IChannel::AddAsyncBinarySample ( double TimeStamp, const _variant_t & Data );
__declspec(implementation_key(968)) long IChannel::GetBinAvgSampleSize ( );
__declspec(implementation_key(969)) void IChannel::PutBinAvgSampleSize ( long Value );
__declspec(implementation_key(970)) HRESULT IChannel::GetBinaryDataAtPos ( long Pos, VARIANT * Data );
__declspec(implementation_key(971)) long IChannel::GetGetBinAddress ( );
__declspec(implementation_key(972)) __int64 IChannel::GetBinAbsPos ( );
__declspec(implementation_key(973)) long IChannel::GetBinBufSize ( );
__declspec(implementation_key(974)) HRESULT IChannel::ValueChanged ( );
__declspec(implementation_key(975)) HRESULT IChannel::StartFastCalc ( );
__declspec(implementation_key(976)) VARIANT_BOOL IChannel::GetKeepValues ( );
__declspec(implementation_key(977)) void IChannel::PutKeepValues ( VARIANT_BOOL Value );
__declspec(implementation_key(978)) __int64 IChannel::GetDBAddress64 ( );
__declspec(implementation_key(979)) __int64 IChannel::GetTSAddress64 ( );
__declspec(implementation_key(980)) VARIANT_BOOL IChannel::GetCalcSingleValue ( );
__declspec(implementation_key(981)) double IChannel::GetCustExportRate ( );
__declspec(implementation_key(982)) IPropertiesPtr IChannel::GetProperties ( );
__declspec(implementation_key(983)) HRESULT IChannel::AddAsyncWordSample ( unsigned short Value, double TimeStamp );
__declspec(implementation_key(984)) _variant_t IChannel::GetCustomProp ( _bstr_t Name );
__declspec(implementation_key(985)) __int64 IChannel::GetBinAddress64 ( );
__declspec(implementation_key(986)) _variant_t IChannel::GetScaledDataDoubleEx ( long Start, long Count );
__declspec(implementation_key(987)) void IChannel::PutCustExportRate ( double Value );
__declspec(implementation_key(988)) HRESULT IChannel::SetAsCANFDMessage ( );
__declspec(implementation_key(989)) long IChannel::GetExpectedAsyncRateType ( );
__declspec(implementation_key(990)) void IChannel::PutExpectedAsyncRateType ( long Value );
__declspec(implementation_key(991)) double IChannel::GetValueAtRelTimeDouble ( double Time, long * AsyncSeekPos, VARIANT_BOOL Interpolate, long Ind, enum ComplexPresentation ComplexPresent );
__declspec(implementation_key(992)) double IChannel::DBValuesEx ( long Index, enum ComplexPresentation ComplexPresent );
__declspec(implementation_key(993)) _bstr_t IChannel::GetLongName ( );
__declspec(implementation_key(994)) VARIANT_BOOL IChannel::GetShowLongName ( );
__declspec(implementation_key(995)) _bstr_t IChannel::GetDisplayName ( );
__declspec(implementation_key(996)) double IChannel::GetWarningLevelHigh ( );
__declspec(implementation_key(997)) void IChannel::PutWarningLevelHigh ( double Value );
__declspec(implementation_key(998)) double IChannel::GetWarningLevelLow ( );
__declspec(implementation_key(999)) void IChannel::PutWarningLevelLow ( double Value );
__declspec(implementation_key(1000)) double IChannel::GetCriticalLevelHigh ( );
__declspec(implementation_key(1001)) void IChannel::PutCriticalLevelHigh ( double Value );
__declspec(implementation_key(1002)) double IChannel::GetCriticalLevelLow ( );
__declspec(implementation_key(1003)) void IChannel::PutCriticalLevelLow ( double Value );
__declspec(implementation_key(1004)) __int64 IChannel::GetValueAtAbsPosInt64 ( long Pos, long * SeekPos, VARIANT_BOOL Interpolate );
__declspec(implementation_key(1005)) double IChannel::GetSampleRate ( );
__declspec(implementation_key(1006)) double IChannel::CalcDataScale ( );
__declspec(implementation_key(1007)) double IChannel::CalcDataOffset ( );
__declspec(implementation_key(1008)) long IChannel::GetDigitsAfterDecPoint ( );
__declspec(implementation_key(1009)) HRESULT IChannel::AddAsyncLongwordSample ( unsigned long Value, double TimeStamp );
__declspec(implementation_key(1010)) HRESULT IChannel::AddLongwordSample ( unsigned long Value );
__declspec(implementation_key(1011)) HRESULT IChannel::SetCustomProp ( _bstr_t Name, const _variant_t & Value );
__declspec(implementation_key(1012)) VARIANT_BOOL IChannel::GetIsScaleEnabled ( );
__declspec(implementation_key(1013)) VARIANT_BOOL IChannel::GetIsDoublePrecision ( );
__declspec(implementation_key(1014)) VARIANT_BOOL IChannel::SendMessageEvent ( _bstr_t MsgHeader, _bstr_t MsgData, BSTR * MsgOut );
__declspec(implementation_key(1015)) VARIANT_BOOL IChannel::SendMessageToOwnerEvent ( _bstr_t MsgHeader, _bstr_t MsgData, BSTR * MsgOut );
__declspec(implementation_key(1016)) long IChannelList::GetCount ( );
__declspec(implementation_key(1017)) IChannelPtr IChannelList::GetItem ( long Index );
__declspec(implementation_key(1018)) IUnknownPtr IChannelList::Get_NewEnum ( );
__declspec(implementation_key(1019)) _bstr_t IChannelGroup::GetName ( );
__declspec(implementation_key(1020)) long IChannelGroup::GetExportRate ( );
__declspec(implementation_key(1021)) void IChannelGroup::PutExportRate ( long Value );
__declspec(implementation_key(1022)) _bstr_t IChannelGroup::GetIndexName ( struct T_ChIndex Index );
__declspec(implementation_key(1023)) long IChannelGroups::GetCount ( );
__declspec(implementation_key(1024)) IChannelGroupPtr IChannelGroups::GetItem ( long Index );
__declspec(implementation_key(1025)) IUnknownPtr IChannelGroups::Get_NewEnum ( );
__declspec(implementation_key(1026)) IChannelPtr IPluginGroup::MountChannel ( long DataType, VARIANT_BOOL Async, long DBSize );
__declspec(implementation_key(1027)) HRESULT IPluginGroup::ClearAllChannels ( );
__declspec(implementation_key(1028)) HRESULT IPluginGroup::UnmountChannel ( struct IChannel * * Channel );
__declspec(implementation_key(1029)) HRESULT IPluginGroup::AddIndexName ( long Level, const _variant_t & Ind, _bstr_t Name );
__declspec(implementation_key(1030)) IChannelPtr IPluginGroup::MountChannelEx ( _bstr_t PluginGUID, long IndexLevel, const _variant_t & Ind );
__declspec(implementation_key(1031)) IChannelPtr IPluginGroup::FindChannel ( _bstr_t PluginGUID, long IndexLevel, const _variant_t & Ind, VARIANT_BOOL AllowMount );
__declspec(implementation_key(1032)) IInputGroupPtr IPluginGroup::MountInputGroup ( _bstr_t PluginGUID, const _variant_t & Index );
__declspec(implementation_key(1033)) HRESULT IPluginGroup::AddIndexNameEx ( _bstr_t PluginGUID, long Level, const _variant_t & Ind, _bstr_t Name );
__declspec(implementation_key(1034)) IInputGroupPtr IPluginGroup::FindInputGroup ( _bstr_t PluginGUID, long IndexLevel, const _variant_t & Ind );
__declspec(implementation_key(1035)) _variant_t IDataSection::ReadData ( struct IChannel * Channel, VARIANT * Timestamps );
__declspec(implementation_key(1036)) DATE IDataSection::GetTime ( );
__declspec(implementation_key(1037)) HRESULT IDataSection::ReadData1 ( struct IChannel * Channel, VARIANT * Data, VARIANT * Timestamps );
__declspec(implementation_key(1038)) long IDataSection::GetDataCount ( );
__declspec(implementation_key(1039)) long IDataSection::GetTrigPos ( );
__declspec(implementation_key(1040)) long IDataSections::GetCount ( );
__declspec(implementation_key(1041)) IUnknownPtr IDataSections::Get_NewEnum ( );
__declspec(implementation_key(1042)) IDataSectionPtr IDataSections::GetItem ( long Index );
__declspec(implementation_key(1043)) HRESULT ILoadEngine::ReloadBlock ( long Num );
__declspec(implementation_key(1044)) long ILoadEngine::GetNumBlocks ( );
__declspec(implementation_key(1045)) IDataSectionsPtr ILoadEngine::GetDataSections ( );
__declspec(implementation_key(1046)) VARIANT_BOOL ILoadEngine::GetReducedOnly ( );
__declspec(implementation_key(1047)) HRESULT ILoadEngine::CloseFile ( );
__declspec(implementation_key(1048)) VARIANT_BOOL ILoadEngine::GetFileOpened ( );
__declspec(implementation_key(1049)) HRESULT ILoadEngine::ShrinkFile ( _bstr_t FileName );
__declspec(implementation_key(1050)) IVideoLoadEnginesPtr ILoadEngine::GetVideoLoadEngines ( );
__declspec(implementation_key(1051)) HRESULT ILoadEngine::Reload ( struct T_RecordPosition Start, struct T_RecordPosition Stop );
__declspec(implementation_key(1052)) HRESULT ILoadEngine::StartDBLoad ( struct T_RecordPosition Start, struct T_RecordPosition Stop, long BlockSize );
__declspec(implementation_key(1053)) VARIANT_BOOL ILoadEngine::NextDBLoad ( );
__declspec(implementation_key(1054)) HRESULT ILoadEngine::StartVideoCompress ( );
__declspec(implementation_key(1055)) VARIANT_BOOL ILoadEngine::StopVideoCompress ( );
__declspec(implementation_key(1056)) long ILoadEngine::GetVideoCompressDone ( );
__declspec(implementation_key(1057)) VARIANT_BOOL ILoadEngine::IsVideoCompressDone ( );
__declspec(implementation_key(1058)) HRESULT ILoadEngine::ReloadEx ( long StartBlock, long EndBlock, struct IChannel * Channel, long MinLevel );
__declspec(implementation_key(1059)) double ILoadEngine::GetDuration ( );
__declspec(implementation_key(1060)) HRESULT ILoadEngine::EnterLoadSync ( );
__declspec(implementation_key(1061)) HRESULT ILoadEngine::LeaveLoadSync ( );
__declspec(implementation_key(1062)) _bstr_t ILoadEngine::GetFileName ( );
__declspec(implementation_key(1063)) enum ConnTypes IChannelConnection::GetAType ( );
__declspec(implementation_key(1064)) void IChannelConnection::PutAType ( enum ConnTypes Value );
__declspec(implementation_key(1065)) long IChannelConnection::GetNumValues ( );
__declspec(implementation_key(1066)) long IChannelConnection::GetNumBlocks ( );
__declspec(implementation_key(1067)) _variant_t IChannelConnection::GetDataValues ( long NumValues );
__declspec(implementation_key(1068)) _variant_t IChannelConnection::GetDataBlocks ( long NumBlocks );
__declspec(implementation_key(1069)) long IChannelConnection::GetOverlap ( );
__declspec(implementation_key(1070)) void IChannelConnection::PutOverlap ( long Value );
__declspec(implementation_key(1071)) long IChannelConnection::GetBlockSize ( );
__declspec(implementation_key(1072)) void IChannelConnection::PutBlockSize ( long Value );
__declspec(implementation_key(1073)) HRESULT IChannelConnection::Reset ( );
__declspec(implementation_key(1074)) IChannelPtr IChannelConnection::GetChannel ( );
__declspec(implementation_key(1075)) HRESULT IChannelConnection::GetDataValues1 ( long NumValues, VARIANT * Data );
__declspec(implementation_key(1076)) HRESULT IChannelConnection::GetDataBlocks1 ( long NumBlocks, VARIANT * Data );
__declspec(implementation_key(1077)) _variant_t IChannelConnection::GetTSValues ( long NumValues );
__declspec(implementation_key(1078)) _variant_t IChannelConnection::GetTSBlocks ( long NumBlocks );
__declspec(implementation_key(1079)) HRESULT IChannelConnection::GetTSValues1 ( long NumValues, VARIANT * Data );
__declspec(implementation_key(1080)) HRESULT IChannelConnection::GetTSBlocks1 ( long NumBlocks, VARIANT * Data );
__declspec(implementation_key(1081)) HRESULT IChannelConnection::Start ( );
__declspec(implementation_key(1082)) _bstr_t IChannelGroup2::GetIndexNameShort ( struct T_ChIndex Index );
__declspec(implementation_key(1083)) enum AOOperationMode IAOGroup::GetOperationMode ( );
__declspec(implementation_key(1084)) void IAOGroup::PutOperationMode ( enum AOOperationMode Value );
__declspec(implementation_key(1085)) long IAOGroup::GetSampleRate ( );
__declspec(implementation_key(1086)) void IAOGroup::PutSampleRate ( long Value );
__declspec(implementation_key(1087)) float IAOGroup::GetStopTime ( );
__declspec(implementation_key(1088)) void IAOGroup::PutStopTime ( float Value );
__declspec(implementation_key(1089)) float IAOGroup::GetStartTime ( );
__declspec(implementation_key(1090)) void IAOGroup::PutStartTime ( float Value );
__declspec(implementation_key(1091)) float IAOGroup::GetStartFreq ( );
__declspec(implementation_key(1092)) void IAOGroup::PutStartFreq ( float Value );
__declspec(implementation_key(1093)) float IAOGroup::GetStopFreq ( );
__declspec(implementation_key(1094)) void IAOGroup::PutStopFreq ( float Value );
__declspec(implementation_key(1095)) float IAOGroup::GetDeltaFreq ( );
__declspec(implementation_key(1096)) void IAOGroup::PutDeltaFreq ( float Value );
__declspec(implementation_key(1097)) VARIANT_BOOL IAOGroup::GetLogSweep ( );
__declspec(implementation_key(1098)) void IAOGroup::PutLogSweep ( VARIANT_BOOL Value );
__declspec(implementation_key(1099)) enum AOSweepMode IAOGroup::GetSweepMode ( );
__declspec(implementation_key(1100)) void IAOGroup::PutSweepMode ( enum AOSweepMode Value );
__declspec(implementation_key(1101)) float IAOGroup::GetFreq ( );
__declspec(implementation_key(1102)) void IAOGroup::PutFreq ( float Value );
__declspec(implementation_key(1103)) float IAOGroup::GetAmplChangeFactor ( );
__declspec(implementation_key(1104)) void IAOGroup::PutAmplChangeFactor ( float Value );
__declspec(implementation_key(1105)) float IAOGroup::GetDCChangeFactor ( );
__declspec(implementation_key(1106)) void IAOGroup::PutDCChangeFactor ( float Value );
__declspec(implementation_key(1107)) float IAOGroup::GetPhaseChangeFactor ( );
__declspec(implementation_key(1108)) void IAOGroup::PutPhaseChangeFactor ( float Value );
__declspec(implementation_key(1109)) float IAOGroup::GetFreqChangeFactor ( );
__declspec(implementation_key(1110)) void IAOGroup::PutFreqChangeFactor ( float Value );
__declspec(implementation_key(1111)) VARIANT_BOOL IAOGroup::GetShowInfoChannels ( );
__declspec(implementation_key(1112)) void IAOGroup::PutShowInfoChannels ( VARIANT_BOOL Value );
__declspec(implementation_key(1113)) VARIANT_BOOL IAOGroup::GetControlsClock ( );
__declspec(implementation_key(1114)) IChannelListPtr IAOGroup::GetAOChannels ( );
__declspec(implementation_key(1115)) long ITriggerCondition::GetMode ( );
__declspec(implementation_key(1116)) void ITriggerCondition::PutMode ( long Value );
__declspec(implementation_key(1117)) long ITriggerCondition::GetTrigType ( );
__declspec(implementation_key(1118)) void ITriggerCondition::PutTrigType ( long Value );
__declspec(implementation_key(1119)) long ITriggerCondition::GetDirection ( );
__declspec(implementation_key(1120)) void ITriggerCondition::PutDirection ( long Value );
__declspec(implementation_key(1121)) long ITriggerCondition::GetTrigValue ( );
__declspec(implementation_key(1122)) void ITriggerCondition::PutTrigValue ( long Value );
__declspec(implementation_key(1123)) float ITriggerCondition::GetLevel1 ( );
__declspec(implementation_key(1124)) void ITriggerCondition::PutLevel1 ( float Value );
__declspec(implementation_key(1125)) float ITriggerCondition::GetLevel2 ( );
__declspec(implementation_key(1126)) void ITriggerCondition::PutLevel2 ( float Value );
__declspec(implementation_key(1127)) IChannelListPtr ITriggerCondition::GetChannels ( );
__declspec(implementation_key(1128)) HRESULT ITriggerCondition::AddChannel ( struct IChannel * Ch );
__declspec(implementation_key(1129)) HRESULT ITriggerCondition::DeleteChannel ( long Index );
__declspec(implementation_key(1130)) HRESULT ITriggerCondition::ClearChannels ( );
__declspec(implementation_key(1131)) long ITriggerCondition::GetDirection1 ( );
__declspec(implementation_key(1132)) void ITriggerCondition::PutDirection1 ( long Value );
__declspec(implementation_key(1133)) double ITriggerCondition::GetDeltaTime ( );
__declspec(implementation_key(1134)) void ITriggerCondition::PutDeltaTime ( double Value );
__declspec(implementation_key(1135)) double ITriggerCondition::GetTimeValue ( );
__declspec(implementation_key(1136)) void ITriggerCondition::PutTimeValue ( double Value );
__declspec(implementation_key(1137)) long ITriggerCondition::GetTimeUnit ( );
__declspec(implementation_key(1138)) void ITriggerCondition::PutTimeUnit ( long Value );
__declspec(implementation_key(1139)) long ITriggerCondition::GetTimeCond ( );
__declspec(implementation_key(1140)) void ITriggerCondition::PutTimeCond ( long Value );
__declspec(implementation_key(1141)) long ITriggerCondition::GetTimeFormat ( );
__declspec(implementation_key(1142)) void ITriggerCondition::PutTimeFormat ( long Value );
__declspec(implementation_key(1143)) long ITriggerCondList::GetCount ( );
__declspec(implementation_key(1144)) IUnknownPtr ITriggerCondList::Get_NewEnum ( );
__declspec(implementation_key(1145)) ITriggerConditionPtr ITriggerCondList::GetItem ( long Index );
__declspec(implementation_key(1146)) ITriggerConditionPtr ITriggerCondList::Add ( );
__declspec(implementation_key(1147)) HRESULT ITriggerCondList::Remove ( long Ind );
__declspec(implementation_key(1148)) ITriggerCondListPtr ITrig::GetOrList ( );
__declspec(implementation_key(1149)) ITriggerCondListPtr ITrig::GetNotOrList ( );
__declspec(implementation_key(1150)) long ITrig::GetTrigIndex ( );
__declspec(implementation_key(1151)) HRESULT ITrig::GetTrigIndexEx ( long * CondIndex, long * ChIndex, struct IChannel * * Ch );
__declspec(implementation_key(1152)) VARIANT_BOOL ITrigger::GetPreTimeUsed ( );
__declspec(implementation_key(1153)) void ITrigger::PutPreTimeUsed ( VARIANT_BOOL Value );
__declspec(implementation_key(1154)) VARIANT_BOOL ITrigger::GetPostTimeUsed ( );
__declspec(implementation_key(1155)) void ITrigger::PutPostTimeUsed ( VARIANT_BOOL Value );
__declspec(implementation_key(1156)) float ITrigger::GetPreTime ( );
__declspec(implementation_key(1157)) void ITrigger::PutPreTime ( float Value );
__declspec(implementation_key(1158)) float ITrigger::GetPostTime ( );
__declspec(implementation_key(1159)) void ITrigger::PutPostTime ( float Value );
__declspec(implementation_key(1160)) ITrigPtr ITrigger::GetStartTrig ( );
__declspec(implementation_key(1161)) ITrigPtr ITrigger::GetStopTrig ( );
__declspec(implementation_key(1162)) VARIANT_BOOL ITrigger::GetHoldoffTimeUsed ( );
__declspec(implementation_key(1163)) void ITrigger::PutHoldoffTimeUsed ( VARIANT_BOOL Value );
__declspec(implementation_key(1164)) float ITrigger::GetHoldoffTime ( );
__declspec(implementation_key(1165)) void ITrigger::PutHoldoffTime ( float Value );
__declspec(implementation_key(1166)) VARIANT_BOOL ITrigger::GetPostTimeExtensionUsed ( );
__declspec(implementation_key(1167)) void ITrigger::PutPostTimeExtensionUsed ( VARIANT_BOOL Value );
__declspec(implementation_key(1168)) ITrigPtr IAlarmCond::GetTrigger ( );
__declspec(implementation_key(1169)) ITrigPtr IAlarmCond::GetStopTrigger ( );
__declspec(implementation_key(1170)) long IAlarmCond::GetIndex ( );
__declspec(implementation_key(1171)) long IAlarmCond::GetStopOption ( );
__declspec(implementation_key(1172)) void IAlarmCond::PutStopOption ( long Value );
__declspec(implementation_key(1173)) float IAlarmCond::GetStopTime ( );
__declspec(implementation_key(1174)) void IAlarmCond::PutStopTime ( float Value );
__declspec(implementation_key(1175)) VARIANT_BOOL IAlarmCond::GetAvail ( );
__declspec(implementation_key(1176)) VARIANT_BOOL IAlarmCond::GetStatus ( );
__declspec(implementation_key(1177)) HRESULT IAlarmCond::EndAlarm ( );
__declspec(implementation_key(1178)) _bstr_t IAlarmCond::GetName ( );
__declspec(implementation_key(1179)) _bstr_t IAlarmCond::GetCustomName ( );
__declspec(implementation_key(1180)) void IAlarmCond::PutCustomName ( _bstr_t Value );
__declspec(implementation_key(1181)) long IAlarms::GetCount ( );
__declspec(implementation_key(1182)) long IAlarms::GetActiveCount ( );
__declspec(implementation_key(1183)) IAlarmCondPtr IAlarms::GetItem ( long I );
__declspec(implementation_key(1184)) IAlarmCondPtr IAlarms::GetActiveItem ( long I );
__declspec(implementation_key(1185)) IAlarmCondPtr IAlarms::Add ( );
__declspec(implementation_key(1186)) HRESULT IAlarms::Remove ( long Index );
__declspec(implementation_key(1187)) HRESULT IUserInterface::ShowTrigCondSetup ( struct ITriggerCondition * Cond );
__declspec(implementation_key(1188)) HRESULT IUserInterface::ChangeSetupScreen ( _bstr_t ScreenName );
__declspec(implementation_key(1189)) IChannelListPtr IMathItem::GetInputChannels ( );
__declspec(implementation_key(1190)) IChannelListPtr IMathItem::GetOutputChannels ( );
__declspec(implementation_key(1191)) VARIANT_BOOL IMathItem::GetLastStep ( );
__declspec(implementation_key(1192)) HRESULT IChannelListEx::AddCh ( struct IChannel * Ch );
__declspec(implementation_key(1193)) HRESULT IChannelListEx::Clear ( );
__declspec(implementation_key(1194)) HRESULT IChannelListEx::SetCh ( long Index, struct IChannel * Ch );
__declspec(implementation_key(1195)) long IChannelListEx::GetCount ( );
__declspec(implementation_key(1196)) IChannelPtr IChannelListEx::GetItem ( long Index );
__declspec(implementation_key(1197)) HRESULT IChannelListEx::DeleteCh ( long Index );
__declspec(implementation_key(1198)) IChannelPtr IImportGroup::MountChannel ( );
__declspec(implementation_key(1199)) long ICNTGroup::GetCount ( );
__declspec(implementation_key(1200)) IUnknownPtr ICNTGroup::Get_NewEnum ( );
__declspec(implementation_key(1201)) IChannelPtr ICNTGroup::GetItem ( long Index );
__declspec(implementation_key(1202)) long ICntChannel::GetCntMode ( );
__declspec(implementation_key(1203)) long ICntChannel::GetCntFilter ( );
__declspec(implementation_key(1204)) long ICntChannel::GetBaseMode ( );
__declspec(implementation_key(1205)) IChannelPtr ICntChannel::GetCardChannel0 ( );
__declspec(implementation_key(1206)) IChannelPtr ICntChannel::GetCardChannel1 ( );
__declspec(implementation_key(1207)) ICntChannelPtr ICntChannel::GetCntPair ( );
__declspec(implementation_key(1208)) long ICntChannel::GetCntUpDownMode ( );
__declspec(implementation_key(1209)) long ICntChannel::GetCntNewValueUpdateMode ( );
__declspec(implementation_key(1210)) IDigitalTrigLevelPtr ICntChannel::GetTrigLevels ( long Index );
__declspec(implementation_key(1211)) long ICntChannel::GetCntSource ( );
__declspec(implementation_key(1212)) VARIANT_BOOL ICntChannel::GetCntSourceInv ( );
__declspec(implementation_key(1213)) IChannelPtr ICntChannel::GetDIChannels ( long Index );
__declspec(implementation_key(1214)) VARIANT_BOOL ICntChannel::GetCntResetOnStartMeasure ( );
__declspec(implementation_key(1215)) VARIANT_BOOL ICntChannel::GetAdvCntMode ( );
__declspec(implementation_key(1216)) VARIANT_BOOL ICntChannel::GetCntEventWithZero ( );
__declspec(implementation_key(1217)) VARIANT_BOOL ICntChannel::GetCntDoManualReset ( );
__declspec(implementation_key(1218)) long ICntChannel::GetCntGate ( );
__declspec(implementation_key(1219)) VARIANT_BOOL ICntChannel::GetCntGateInv ( );
__declspec(implementation_key(1220)) long ICntChannel::GetCntAux ( );
__declspec(implementation_key(1221)) VARIANT_BOOL ICntChannel::GetCntAuxInv ( );
__declspec(implementation_key(1222)) VARIANT_BOOL ICntChannel::GetCanAutoCalculate ( );
__declspec(implementation_key(1223)) long ICntChannel::GetCntEncoderMode ( );
__declspec(implementation_key(1224)) VARIANT_BOOL ICntChannel::GetCntEncoderZero ( );
__declspec(implementation_key(1225)) VARIANT_BOOL ICntChannel::GetCntSignalZero ( );
__declspec(implementation_key(1226)) VARIANT_BOOL ICntChannel::GetTrigLevelsCombined ( );
__declspec(implementation_key(1227)) VARIANT_BOOL ICntChannel::GetSetupShown ( );
__declspec(implementation_key(1228)) IChannelPtr ITrigInfo::GetChannel ( );
__declspec(implementation_key(1229)) long ITrigInfo::GetMode ( );
__declspec(implementation_key(1230)) long ITrigInfo::GetDirection ( );
__declspec(implementation_key(1231)) double ITrigInfo::GetLevel1 ( );
__declspec(implementation_key(1232)) double ITrigInfo::GetLevel2 ( );
__declspec(implementation_key(1233)) long ITrigInfo::GetTrigValue ( );
__declspec(implementation_key(1234)) double ITrigInfo::GetDeltaTime ( );
__declspec(implementation_key(1235)) long ITrigInfo::GetDirection1 ( );
__declspec(implementation_key(1236)) VARIANT_BOOL ITrigInfo::GetManual ( );
__declspec(implementation_key(1237)) long IEvent::GetType_ ( );
__declspec(implementation_key(1238)) _variant_t IEvent::GetData ( );
__declspec(implementation_key(1239)) long IEvent::GetPosMid ( );
__declspec(implementation_key(1240)) long IEvent::GetPosDir ( );
__declspec(implementation_key(1241)) double IEvent::GetTimeStamp ( );
__declspec(implementation_key(1242)) ITrigInfoPtr IEvent::GetTrigInfo ( );
__declspec(implementation_key(1243)) long IEventList::GetCount ( );
__declspec(implementation_key(1244)) IUnknownPtr IEventList::Get_NewEnum ( );
__declspec(implementation_key(1245)) IEventPtr IEventList::GetItem ( long Index );
__declspec(implementation_key(1246)) _bstr_t IDisplayFrameTemplate::GetGroupName ( );
__declspec(implementation_key(1247)) void IDisplayFrameTemplate::PutGroupName ( _bstr_t Value );
__declspec(implementation_key(1248)) _bstr_t IDisplayFrameTemplate::GetTemplateName ( );
__declspec(implementation_key(1249)) void IDisplayFrameTemplate::PutTemplateName ( _bstr_t Value );
__declspec(implementation_key(1250)) _variant_t IDisplayFrameTemplate::GetSetupDOMDoc ( );
__declspec(implementation_key(1251)) _variant_t IDisplayFrameTemplate::CreateCustomGroupAndControl ( _bstr_t CustomVCGuid, _bstr_t GroupName, _bstr_t ControlName, long GroupInd, float Left, float Width, float Top, float Height );
__declspec(implementation_key(1252)) _variant_t IDisplayFrameTemplate::CreateGroupAndControl ( _bstr_t GroupName, _bstr_t ControlName, long GroupInd, float Left, float Width, float Top, float Height );
__declspec(implementation_key(1253)) HRESULT IDisplayFrameTemplate::AddChannel ( const _variant_t & GraphNode, long Ind, struct IChannel * Ch );
__declspec(implementation_key(1254)) HRESULT IDisplayFrameTemplate::AddItemChannel ( const _variant_t & GraphNode, long Ind, struct IChannel * Ch, long ItemInd );
__declspec(implementation_key(1255)) VARIANT_BOOL IDisplayFrameTemplate::GetDoUpdateFromXML ( );
__declspec(implementation_key(1256)) void IDisplayFrameTemplate::PutDoUpdateFromXML ( VARIANT_BOOL Value );
__declspec(implementation_key(1257)) long IDisplayFrameTemplates::GetCount ( );
__declspec(implementation_key(1258)) IUnknownPtr IDisplayFrameTemplates::Get_NewEnum ( );
__declspec(implementation_key(1259)) IDisplayFrameTemplatePtr IDisplayFrameTemplates::GetItem ( long Index );
__declspec(implementation_key(1260)) IDisplayFrameTemplatePtr IDisplayFrameTemplates::Add ( );
__declspec(implementation_key(1261)) HRESULT IDisplayFrameTemplates::Clear ( );
__declspec(implementation_key(1262)) IDisplayFrameTemplatesPtr IDisplayTemplate::GetDisplayFrameTemplates ( );
__declspec(implementation_key(1263)) long IDisplayTemplate::GetDW ( );
__declspec(implementation_key(1264)) long IDisplayTemplate::GetDH ( );
__declspec(implementation_key(1265)) HRESULT IIndexChanger::ChangePluginChIndex ( _bstr_t Guid, const _variant_t & OldIndex, const _variant_t & NewIndex );
__declspec(implementation_key(1266)) HRESULT IIndexChanger::ChangePluginChIndex1 ( _bstr_t Guid, struct IChannel * Ch, const _variant_t & NewIndex );
__declspec(implementation_key(1267)) long IAxisViewInfo::GetAxisViewType ( );
__declspec(implementation_key(1268)) void IAxisViewInfo::PutAxisViewType ( long Value );
__declspec(implementation_key(1269)) VARIANT_BOOL IAxisViewInfo::GetReverseAxis ( );
__declspec(implementation_key(1270)) void IAxisViewInfo::PutReverseAxis ( VARIANT_BOOL Value );
__declspec(implementation_key(1271)) IChannelPtr IAxisViewInfo::GetCursorChannel ( );
__declspec(implementation_key(1272)) void IAxisViewInfo::PutCursorChannel ( struct IChannel * Value );
__declspec(implementation_key(1273)) enum TAxisType IAxisDef::GetAxisType ( );
__declspec(implementation_key(1274)) void IAxisDef::PutAxisType ( enum TAxisType Value );
__declspec(implementation_key(1275)) double IAxisDef::GetStartValue ( );
__declspec(implementation_key(1276)) void IAxisDef::PutStartValue ( double Value );
__declspec(implementation_key(1277)) double IAxisDef::GetStepValue ( );
__declspec(implementation_key(1278)) void IAxisDef::PutStepValue ( double Value );
__declspec(implementation_key(1279)) double IAxisDef::GetFloatValues ( long Index );
__declspec(implementation_key(1280)) void IAxisDef::PutFloatValues ( long Index, double Value );
__declspec(implementation_key(1281)) _bstr_t IAxisDef::GetStringValues ( long Index );
__declspec(implementation_key(1282)) void IAxisDef::PutStringValues ( long Index, _bstr_t Value );
__declspec(implementation_key(1283)) long IAxisDef::GetSize ( );
__declspec(implementation_key(1284)) _bstr_t IAxisDef::GetName ( );
__declspec(implementation_key(1285)) void IAxisDef::PutName ( _bstr_t Value );
__declspec(implementation_key(1286)) _bstr_t IAxisDef::Get_Unit ( );
__declspec(implementation_key(1287)) void IAxisDef::Put_Unit ( _bstr_t Value );
__declspec(implementation_key(1288)) long IAxisDef::GetPrecision ( );
__declspec(implementation_key(1289)) void IAxisDef::PutPrecision ( long Value );
__declspec(implementation_key(1290)) IChannelPtr IAxisDef::GetCursorChannel ( );
__declspec(implementation_key(1291)) void IAxisDef::PutCursorChannel ( struct IChannel * Value );
__declspec(implementation_key(1292)) IAxisViewInfoPtr IAxisDef::GetAxisViewInfo ( );
__declspec(implementation_key(1293)) IAxisDefPtr IArrayInfo::GetAxisDef ( long Index );
__declspec(implementation_key(1294)) long IArrayInfo::GetDimCount ( );
__declspec(implementation_key(1295)) void IArrayInfo::PutDimCount ( long Value );
__declspec(implementation_key(1296)) long IArrayInfo::GetDimSizes ( long Index );
__declspec(implementation_key(1297)) void IArrayInfo::PutDimSizes ( long Index, long Value );
__declspec(implementation_key(1298)) HRESULT IArrayInfo::Init ( );
__declspec(implementation_key(1299)) VARIANT_BOOL IArrayInfo::GetItemChannels ( );
__declspec(implementation_key(1300)) _bstr_t IArrayInfo::GetNameArr ( long Ind );
__declspec(implementation_key(1301)) void IArrayInfo::PutNameArr ( long Ind, _bstr_t Value );
__declspec(implementation_key(1302)) long IArrayInfo::GetColorArr ( long Ind );
__declspec(implementation_key(1303)) void IArrayInfo::PutColorArr ( long Ind, long Value );
__declspec(implementation_key(1304)) ISyncSourcePtr IArrayInfo::GetSyncSource ( );
__declspec(implementation_key(1305)) void IArrayInfo::PutItemChannels ( VARIANT_BOOL Value );
__declspec(implementation_key(1306)) IChannelPtr IMarkerOutput::GetChannel ( );
__declspec(implementation_key(1307)) void IMarkerOutput::PutChannel ( struct IChannel * Value );
__declspec(implementation_key(1308)) enum IMarkerChannelType IMarkerOwner::GetChannelType ( );
__declspec(implementation_key(1309)) void IMarkerOwner::PutChannelType ( enum IMarkerChannelType Value );
__declspec(implementation_key(1310)) IChannelPtr IMarkerOwner::GetOwner ( );
__declspec(implementation_key(1311)) void IMarkerOwner::PutOwner ( struct IChannel * Value );
__declspec(implementation_key(1312)) IMarkerOwnerPtr IProcessingMarker::GetMarkerOwner ( );
__declspec(implementation_key(1313)) void IProcessingMarker::PutMarkerOwner ( struct IMarkerOwner * Value );
__declspec(implementation_key(1314)) long IProcessingMarker::GetInputCount ( );
__declspec(implementation_key(1315)) void IProcessingMarker::PutInputCount ( long Value );
__declspec(implementation_key(1316)) long IProcessingMarker::GetOutputCount ( );
__declspec(implementation_key(1317)) void IProcessingMarker::PutOutputCount ( long Value );
__declspec(implementation_key(1318)) IMarkerInputPtr IProcessingMarker::GetMarkerInput ( long Index );
__declspec(implementation_key(1319)) IMarkerOutputPtr IProcessingMarker::GetMarkerOutput ( long Index );
__declspec(implementation_key(1320)) HRESULT IProcessingMarker::SetMarkerInput ( long Index, struct IMarkerInput * Value );
__declspec(implementation_key(1321)) HRESULT IProcessingMarker::SetMarkerOutput ( long Index, struct IMarkerOutput * Value );
__declspec(implementation_key(1322)) IMarkerObjectsListPtr IProcessingMarker::GetMarkerObjects ( );
__declspec(implementation_key(1323)) HRESULT IProcessingMarker::ConnectInput ( long Index, enum IMarkerValueType Value );
__declspec(implementation_key(1324)) HRESULT IProcessingMarker::ConnectOutput ( long Index, enum IMarkerValueType Value );
__declspec(implementation_key(1325)) IMarkerObjectsListPtr IProcessingMarker::GetMarkerOutputs ( );
__declspec(implementation_key(1326)) IMarkerObjectsListPtr IProcessingMarker::GetMarkerInputs ( );
__declspec(implementation_key(1327)) HRESULT IProcessingMarker::DisconnectInputs ( );
__declspec(implementation_key(1328)) HRESULT IProcessingMarker::DisconnectOutputs ( );
__declspec(implementation_key(1329)) IMarkerObjectPtr IProcessingMarker::ConnectInputEx ( enum IMarkerValueType Value );
__declspec(implementation_key(1330)) IMarkerObjectPtr IProcessingMarker::ConnectOutputEx ( enum IMarkerValueType Value );
__declspec(implementation_key(1331)) HRESULT IProcessingMarker::CreateGroup ( );
__declspec(implementation_key(1332)) VARIANT_BOOL IProcessingMarker::HasStyle ( long Index, long Style );
__declspec(implementation_key(1333)) HRESULT IProcessingMarker::ClearGroups ( );
__declspec(implementation_key(1334)) HRESULT IProcessingMarker::AddGroupStyle ( long Index, long Style );
__declspec(implementation_key(1335)) long IProcessingMarker::GetGroupColor ( long Index );
__declspec(implementation_key(1336)) void IProcessingMarker::PutGroupColor ( long Index, long Value );
__declspec(implementation_key(1337)) VARIANT_BOOL IProcessingMarker::GetGroupVisible ( long Index );
__declspec(implementation_key(1338)) void IProcessingMarker::PutGroupVisible ( long Index, VARIANT_BOOL Value );
__declspec(implementation_key(1339)) HRESULT IProcessingMarker::AddGroupMarkerInput ( long Index, struct IMarkerInput * Value );
__declspec(implementation_key(1340)) HRESULT IProcessingMarker::AddGroupMarkerOutput ( long Index, struct IMarkerOutput * Value );
__declspec(implementation_key(1341)) IMarkerObjectsListPtr IProcessingMarker::GetGroupMarkerInputs ( long Index );
__declspec(implementation_key(1342)) IMarkerObjectsListPtr IProcessingMarker::GetGroupMarkerOutputs ( long Index );
__declspec(implementation_key(1343)) VARIANT_BOOL IProcessingMarker::GetGroupAlwaysDrawInputs ( long Index );
__declspec(implementation_key(1344)) void IProcessingMarker::PutGroupAlwaysDrawInputs ( long Index, VARIANT_BOOL Value );
__declspec(implementation_key(1345)) VARIANT_BOOL IProcessingMarker::GetGroupWaitForMouseInput ( long Index );
__declspec(implementation_key(1346)) void IProcessingMarker::PutGroupWaitForMouseInput ( long Index, VARIANT_BOOL Value );
__declspec(implementation_key(1347)) VARIANT_BOOL IProcessingMarker::GetGroupHasOwnColor ( long Index );
__declspec(implementation_key(1348)) void IProcessingMarker::PutGroupHasOwnColor ( long Index, VARIANT_BOOL Value );
__declspec(implementation_key(1349)) HRESULT IProcessingMarker::SetMarkerProps ( const _variant_t & Value );
__declspec(implementation_key(1350)) HRESULT IProcessingMarker::AddGroupName ( long Index, _bstr_t Value );
__declspec(implementation_key(1351)) long IProcessingMarkerList::GetCount ( );
__declspec(implementation_key(1352)) IProcessingMarkerPtr IProcessingMarkerList::GetItems ( long Index );
__declspec(implementation_key(1353)) void IProcessingMarkerList::PutItems ( long Index, struct IProcessingMarker * Value );
__declspec(implementation_key(1354)) HRESULT IProcessingMarkerList::Add ( struct IProcessingMarker * Value );
__declspec(implementation_key(1355)) long IProcessingMarkerList::Remove ( struct IProcessingMarker * Value );
__declspec(implementation_key(1356)) HRESULT IProcessingMarkerList::Insert ( long Index, struct IProcessingMarker * Value );
__declspec(implementation_key(1357)) HRESULT IProcessingMarkerList::Delete ( long Index );
__declspec(implementation_key(1358)) HRESULT IProcessingMarkerList::Clear ( );
__declspec(implementation_key(1359)) IChannelPtr IInputCh::GetCh ( );
__declspec(implementation_key(1360)) void IInputCh::PutCh ( struct IChannel * Value );
__declspec(implementation_key(1361)) long IInputCh::GetInd ( );
__declspec(implementation_key(1362)) void IInputCh::PutInd ( long Value );
__declspec(implementation_key(1363)) long IInputCh::GetBufInd ( );
__declspec(implementation_key(1364)) long ICppResamplerEngine::GetSamplingRate ( );
__declspec(implementation_key(1365)) void ICppResamplerEngine::PutSamplingRate ( long Value );
__declspec(implementation_key(1366)) long ICppResamplerEngine::GetBlockSizeInSamples ( );
__declspec(implementation_key(1367)) void ICppResamplerEngine::PutBlockSizeInSamples ( long Value );
__declspec(implementation_key(1368)) long ICppResamplerEngine::GetPastSamplesRequiredForCalculation ( );
__declspec(implementation_key(1369)) void ICppResamplerEngine::PutPastSamplesRequiredForCalculation ( long Value );
__declspec(implementation_key(1370)) long ICppResamplerEngine::GetFutureSamplesRequiredForCalculation ( );
__declspec(implementation_key(1371)) void ICppResamplerEngine::PutFutureSamplesRequiredForCalculation ( long Value );
__declspec(implementation_key(1372)) long ICppResamplerEngine::GetResamplerBase ( );
__declspec(implementation_key(1373)) void ICppResamplerEngine::PutResamplerBase ( long Value );
__declspec(implementation_key(1374)) long ICppResamplerEngine::GetResamplerBlockType ( );
__declspec(implementation_key(1375)) void ICppResamplerEngine::PutResamplerBlockType ( long Value );
__declspec(implementation_key(1376)) HRESULT ICppResamplerEngine::SetMasterChannel ( struct IChannel * Ch );
__declspec(implementation_key(1377)) VARIANT_BOOL ICppResamplerEngine::GetIsOldMode ( );
__declspec(implementation_key(1378)) void ICppResamplerEngine::PutIsOldMode ( VARIANT_BOOL Value );
__declspec(implementation_key(1379)) IDataPtr IApp::GetData ( );
__declspec(implementation_key(1380)) VARIANT_BOOL IApp::GetVisible ( );
__declspec(implementation_key(1381)) void IApp::PutVisible ( VARIANT_BOOL Value );
__declspec(implementation_key(1382)) HRESULT IApp::SetInstrument ( long Id );
__declspec(implementation_key(1383)) HRESULT IApp::Stop ( );
__declspec(implementation_key(1384)) HRESULT IApp::Init ( );
__declspec(implementation_key(1385)) long IApp::GetParent ( );
__declspec(implementation_key(1386)) void IApp::PutParent ( long Value );
__declspec(implementation_key(1387)) VARIANT_BOOL IApp::GetShowPropertyFrame ( );
__declspec(implementation_key(1388)) void IApp::PutShowPropertyFrame ( VARIANT_BOOL Value );
__declspec(implementation_key(1389)) HRESULT IApp::SetupScreen ( );
__declspec(implementation_key(1390)) VARIANT_BOOL IApp::GetShowStoreOptions ( );
__declspec(implementation_key(1391)) void IApp::PutShowStoreOptions ( VARIANT_BOOL Value );
__declspec(implementation_key(1392)) VARIANT_BOOL IApp::GetShowSROptions ( );
__declspec(implementation_key(1393)) void IApp::PutShowSROptions ( VARIANT_BOOL Value );
__declspec(implementation_key(1394)) HRESULT IApp::HardwareSetup ( VARIANT_BOOL Plugins );
__declspec(implementation_key(1395)) HRESULT IApp::LoadSetup ( _bstr_t FileName );
__declspec(implementation_key(1396)) HRESULT IApp::SaveSetup ( _bstr_t FileName );
__declspec(implementation_key(1397)) _bstr_t IApp::GetIniFileDir ( );
__declspec(implementation_key(1398)) void IApp::PutIniFileDir ( _bstr_t Value );
__declspec(implementation_key(1399)) long IApp::GetLeft ( );
__declspec(implementation_key(1400)) void IApp::PutLeft ( long Value );
__declspec(implementation_key(1401)) long IApp::GetTop ( );
__declspec(implementation_key(1402)) void IApp::PutTop ( long Value );
__declspec(implementation_key(1403)) long IApp::GetWidth ( );
__declspec(implementation_key(1404)) void IApp::PutWidth ( long Value );
__declspec(implementation_key(1405)) long IApp::GetHeight ( );
__declspec(implementation_key(1406)) void IApp::PutHeight ( long Value );
__declspec(implementation_key(1407)) HRESULT IApp::UpdateHardwareSetup ( );
__declspec(implementation_key(1408)) HRESULT IApp::Measure ( );
__declspec(implementation_key(1409)) HRESULT IApp::LoadFile ( _bstr_t FileName );
__declspec(implementation_key(1410)) HRESULT IApp::StartStoring ( _bstr_t FileName );
__declspec(implementation_key(1411)) ILoadEnginePtr IApp::GetLoadEngine ( );
__declspec(implementation_key(1412)) HRESULT IApp::ExportData ( long ExportType, long TimeAxis, _bstr_t FileName );
__declspec(implementation_key(1413)) _bstr_t IApp::SendCommand ( _bstr_t Cmd, long Timeout );
__declspec(implementation_key(1414)) HRESULT IApp::ManualStart ( );
__declspec(implementation_key(1415)) HRESULT IApp::ManualStop ( );
__declspec(implementation_key(1416)) long IApp::GetShowStyle ( );
__declspec(implementation_key(1417)) void IApp::PutShowStyle ( long Value );
__declspec(implementation_key(1418)) VARIANT_BOOL IApp::GetStayOnTop ( );
__declspec(implementation_key(1419)) void IApp::PutStayOnTop ( VARIANT_BOOL Value );
__declspec(implementation_key(1420)) HRESULT IApp::SetScreenIndex ( long Index );
__declspec(implementation_key(1421)) long IApp::GetActiveScreen ( );
__declspec(implementation_key(1422)) HRESULT IApp::SendKey ( unsigned long Key );
__declspec(implementation_key(1423)) _bstr_t IApp::GetUsedSetupfile ( );
__declspec(implementation_key(1424)) _bstr_t IApp::GetUsedDatafile ( );
__declspec(implementation_key(1425)) void IApp::PutUsedDatafile ( _bstr_t Value );
__declspec(implementation_key(1426)) long IApp::GetLastKey ( );
__declspec(implementation_key(1427)) IScreensPtr IApp::GetScreens ( );
__declspec(implementation_key(1428)) IEventListPtr IApp::GetEventList ( );
__declspec(implementation_key(1429)) long IApp::GetActualRunMode ( );
__declspec(implementation_key(1430)) _bstr_t IApp::GetVersion ( );
__declspec(implementation_key(1431)) IMasterClockPtr IApp::GetMasterClock ( );
__declspec(implementation_key(1432)) IStoreEnginePtr IApp::GetStoreEngine ( );
__declspec(implementation_key(1433)) HRESULT IApp::GoToInstruments ( );
__declspec(implementation_key(1434)) HRESULT IApp::SetFullScreen ( VARIANT_BOOL Full );
__declspec(implementation_key(1435)) _bstr_t IApp::GetMainDataDir ( );
__declspec(implementation_key(1436)) HRESULT IApp::MainWndMessage ( long Msg, long WParam, VARIANT_BOOL Wait );
__declspec(implementation_key(1437)) HRESULT IApp::SetRemoteMode ( VARIANT_BOOL Remote );
__declspec(implementation_key(1438)) HRESULT IApp::MenuClick ( enum MenuItems Item );
__declspec(implementation_key(1439)) long IApp::GetMeasureSampleRate ( );
__declspec(implementation_key(1440)) void IApp::PutMeasureSampleRate ( long Value );
__declspec(implementation_key(1441)) long IApp::SetScopeParams ( double PreTime, double PostTime, struct IChannel * Channel, float Level );
__declspec(implementation_key(1442)) HRESULT IApp::NewSetup ( );
__declspec(implementation_key(1443)) HRESULT IApp::SetScopeUsed ( VARIANT_BOOL Value );
__declspec(implementation_key(1444)) VARIANT_BOOL IApp::GetDataLost ( );
__declspec(implementation_key(1445)) HRESULT IApp::SetHeaderData ( _bstr_t Caption, _bstr_t Header );
__declspec(implementation_key(1446)) HRESULT IApp::PrintScreen ( VARIANT_BOOL ShowDialog );
__declspec(implementation_key(1447)) long IApp::GetTimerInterval ( );
__declspec(implementation_key(1448)) void IApp::PutTimerInterval ( long Value );
__declspec(implementation_key(1449)) HRESULT IApp::GetInterfaceVersion ( long * Major, long * Minor, long * Revision );
__declspec(implementation_key(1450)) IAISetupScreenPtr IApp::GetAISetupScreen ( );
__declspec(implementation_key(1451)) VARIANT_BOOL IApp::GetAlwaysEnableTrigger ( );
__declspec(implementation_key(1452)) void IApp::PutAlwaysEnableTrigger ( VARIANT_BOOL Value );
__declspec(implementation_key(1453)) ITriggerPtr IApp::GetTrigger ( );
__declspec(implementation_key(1454)) VARIANT_BOOL IApp::GetDisableStoring ( );
__declspec(implementation_key(1455)) void IApp::PutDisableStoring ( VARIANT_BOOL Value );
__declspec(implementation_key(1456)) HRESULT IApp::WriteErrorMessage ( _bstr_t ErrorMsg );
__declspec(implementation_key(1457)) HRESULT IApp::PauseStoring ( );
__declspec(implementation_key(1458)) HRESULT IApp::ResumeStoring ( );
__declspec(implementation_key(1459)) HRESULT IApp::LoadModuleSetup ( _bstr_t FileName );
__declspec(implementation_key(1460)) HRESULT IApp::ChangeDaqType ( long DaqType );
__declspec(implementation_key(1461)) HRESULT IApp::ChangeComPort ( long ComPort );
__declspec(implementation_key(1462)) HRESULT IApp::LoadDBC ( long PortNo, _bstr_t FileName );
__declspec(implementation_key(1463)) HRESULT IApp::ZeroAllAutoChannels ( VARIANT_BOOL Zero );
__declspec(implementation_key(1464)) HRESULT IApp::ShowSensorEditor ( );
__declspec(implementation_key(1465)) IAOGroupPtr IApp::GetAOGroup ( );
__declspec(implementation_key(1466)) ICANPtr IApp::GetCAN ( );
__declspec(implementation_key(1467)) HRESULT IApp::InitScopeTrig ( struct T_RecordPosition Start, struct T_RecordPosition Stop );
__declspec(implementation_key(1468)) VARIANT_BOOL IApp::CalcScopeTrig ( );
__declspec(implementation_key(1469)) VARIANT_BOOL IApp::GetAcquiring ( );
__declspec(implementation_key(1470)) VARIANT_BOOL IApp::GetEnabled ( );
__declspec(implementation_key(1471)) void IApp::PutEnabled ( VARIANT_BOOL Value );
__declspec(implementation_key(1472)) HRESULT IApp::AOSetManual ( );
__declspec(implementation_key(1473)) VARIANT_BOOL IApp::AOGetManualAvail ( );
__declspec(implementation_key(1474)) IModulesPtr IApp::GetModules ( );
__declspec(implementation_key(1475)) HRESULT IApp::StartModuleScan ( );
__declspec(implementation_key(1476)) HRESULT IApp::StopModuleScan ( );
__declspec(implementation_key(1477)) long IApp::GetRegType ( );
__declspec(implementation_key(1478)) IAveragedFFTPtr IApp::GetAveragedCPB ( );
__declspec(implementation_key(1479)) HRESULT IApp::LoadDisplaySetup ( _bstr_t FileName );
__declspec(implementation_key(1480)) HRESULT IApp::SetStoreMode ( long Mode );
__declspec(implementation_key(1481)) IAlarmsPtr IApp::GetAlarms ( );
__declspec(implementation_key(1482)) IDaqGroupPtr IApp::GetDaqGroup ( );
__declspec(implementation_key(1483)) VARIANT_BOOL IApp::GetIsSetupMode ( );
__declspec(implementation_key(1484)) HRESULT IApp::SetMainDataDir ( _bstr_t DataDir );
__declspec(implementation_key(1485)) IFileNameSettingsPtr IApp::GetFileNameSettings ( );
__declspec(implementation_key(1486)) VARIANT_BOOL IApp::GetHasFRF ( );
__declspec(implementation_key(1487)) IDaqPtr IApp::GetDaq ( );
__declspec(implementation_key(1488)) IGlobalHeaderPtr IApp::GetGlobalHeader ( );
__declspec(implementation_key(1489)) VARIANT_BOOL IApp::GetFixedExternalClock ( );
__declspec(implementation_key(1490)) void IApp::PutFixedExternalClock ( VARIANT_BOOL Value );
__declspec(implementation_key(1491)) HRESULT IApp::WriteErrorLog ( _bstr_t Str );
__declspec(implementation_key(1492)) HRESULT IApp::UpdateSetupScreen ( );
__declspec(implementation_key(1493)) HRESULT IApp::NotifyTrackingChanged ( VARIANT_BOOL Tracking, double TimeDiff );
__declspec(implementation_key(1494)) ITimingPtr IApp::GetTiming ( );
__declspec(implementation_key(1495)) IUserInterfacePtr IApp::GetUserInterface ( );
__declspec(implementation_key(1496)) IAveragedFFTPtr IApp::GetAveragedFFT ( );
__declspec(implementation_key(1497)) HRESULT IApp::ExportDataEx ( long ExportType, long TimeAxis, long ExportDataType, long ExportOptions, _bstr_t FileName );
__declspec(implementation_key(1498)) double IApp::GetMeasureSampleRateEx ( );
__declspec(implementation_key(1499)) void IApp::PutMeasureSampleRateEx ( double Value );
__declspec(implementation_key(1500)) IPowerModulesPtr IApp::GetPowerModules ( );
__declspec(implementation_key(1501)) float IApp::GetReducedRate ( );
__declspec(implementation_key(1502)) void IApp::PutReducedRate ( float Value );
__declspec(implementation_key(1503)) HRESULT IApp::HideCaptionBar ( );
__declspec(implementation_key(1504)) HRESULT IApp::ExecuteModulesFunction ( enum ModulesFunction Func, unsigned char Group, long Value );
__declspec(implementation_key(1505)) HRESULT IApp::ShowCaptionBar ( );
__declspec(implementation_key(1506)) float IApp::FirstScanDonePercent ( );
__declspec(implementation_key(1507)) long IApp::GetSetupSampleRate ( );
__declspec(implementation_key(1508)) void IApp::PutSetupSampleRate ( long Value );
__declspec(implementation_key(1509)) long IApp::GetNETMode ( );
__declspec(implementation_key(1510)) VARIANT_BOOL IApp::Start ( );
__declspec(implementation_key(1511)) VARIANT_BOOL IApp::GetRemoteControlled ( );
__declspec(implementation_key(1512)) VARIANT_BOOL IApp::GetIsAcqRunning ( );
__declspec(implementation_key(1513)) IMathPtr IApp::GetMath ( );
__declspec(implementation_key(1514)) HRESULT IApp::LoadProject ( _bstr_t Name );
__declspec(implementation_key(1515)) HRESULT IApp::Analyze ( );
__declspec(implementation_key(1516)) HRESULT IApp::SetMainToolBar ( _bstr_t TabName, _bstr_t ButtonName );
__declspec(implementation_key(1517)) long IApp::GetMainWindowHandle ( );
__declspec(implementation_key(1518)) _bstr_t IApp::GetSpecDir ( enum SpecDirectory DirType );
__declspec(implementation_key(1519)) IAmplInterfacesPtr IApp::GetAmplInterfaces ( );
__declspec(implementation_key(1520)) VARIANT_BOOL IApp::GetSuppressMessages ( );
__declspec(implementation_key(1521)) void IApp::PutSuppressMessages ( VARIANT_BOOL Value );
__declspec(implementation_key(1522)) IOfflineCalcPtr IApp::GetOfflineCalc ( );
__declspec(implementation_key(1523)) VARIANT_BOOL IApp::GetConfigMode ( );
__declspec(implementation_key(1524)) VARIANT_BOOL IApp::GetShowInstrumentsInFullScreen ( );
__declspec(implementation_key(1525)) void IApp::PutShowInstrumentsInFullScreen ( VARIANT_BOOL Value );
__declspec(implementation_key(1526)) VARIANT_BOOL IApp::GetDisableKeyboardShortcuts ( );
__declspec(implementation_key(1527)) void IApp::PutDisableKeyboardShortcuts ( VARIANT_BOOL Value );
__declspec(implementation_key(1528)) HRESULT IApp::SaveSetupToXML ( BSTR * XML );
__declspec(implementation_key(1529)) HRESULT IApp::LoadSetupFromXML ( _bstr_t XML );
__declspec(implementation_key(1530)) IProjectManagerPtr IApp::GetProjectManager ( );
__declspec(implementation_key(1531)) IVideoPtr IApp::GetVideo ( );
__declspec(implementation_key(1532)) HRESULT IApp::LoadSequence ( _bstr_t FileName );
__declspec(implementation_key(1533)) HRESULT IApp::GetDewesoftVersion ( long * Super, long * Major, long * Minor, long * Build, char * State );
__declspec(implementation_key(1534)) long IApp::GetSamplesEx ( double SampleRate, VARIANT_BOOL SetupMode, long Level );
__declspec(implementation_key(1535)) ILockableCursorsPtr IApp::GetLockableCursors ( );
__declspec(implementation_key(1536)) HRESULT IApp::ReportMessage ( enum ReportMessageType MsgType, _bstr_t MsgSource, _bstr_t Msg );
__declspec(implementation_key(1537)) HRESULT IApp::ChangeSetupFolder ( _bstr_t FolderName );
__declspec(implementation_key(1538)) HRESULT IApp::ChangeDataFolder ( _bstr_t FolderName );
__declspec(implementation_key(1539)) enum TimeFormat IApp::GetTimeFormat ( );
__declspec(implementation_key(1540)) void IApp::PutTimeFormat ( enum TimeFormat Value );
__declspec(implementation_key(1541)) ISequencerPtr IApp::GetSequencer ( );
__declspec(implementation_key(1542)) long IApp::SendPluginCommand ( _bstr_t PluginGUID, long CommandID, const _variant_t & Input, VARIANT * Output );
__declspec(implementation_key(1543)) unsigned int IApp::GetDialogHandle ( );
__declspec(implementation_key(1544)) void IApp::PutDialogHandle ( unsigned int Value );
__declspec(implementation_key(1545)) HRESULT IApp::SetFreezeMode ( VARIANT_BOOL Enabled );
__declspec(implementation_key(1546)) HRESULT IApp::StopStoring ( );
__declspec(implementation_key(1547)) HRESULT IApp::ImportDataFile ( _bstr_t FileName, long ReferenceType, const _variant_t & Params, _bstr_t ChannelFilter );
__declspec(implementation_key(1548)) HRESULT IApp::SaveChangesToDataFile ( );
__declspec(implementation_key(1549)) enum TimingType IApp::GetTimingType ( );
__declspec(implementation_key(1550)) IRemoteManagerPtr IApp::GetRemoteManager ( );
__declspec(implementation_key(1551)) IChannelListExPtr IApp::CreateChannelList ( );
__declspec(implementation_key(1552)) HRESULT IApp::FillModuleChannelList ( _bstr_t SerialNumber, long GroupID, struct IChannelListEx * * List );
__declspec(implementation_key(1553)) HRESULT IApp::AskUserToDeleteDisplays ( _bstr_t PluginGUID );
__declspec(implementation_key(1554)) IXMLHelperPtr IApp::GetXMLHelper ( );
__declspec(implementation_key(1555)) IAcqLoopPtr IApp::GetAcqLoop ( );
__declspec(implementation_key(1556)) HRESULT IApp::UpdateTopology ( );
__declspec(implementation_key(1557)) IRTCorePtr IApp::GetRTCore ( );
__declspec(implementation_key(1558)) HRESULT IApp::ZeroCntChannels ( );
__declspec(implementation_key(1559)) IReportPtr IApp::GetReport ( );
__declspec(implementation_key(1560)) long IApp::GetAnalyseMenuIndex ( );
__declspec(implementation_key(1561)) IRTCPtr IApp::GetRTC ( );
__declspec(implementation_key(1562)) HRESULT IApp::ZeroAutoChannelsByGroup ( VARIANT_BOOL Zero, char GroupID );
__declspec(implementation_key(1563)) HRESULT IApp::ExportToDewesoft ( _bstr_t FileName );
__declspec(implementation_key(1564)) long IApp::AskSaveDataFile ( VARIANT_BOOL AskWithoutAnySettingChanged );
__declspec(implementation_key(1565)) long IApp::GetMeasureMenuIndex ( );
__declspec(implementation_key(1566)) HRESULT IPlugin::SetData ( struct IData * Data );
__declspec(implementation_key(1567)) HRESULT IPlugin::OnTrigger ( double Time );
__declspec(implementation_key(1568)) HRESULT IPlugin::Configure ( );
__declspec(implementation_key(1569)) HRESULT IPlugin::OnGetData ( );
__declspec(implementation_key(1570)) HRESULT IPlugin::OnStartAcq ( );
__declspec(implementation_key(1571)) HRESULT IPlugin::OnStopAcq ( );
__declspec(implementation_key(1572)) HRESULT IPlugin::OnStartStoring ( );
__declspec(implementation_key(1573)) HRESULT IPlugin::OnStopStoring ( );
__declspec(implementation_key(1574)) HRESULT IPlugin::Initiate ( );
__declspec(implementation_key(1575)) HRESULT IPlugin::SetApp ( struct IApp * App );
__declspec(implementation_key(1576)) HRESULT IPlugin2::Initiate ( struct IApp * DeweApp );
__declspec(implementation_key(1577)) HRESULT IPlugin2::OnStartAcq ( );
__declspec(implementation_key(1578)) HRESULT IPlugin2::OnStopAcq ( );
__declspec(implementation_key(1579)) HRESULT IPlugin2::OnStartStoring ( );
__declspec(implementation_key(1580)) HRESULT IPlugin2::OnStopStoring ( );
__declspec(implementation_key(1581)) HRESULT IPlugin2::OnGetData ( );
__declspec(implementation_key(1582)) HRESULT IPlugin2::OnTrigger ( double Time );
__declspec(implementation_key(1583)) HRESULT IPlugin2::Configure ( );
__declspec(implementation_key(1584)) _bstr_t IPlugin2::GetId ( );
__declspec(implementation_key(1585)) HRESULT IPlugin2::SaveSetup ( VARIANT * Data );
__declspec(implementation_key(1586)) HRESULT IPlugin2::LoadSetup ( const _variant_t & Data );
__declspec(implementation_key(1587)) HRESULT IPlugin2::NewSetup ( );
__declspec(implementation_key(1588)) HRESULT IPlugin2::ClearChannelsInstance ( );
__declspec(implementation_key(1589)) VARIANT_BOOL IPlugin2::ShowFrame ( long Parent );
__declspec(implementation_key(1590)) HRESULT IPlugin2::HideFrame ( );
__declspec(implementation_key(1591)) HRESULT IPlugin2::UpdateFrame ( );
__declspec(implementation_key(1592)) VARIANT_BOOL IPlugin2::GetUsed ( );
__declspec(implementation_key(1593)) void IPlugin2::PutUsed ( VARIANT_BOOL Value );
__declspec(implementation_key(1594)) HRESULT IPlugin2::OnOleMsg ( long Msg, long Param );
__declspec(implementation_key(1595)) _bstr_t ICustomExport::GetFileName ( );
__declspec(implementation_key(1596)) void ICustomExport::PutFileName ( _bstr_t Value );
__declspec(implementation_key(1597)) HRESULT ICustomExport::StartExport ( struct IApp * App );
__declspec(implementation_key(1598)) HRESULT ICustomExport::EndExport ( );
__declspec(implementation_key(1599)) enum ExportTypes ICustomExport::GetExportType ( );
__declspec(implementation_key(1600)) VARIANT_BOOL ICustomExport::GetAbsoluteTime ( );
__declspec(implementation_key(1601)) void ICustomExport::PutAbsoluteTime ( VARIANT_BOOL Value );
__declspec(implementation_key(1602)) HRESULT ICustomExport::StartDataFolder ( _bstr_t FolderName, DATE AbsTime );
__declspec(implementation_key(1603)) HRESULT ICustomExport::EndDataFolder ( );
__declspec(implementation_key(1604)) HRESULT ICustomExport::StartInfo ( _bstr_t Info );
__declspec(implementation_key(1605)) HRESULT ICustomExport::WriteInfoString ( _bstr_t Description, _bstr_t Value );
__declspec(implementation_key(1606)) HRESULT ICustomExport::WriteInfoInteger ( _bstr_t Description, long Param );
__declspec(implementation_key(1607)) HRESULT ICustomExport::WriteInfoSingle ( _bstr_t Description, float Value );
__declspec(implementation_key(1608)) HRESULT ICustomExport::WriteInfoDate ( _bstr_t Description, DATE Value );
__declspec(implementation_key(1609)) HRESULT ICustomExport::EndInfo ( );
__declspec(implementation_key(1610)) HRESULT ICustomExport::StartTimeField ( _bstr_t FieldName, _bstr_t FieldUnit );
__declspec(implementation_key(1611)) HRESULT ICustomExport::StartDataField ( _bstr_t FieldName, _bstr_t FieldUnit, long ExportRate );
__declspec(implementation_key(1612)) HRESULT ICustomExport::EndHeader ( );
__declspec(implementation_key(1613)) HRESULT ICustomExport::StartValue ( double TimeValue );
__declspec(implementation_key(1614)) HRESULT ICustomExport::StartAbsValue ( DATE DateTime );
__declspec(implementation_key(1615)) HRESULT ICustomExport::WriteValue ( float Value );
__declspec(implementation_key(1616)) HRESULT ICustomExport::WriteAsyncValue ( double TimeStamp, float Value );
__declspec(implementation_key(1617)) HRESULT ICustomExport::StartChannel ( _bstr_t FieldName, _bstr_t FieldUnit, VARIANT_BOOL Async );
__declspec(implementation_key(1618)) _bstr_t ICustomExport::GetExtension ( );
__declspec(implementation_key(1619)) double ICustomExport::GetTimeIncrease ( );
__declspec(implementation_key(1620)) void ICustomExport::PutTimeIncrease ( double Value );
__declspec(implementation_key(1621)) HRESULT ICustomExport::EndChannel ( );
__declspec(implementation_key(1622)) HRESULT ICustomExport::EndValue ( );
__declspec(implementation_key(1623)) VARIANT_BOOL ICustomExport::GetSupportsAsync ( );
__declspec(implementation_key(1624)) VARIANT_BOOL ICustomExport::GetSupportsSRDiv ( );
__declspec(implementation_key(1625)) unsigned __int64 ICustomExport::GetDataCount ( );
__declspec(implementation_key(1626)) void ICustomExport::PutDataCount ( unsigned __int64 Value );
__declspec(implementation_key(1627)) HRESULT IPlugin3::OnStartSetup ( );
__declspec(implementation_key(1628)) HRESULT IPlugin3::OnStopSetup ( );
__declspec(implementation_key(1629)) HRESULT IPlugin3::OnBeforeStartAcq ( VARIANT_BOOL * AllowStart );
__declspec(implementation_key(1630)) HRESULT IPlugin3::OnAfterStartAcq ( );
__declspec(implementation_key(1631)) HRESULT IPlugin3::OnBeforeStopAcq ( VARIANT_BOOL * AllowStop );
__declspec(implementation_key(1632)) HRESULT IPlugin3::OnAfterStopAcq ( );
__declspec(implementation_key(1633)) HRESULT IPlugin3::OnRepaintFrame ( );
__declspec(implementation_key(1634)) HRESULT IPlugin3::OnTriggerStop ( double Time, double TrigDuration );
__declspec(implementation_key(1635)) HRESULT IPlugin3::OnAfterCalcMath ( );
__declspec(implementation_key(1636)) long IPlugin3::GetDWTypeLibVersion ( );
__declspec(implementation_key(1637)) HRESULT IPlugin3::OnGetSetupData ( );
__declspec(implementation_key(1638)) HRESULT IPlugin3::OnResizeFrame ( long Width, long Height );
__declspec(implementation_key(1639)) HRESULT IPlugin3::ProvidesClock ( VARIANT_BOOL * Value );
__declspec(implementation_key(1640)) HRESULT IPlugin3::OnGetClock ( long * ClockLow, long * ClockHigh );
__declspec(implementation_key(1641)) HRESULT IPlugin3::SetCANPort ( long Port );
__declspec(implementation_key(1642)) HRESULT IPlugin3::OnAlarm ( long CondIndex, VARIANT_BOOL Status );
__declspec(implementation_key(1643)) HRESULT IPlugin3::OnBigListLoad ( _bstr_t TextSetup );
__declspec(implementation_key(1644)) HRESULT IPlugin3::OnExit ( );
__declspec(implementation_key(1645)) VARIANT_BOOL IPlugin3::OnShowHWFrame ( long Parent );
__declspec(implementation_key(1646)) HRESULT IPlugin3::OnHideHWFrame ( );
__declspec(implementation_key(1647)) HRESULT ICustomExport2::SetAbsMin ( float AbsMin );
__declspec(implementation_key(1648)) HRESULT ICustomExport2::SetAbsMax ( float AbsMax );
__declspec(implementation_key(1649)) HRESULT ICustomExport2::SetTrigOffset ( double TrigTime );
__declspec(implementation_key(1650)) HRESULT ICustomExport2::SetChannelColor ( long Color );
__declspec(implementation_key(1651)) HRESULT ICustomExport2::SetRangeMax ( float Value );
__declspec(implementation_key(1652)) HRESULT ICustomExport2::SetRangeMin ( float Value );
__declspec(implementation_key(1653)) HRESULT ICustomExport2::WriteDoubleValue ( double Value );
__declspec(implementation_key(1654)) HRESULT ICustomExport2::WriteAsyncDoubleValue ( double TimeStamp, double Value );
__declspec(implementation_key(1655)) long ICustomExport2::GetDWTypeLibVersion ( );
__declspec(implementation_key(1656)) VARIANT_BOOL ICustomExport2::GetSupportsDouble ( );
__declspec(implementation_key(1657)) HRESULT ICustomExport2::SetDoubleFloat ( VARIANT_BOOL DoubleFloat );
__declspec(implementation_key(1658)) HRESULT ICustomExport2::StartEvents ( );
__declspec(implementation_key(1659)) HRESULT ICustomExport2::StopEvents ( );
__declspec(implementation_key(1660)) HRESULT ICustomExport2::WriteEvent ( long EventType, _bstr_t EventTypeString, double Time, _bstr_t Comment );
__declspec(implementation_key(1661)) HRESULT ICustomExport2::SetApp ( struct IApp * App );
__declspec(implementation_key(1662)) HRESULT ICustomExport2::SetChannel ( struct IChannel * Ch );
__declspec(implementation_key(1663)) VARIANT_BOOL ICustomDAQ::GetCardFound ( );
__declspec(implementation_key(1664)) long ICustomDAQ::GetNumChannels ( );
__declspec(implementation_key(1665)) HRESULT ICustomDAQ::GetDeviceType ( );
__declspec(implementation_key(1666)) HRESULT ICustomDAQ::GetBitResolution ( long ChIndex, long * Bits );
__declspec(implementation_key(1667)) HRESULT ICustomDAQ::GetSampleRates ( VARIANT * List );
__declspec(implementation_key(1668)) HRESULT ICustomDAQ::CheckSampleRate ( long WantedRate, long NumChannels, const _variant_t & ChList, long * AdjustedRate );
__declspec(implementation_key(1669)) HRESULT ICustomDAQ::StartAcq ( long SampleRate, VARIANT_BOOL SetupMode );
__declspec(implementation_key(1670)) HRESULT ICustomDAQ::StopAcq ( );
__declspec(implementation_key(1671)) HRESULT ICustomDAQ::GetData ( long * Samples );
__declspec(implementation_key(1672)) HRESULT ICustomDAQ::GetCurrentTime ( __int64 * Time );
__declspec(implementation_key(1673)) HRESULT ICustomDAQ::SetApp ( struct IApp * App );
__declspec(implementation_key(1674)) HRESULT ICustomDAQ::GetCardName ( BSTR * Name );
__declspec(implementation_key(1675)) HRESULT ICustomDAQ::GetDWTypeLibVersion ( long * Version );
__declspec(implementation_key(1676)) HRESULT ICustomDAQ::GetBufferSize ( long * Value );
__declspec(implementation_key(1677)) HRESULT ICustomDAQ::ShowSetupFrame ( long AppHandle, long Handle );
__declspec(implementation_key(1678)) HRESULT ICustomDAQ::HideSetupFrame ( );
__declspec(implementation_key(1679)) HRESULT ICustomDAQ::GetChannelGain ( float * Gain );
__declspec(implementation_key(1680)) HRESULT ICustomDAQ::GetMinMax ( long ChnIndex, float * Min, float * Max );
__declspec(implementation_key(1681)) HRESULT ICustomDAQ::GetOptionsCount ( long * Cnt );
__declspec(implementation_key(1682)) HRESULT ICustomDAQ::GetOptionName ( long Index, BSTR * Name );
__declspec(implementation_key(1683)) long ICustomDAQ::GetNumCNTChannels ( );
__declspec(implementation_key(1684)) HRESULT ICustomDAQ::GetCNTBitResolution ( long ChIndex, long * Bits );
__declspec(implementation_key(1685)) HRESULT ICustomDAQ::GetDeviceCode ( BSTR * Code, BSTR * Verify );
__declspec(implementation_key(1686)) HRESULT IExportFrame::ShowFrame ( long Handle, long * FrameHeight );
__declspec(implementation_key(1687)) HRESULT IExportFrame::HideFrame ( );
__declspec(implementation_key(1688)) HRESULT IExportFrame::Apply ( );
__declspec(implementation_key(1689)) HRESULT IExportFrame::SetExpApp ( struct IApp * App );
__declspec(implementation_key(1690)) IChannelListPtr IVCContext::GetDChannels ( );
__declspec(implementation_key(1691)) HRESULT IVCContext::Repaint ( );
__declspec(implementation_key(1692)) HRESULT IVCContext::DataRegionChanged ( );
__declspec(implementation_key(1693)) HRESULT IVCContext::BroadcastPosChanged ( );
__declspec(implementation_key(1694)) HRESULT IVCContext::BroadcastScaleChanged ( struct T_RecordPosition Min, struct T_RecordPosition Max, long ZoomLevel, double DeltaT );
__declspec(implementation_key(1695)) IInputGroupsPtr IVCContext::GetDInputGroups ( );
__declspec(implementation_key(1696)) HRESULT IVCContext::NeedData ( struct T_RecordPosition StartPos, struct T_RecordPosition EndPos, long MinLevel, VARIANT_BOOL Expand, struct IChannelList * ChList );
__declspec(implementation_key(1697)) HRESULT IVCContext::RefreshVisualProperties ( );
__declspec(implementation_key(1698)) VARIANT_BOOL IVCContext::ShowInputField ( long X, long Y, BSTR * Text );
__declspec(implementation_key(1699)) IInputSlotsPtr IVCContext::GetInputSlots ( );
__declspec(implementation_key(1700)) IProcessingMarkerPtr IVCContext::CreateProcessingMarker ( _bstr_t Guid );
__declspec(implementation_key(1701)) VARIANT_BOOL IVCContext::InitProcessingMarker ( struct IProcessingMarker * ProcessingMarker, struct IChannel * Channel, VARIANT_BOOL ShowSetupFrame );
__declspec(implementation_key(1702)) HRESULT IVCContext::DeleteProcessingMarker ( struct IProcessingMarker * ProcessingMarker );
__declspec(implementation_key(1703)) HRESULT IVCContext::ProcessingMarkerChanged ( struct IProcessingMarker * ProcessingMarker, struct IMarkerInput * MarkerInput );
__declspec(implementation_key(1704)) HRESULT IVCContext::EditProcessingMarker ( struct IProcessingMarker * ProcessingMarker, struct IChannel * Channel, VARIANT_BOOL ShowSetupFrame );
__declspec(implementation_key(1705)) HRESULT IVCContext::DisplaySyncAcquire ( );
__declspec(implementation_key(1706)) HRESULT IVCContext::DisplaySyncRelease ( );
__declspec(implementation_key(1707)) double IVCContext::GetCurrentValue ( struct IChannel * Channel, enum ComplexPresentation ComplexPresent );
__declspec(implementation_key(1708)) long IVCContext::GetCurrentSamplePosition ( struct IChannel * Channel );
__declspec(implementation_key(1709)) IChannelPtr IMathContext::MountChannel ( long Id, _bstr_t Descriptor );
__declspec(implementation_key(1710)) IChannelListPtr IMathContext::GetInputChannels ( );
__declspec(implementation_key(1711)) IChannelListPtr IMathContext::GetOutputChannels ( );
__declspec(implementation_key(1712)) IChannelPtr IMathContext::MountChannelEx ( VARIANT_BOOL * Created, long Id, _bstr_t Descriptor, _bstr_t AUnit, _bstr_t Name, long Color );
__declspec(implementation_key(1713)) IInputGroupPtr IMathContext::MountInputGroup ( long Id );
__declspec(implementation_key(1714)) long IMathContext::GetSubItemCount ( );
__declspec(implementation_key(1715)) IMathContextPtr IMathContext::GetSubItem ( long Index );
__declspec(implementation_key(1716)) HRESULT IMathContext::UnmountChannel ( struct IChannel * * Ch );
__declspec(implementation_key(1717)) HRESULT IMathContext::SetDefaultChProps ( VARIANT_BOOL Force );
__declspec(implementation_key(1718)) IMathContextPtr IMathContext::GetObjectContext ( );
__declspec(implementation_key(1719)) IMathModulePtr IMathContext::GetCurrentModule ( );
__declspec(implementation_key(1720)) IMathObjContextPtr IMathContext::GetCurrentContext ( );
__declspec(implementation_key(1721)) HRESULT IMathContext::Apply ( );
__declspec(implementation_key(1722)) VARIANT_BOOL IMathContext::HasError ( );
__declspec(implementation_key(1723)) HRESULT IMathContext::SetAsOffline ( );
__declspec(implementation_key(1724)) long IMathContext::GetInputCalcDelay ( );
__declspec(implementation_key(1725)) _variant_t IMathContext::MathContextPointer ( );
__declspec(implementation_key(1726)) _variant_t IMathContext::MathModulePointer ( long Index );
__declspec(implementation_key(1727)) HRESULT IMathContext::SetCustomOfflinePercentage ( long Percentage );
__declspec(implementation_key(1728)) HRESULT IMathFrameContext::Apply ( const _variant_t & Props );
__declspec(implementation_key(1729)) IMathModulePtr IMathFrameContext::GetCurrentModule ( );
__declspec(implementation_key(1730)) long IMath::GetCount ( );
__declspec(implementation_key(1731)) IMathObjectPtr IMath::GetMathObject ( long Index );
__declspec(implementation_key(1732)) IUnknownPtr IMath::Get_NewEnum ( );
__declspec(implementation_key(1733)) IMathObjectPtr IMath::FindObjByID ( long Index );
__declspec(implementation_key(1734)) IMathObjectPtr IMath::AddObj ( _bstr_t Guid );
__declspec(implementation_key(1735)) HRESULT IMath::RemoveObj ( long I );
__declspec(implementation_key(1736)) long IMathObject::GetCount ( );
__declspec(implementation_key(1737)) IMathModulePtr IMathObject::GetMathModule ( long Index );
__declspec(implementation_key(1738)) IUnknownPtr IMathObject::Get_NewEnum ( );
__declspec(implementation_key(1739)) IMathObjContextPtr IMathObject::GetMathObjContext ( );
__declspec(implementation_key(1740)) _bstr_t IMathObject::GetMathGUID ( );
__declspec(implementation_key(1741)) long IMathObject::GetId ( );
__declspec(implementation_key(1742)) IMathModulePtr IMathObject::FindModuleByID ( long I );
__declspec(implementation_key(1743)) _bstr_t IMathObject::GetMathType ( );
__declspec(implementation_key(1744)) _bstr_t IMathObject::GetName ( );
__declspec(implementation_key(1745)) void IMathObject::PutName ( _bstr_t Value );
__declspec(implementation_key(1746)) HRESULT IMathObject::MarkAsOffline ( );
__declspec(implementation_key(1747)) long IMathModule::GetId ( );
__declspec(implementation_key(1748)) IMathObjectPtr IMathModule::GetMathObject ( );
__declspec(implementation_key(1749)) IMathObjectPtr IMathObjContext::GetMathObject ( );
__declspec(implementation_key(1750)) double IMathChannel::GetDefaultMin ( );
__declspec(implementation_key(1751)) void IMathChannel::PutDefaultMin ( double Value );
__declspec(implementation_key(1752)) double IMathChannel::GetDefaultMax ( );
__declspec(implementation_key(1753)) void IMathChannel::PutDefaultMax ( double Value );
__declspec(implementation_key(1754)) long IMathChannel::GetDefaultRes ( );
__declspec(implementation_key(1755)) void IMathChannel::PutDefaultRes ( long Value );
__declspec(implementation_key(1756)) IMathObjectPtr IMathChannel::GetMathObject ( );
__declspec(implementation_key(1757)) _bstr_t IInputSlot::GetName ( );
__declspec(implementation_key(1758)) void IInputSlot::PutName ( _bstr_t Value );
__declspec(implementation_key(1759)) VARIANT_BOOL IInputSlot::GetIsStatic ( );
__declspec(implementation_key(1760)) void IInputSlot::PutIsStatic ( VARIANT_BOOL Value );
__declspec(implementation_key(1761)) VARIANT_BOOL IInputSlot::GetIsOptional ( );
__declspec(implementation_key(1762)) void IInputSlot::PutIsOptional ( VARIANT_BOOL Value );
__declspec(implementation_key(1763)) _bstr_t IInputSlot::GetTag ( );
__declspec(implementation_key(1764)) void IInputSlot::PutTag ( _bstr_t Value );
__declspec(implementation_key(1765)) _bstr_t IInputSlot::GetGroupTag ( );
__declspec(implementation_key(1766)) void IInputSlot::PutGroupTag ( _bstr_t Value );
__declspec(implementation_key(1767)) VARIANT_BOOL IInputSlot::GetActive ( );
__declspec(implementation_key(1768)) void IInputSlot::PutActive ( VARIANT_BOOL Value );
__declspec(implementation_key(1769)) VARIANT_BOOL IInputSlot::GetVisible ( );
__declspec(implementation_key(1770)) void IInputSlot::PutVisible ( VARIANT_BOOL Value );
__declspec(implementation_key(1771)) _bstr_t IInputSlot::GetInputDescription ( );
__declspec(implementation_key(1772)) _bstr_t IInputSlot::GetLongInputDescription ( );
__declspec(implementation_key(1773)) HRESULT IInputSlot::Clear ( );
__declspec(implementation_key(1774)) VARIANT_BOOL IInputSlot::IsAssigned ( );
__declspec(implementation_key(1775)) VARIANT_BOOL IInputSlot::HasDescriptor ( );
__declspec(implementation_key(1776)) void IInputSlot::PutOnAcceptChannel ( struct IAcceptChannel * _arg1 );
__declspec(implementation_key(1777)) void IInputSlot::PutOnAcceptGroup ( struct IAcceptGroup * _arg1 );
__declspec(implementation_key(1778)) IInputChPtr IInputSlot::GetInputCh ( );
__declspec(implementation_key(1779)) void IInputSlot::PutInputCh ( struct IInputCh * Value );
__declspec(implementation_key(1780)) IInputGroupPtr IInputSlot::GetInputGroup ( );
__declspec(implementation_key(1781)) void IInputSlot::PutInputGroup ( struct IInputGroup * Value );
__declspec(implementation_key(1782)) long IInputSlot::GetSlotType ( );
__declspec(implementation_key(1783)) VARIANT_BOOL IInputSlot::SendMessageEvent ( _bstr_t MsgHeader, _bstr_t MsgData, BSTR * MsgOut );
__declspec(implementation_key(1784)) long IInputSlot::GetIndentLevel ( );
__declspec(implementation_key(1785)) void IInputSlot::PutIndentLevel ( long Value );
__declspec(implementation_key(1786)) HRESULT IInputSlot::SetChannel ( struct IChannel * Value, long Ind );
__declspec(implementation_key(1787)) IChannelPtr IInputSlot::GetChannel ( );
__declspec(implementation_key(1788)) IInputSlotPtr IInputSlots::AddSlotByTag ( _bstr_t Tag );
__declspec(implementation_key(1789)) IInputSlotPtr IInputSlots::AddSlot ( VARIANT_BOOL Extending );
__declspec(implementation_key(1790)) IInputSlotPtr IInputSlots::InsertSlot ( long Index );
__declspec(implementation_key(1791)) IInputSlotPtr IInputSlots::FindOrAddSlot ( _bstr_t Tag );
__declspec(implementation_key(1792)) VARIANT_BOOL IInputSlots::HasEmptySlot ( );
__declspec(implementation_key(1793)) long IInputSlots::GetUsedSlots ( );
__declspec(implementation_key(1794)) IInputSlotPtr IInputSlots::GetFirstUsedSlot ( );
__declspec(implementation_key(1795)) long IInputSlots::GetFirstUsedIndex ( );
__declspec(implementation_key(1796)) IInputSlotPtr IInputSlots::GetLastUsedSlot ( );
__declspec(implementation_key(1797)) long IInputSlots::FindChannel ( struct IChannel * Channel );
__declspec(implementation_key(1798)) VARIANT_BOOL IInputSlots::HasSyncChannels ( );
__declspec(implementation_key(1799)) HRESULT IInputSlots::Save ( );
__declspec(implementation_key(1800)) HRESULT IInputSlots::Restore ( );
__declspec(implementation_key(1801)) long IInputSlots::FindInput ( struct IInputSlot * Input );
__declspec(implementation_key(1802)) long IInputSlots::FindByTag ( _bstr_t Tag );
__declspec(implementation_key(1803)) IInputSlotPtr IInputSlots::FindSlotByTag ( _bstr_t Tag );
__declspec(implementation_key(1804)) HRESULT IInputSlots::ClearSlotsInGroup ( struct IInputSlot * Input );
__declspec(implementation_key(1805)) _bstr_t IInputSlots::ToString ( );
__declspec(implementation_key(1806)) IInputSlotPtr IInputSlots::GetItems ( long Index );
__declspec(implementation_key(1807)) long IInputSlots::GetActiveCount ( );
__declspec(implementation_key(1808)) long IInputSlots::GetCount ( );
__declspec(implementation_key(1809)) HRESULT IInputSlots::Delete ( long Index );
__declspec(implementation_key(1810)) VARIANT_BOOL IAcceptChannel::Call ( struct IInputSlot * Slot, struct IInputCh * InputCh );
__declspec(implementation_key(1811)) VARIANT_BOOL IAcceptGroup::Call ( struct IInputSlot * Slot, struct IInputGroup * Group );
#pragma stop_map_region

#pragma pack(pop)
