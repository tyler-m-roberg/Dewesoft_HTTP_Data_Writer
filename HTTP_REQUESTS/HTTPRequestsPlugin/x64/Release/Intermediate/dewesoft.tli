// Created by Microsoft (R) C/C++ Compiler Version 14.16.27045.0 (c7febe33).
//
// c:\users\theoz\onedrive\documents\github\dewesoft_http_data_writer\http_requests\httprequestsplugin\x64\release\intermediate\dewesoft.tli
//
// Wrapper implementations for type library C:\Program Files\DewesoftX\Bin64\Dewesoft.exe
// compiler-generated file created 01/24/22 at 19:32:46 - DO NOT EDIT!


//
// dispinterface IAppEvents wrapper method implementations
//

#pragma implementation_key(1)
inline HRESULT IAppEvents::OnGetData ( ) {
    return _com_dispatch_method(this, 0xc9, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(2)
inline HRESULT IAppEvents::OnStartStoring ( ) {
    return _com_dispatch_method(this, 0xca, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(3)
inline HRESULT IAppEvents::OnStopStoring ( ) {
    return _com_dispatch_method(this, 0xcb, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(4)
inline HRESULT IAppEvents::OnTrigger ( long Mid, long Dir, double Time ) {
    return _com_dispatch_method(this, 0xcc, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0005", Mid, Dir, Time);
}

#pragma implementation_key(5)
inline HRESULT IAppEvents::OnException ( _bstr_t Str ) {
    return _com_dispatch_method(this, 0xcd, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)Str);
}

#pragma implementation_key(6)
inline HRESULT IAppEvents::OnTriggerStop ( long Mid, long Dir, double Time ) {
    return _com_dispatch_method(this, 0xce, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0005", Mid, Dir, Time);
}

#pragma implementation_key(7)
inline HRESULT IAppEvents::OnAlarm ( long CondIndex, VARIANT_BOOL Status ) {
    return _com_dispatch_method(this, 0xcf, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x000b", CondIndex, Status);
}

#pragma implementation_key(8)
inline HRESULT IAppEvents::OnExit ( ) {
    return _com_dispatch_method(this, 0xd0, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(9)
inline HRESULT IAppEvents::OnEvent ( enum EventReason Reason, const _variant_t & Param ) {
    return _com_dispatch_method(this, 0xd1, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x000c", Reason, &Param);
}

#pragma implementation_key(10)
inline HRESULT IAppEvents::OnDataLost ( ) {
    return _com_dispatch_method(this, 0xd2, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(11)
inline HRESULT IAppEvents::OnGetTime ( long * TimeLo, long * TimeHi ) {
    return _com_dispatch_method(this, 0xd3, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x4003\x4003", TimeLo, TimeHi);
}

#pragma implementation_key(12)
inline HRESULT IAppEvents::OnMessageBox ( _bstr_t Tex, _bstr_t Caption, long MsgType, long * Result ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xd4, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0008\x0008\x0003\x4003", (BSTR)Tex, (BSTR)Caption, MsgType, Result);
    return _result;
}

#pragma implementation_key(13)
inline HRESULT IAppEvents::OnProgress ( long PercentDone ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0003", PercentDone);
    return _result;
}

//
// interface IScreen wrapper method implementations
//

#pragma implementation_key(14)
inline _bstr_t IScreen::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(15)
inline long IScreen::GetId ( ) {
    long _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(16)
inline HRESULT IScreen::Show ( ) {
    HRESULT _hr = raw_Show();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(17)
inline VARIANT_BOOL IScreen::GetIsCurrent ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsCurrent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(18)
inline HRESULT IScreen::SetCursor ( long ACursor, double Time, VARIANT_BOOL AbsTime ) {
    HRESULT _hr = raw_SetCursor(ACursor, Time, AbsTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(19)
inline HRESULT IScreen::ZoomIn ( ) {
    HRESULT _hr = raw_ZoomIn();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(20)
inline HRESULT IScreen::ZoomOut ( ) {
    HRESULT _hr = raw_ZoomOut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(21)
inline double IScreen::GetCursor ( long ACursor, VARIANT_BOOL AbsTime ) {
    double _result = 0;
    HRESULT _hr = raw_GetCursor(ACursor, AbsTime, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(22)
inline HRESULT IScreen::AddControl ( long Id ) {
    HRESULT _hr = raw_AddControl(Id);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(23)
inline HRESULT IScreen::RemoveControl ( long Index ) {
    HRESULT _hr = raw_RemoveControl(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(24)
inline HRESULT IScreen::AssignChannel ( long ControlIndex, _bstr_t ChannelName ) {
    HRESULT _hr = raw_AssignChannel(ControlIndex, ChannelName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(25)
inline HRESULT IScreen::UnassignChannel ( long ControlIndex, long ControlChannelIndex ) {
    HRESULT _hr = raw_UnassignChannel(ControlIndex, ControlChannelIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(26)
inline _bstr_t IScreen::GetTemplateName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TemplateName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(27)
inline VARIANT_BOOL IScreen::IsChannelAssigned ( long ControlIndex, long ControlChannelIndex ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsChannelAssigned(ControlIndex, ControlChannelIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(28)
inline HRESULT IScreen::CopyImageToFile ( long Width, long Height, long Background, _bstr_t FileName ) {
    HRESULT _hr = raw_CopyImageToFile(Width, Height, Background, FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IScreens wrapper method implementations
//

#pragma implementation_key(29)
inline long IScreens::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(30)
inline IScreenPtr IScreens::GetItem ( long Index ) {
    struct IScreen * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IScreenPtr(_result, false);
}

#pragma implementation_key(31)
inline IUnknownPtr IScreens::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(32)
inline IScreenPtr IScreens::GetCurrent ( ) {
    struct IScreen * _result = 0;
    HRESULT _hr = get_Current(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IScreenPtr(_result, false);
}

#pragma implementation_key(33)
inline HRESULT IScreens::FindWidgetByID ( _bstr_t WidgetUniqueID ) {
    HRESULT _hr = raw_FindWidgetByID(WidgetUniqueID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(34)
inline VARIANT_BOOL IScreens::IsReportGroupOwner ( _bstr_t Datafile, _bstr_t GroupName ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReportGroupOwner(Datafile, GroupName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IMasterClock wrapper method implementations
//

#pragma implementation_key(35)
inline double IMasterClock::GetCurrentTime ( ) {
    double _result = 0;
    HRESULT _hr = raw_GetCurrentTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(36)
inline double IMasterClock::GetAcqTime ( ) {
    double _result = 0;
    HRESULT _hr = raw_GetAcqTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAISetupScreen wrapper method implementations
//

#pragma implementation_key(37)
inline HRESULT IAISetupScreen::ShowChannelSetup ( long ChNo ) {
    HRESULT _hr = raw_ShowChannelSetup(ChNo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(38)
inline HRESULT IAISetupScreen::SetColumnVisible ( long ColNo, VARIANT_BOOL Visible ) {
    HRESULT _hr = raw_SetColumnVisible(ColNo, Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IDaqChannel wrapper method implementations
//

#pragma implementation_key(39)
inline double IDaqChannel::GetCardGain ( ) {
    double _result = 0;
    HRESULT _hr = get_CardGain(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(40)
inline double IDaqChannel::GetCardOffset ( ) {
    double _result = 0;
    HRESULT _hr = get_CardOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(41)
inline double IDaqChannel::GetModuleGain ( ) {
    double _result = 0;
    HRESULT _hr = get_ModuleGain(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(42)
inline double IDaqChannel::GetModuleOffset ( ) {
    double _result = 0;
    HRESULT _hr = get_ModuleOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(43)
inline long IDaqChannel::GetModuleType ( ) {
    long _result = 0;
    HRESULT _hr = get_ModuleType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(44)
inline VARIANT_BOOL IDaqChannel::GetAutoZero ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoZero(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(45)
inline void IDaqChannel::PutAutoZero ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_AutoZero(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(46)
inline HRESULT IDaqChannel::SetCardGain ( float Gain ) {
    HRESULT _hr = raw_SetCardGain(Gain);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(47)
inline unsigned short IDaqChannel::GetBoardOpt ( long Index ) {
    unsigned short _result = 0;
    HRESULT _hr = raw_GetBoardOpt(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(48)
inline long IDaqChannel::GetCardBitResolution ( ) {
    long _result = 0;
    HRESULT _hr = get_CardBitResolution(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(49)
inline float IDaqChannel::GetCustomSensorScale ( ) {
    float _result = 0;
    HRESULT _hr = get_CustomSensorScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(50)
inline void IDaqChannel::PutCustomSensorScale ( float Value ) {
    HRESULT _hr = put_CustomSensorScale(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(51)
inline float IDaqChannel::GetCustomSensorOffset ( ) {
    float _result = 0;
    HRESULT _hr = get_CustomSensorOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(52)
inline void IDaqChannel::PutCustomSensorOffset ( float Value ) {
    HRESULT _hr = put_CustomSensorOffset(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(53)
inline HRESULT IDaqChannel::SetBoardOpt ( long Index, unsigned short Used ) {
    HRESULT _hr = raw_SetBoardOpt(Index, Used);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(54)
inline VARIANT_BOOL IDaqChannel::SetSensor ( _bstr_t SensorName ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetSensor(SensorName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(55)
inline _bstr_t IDaqChannel::GetSensor ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetSensor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(56)
inline _bstr_t IDaqChannel::GetSensorType ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetSensorType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IVideoLoadEngine wrapper method implementations
//

#pragma implementation_key(57)
inline HRESULT IVideoLoadEngine::GetFramesInfo ( VARIANT * Frames ) {
    HRESULT _hr = raw_GetFramesInfo(Frames);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IVideoLoadEngines wrapper method implementations
//

#pragma implementation_key(58)
inline long IVideoLoadEngines::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(59)
inline IUnknownPtr IVideoLoadEngines::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(60)
inline IVideoLoadEnginePtr IVideoLoadEngines::GetItem ( long Index ) {
    struct IVideoLoadEngine * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVideoLoadEnginePtr(_result, false);
}

//
// interface IPadData wrapper method implementations
//

#pragma implementation_key(61)
inline _bstr_t IPadData::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(62)
inline short IPadData::GetModuleType ( ) {
    short _result = 0;
    HRESULT _hr = get_ModuleType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(63)
inline short IPadData::GetSpeedCode ( ) {
    short _result = 0;
    HRESULT _hr = get_SpeedCode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(64)
inline short IPadData::GetConfigCode ( ) {
    short _result = 0;
    HRESULT _hr = get_ConfigCode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(65)
inline _bstr_t IPadData::CopyToString ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_CopyToString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(66)
inline float IPadData::ModuleAmpl ( ) {
    float _result = 0;
    HRESULT _hr = raw_ModuleAmpl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(67)
inline float IPadData::ModuleOffset ( ) {
    float _result = 0;
    HRESULT _hr = raw_ModuleOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(68)
inline _bstr_t IPadData::CopyUnitToString ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_CopyUnitToString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(69)
inline _bstr_t IPadData::ShortCopyToString ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_ShortCopyToString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(70)
inline float IPadData::GetData ( long Index ) {
    float _result = 0;
    HRESULT _hr = get_Data(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(71)
inline short IPadData::GetRangeCode ( ) {
    short _result = 0;
    HRESULT _hr = get_RangeCode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(72)
inline void IPadData::PutRangeCode ( short Value ) {
    HRESULT _hr = put_RangeCode(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(73)
inline short IPadData::GetAddress ( ) {
    short _result = 0;
    HRESULT _hr = get_Address(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(74)
inline void IPadData::PutAddress ( short Value ) {
    HRESULT _hr = put_Address(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(75)
inline _bstr_t IPadData::GetRanges ( long Index ) {
    BSTR _result = 0;
    HRESULT _hr = get_Ranges(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(76)
inline long IPadData::GetRangesCount ( ) {
    long _result = 0;
    HRESULT _hr = get_RangesCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(77)
inline long IPadData::GetRangeIndex ( long Index ) {
    long _result = 0;
    HRESULT _hr = get_RangeIndex(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IDaqData wrapper method implementations
//

#pragma implementation_key(78)
inline _bstr_t IDaqData::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(79)
inline _bstr_t IDaqData::CopyToString ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_CopyToString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(80)
inline _bstr_t IDaqData::ShortCopyToString ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_ShortCopyToString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(81)
inline _bstr_t IDaqData::CopyUnitToString ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_CopyUnitToString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(82)
inline float IDaqData::ModuleAmpl ( ) {
    float _result = 0;
    HRESULT _hr = raw_ModuleAmpl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(83)
inline float IDaqData::ModuleOffset ( ) {
    float _result = 0;
    HRESULT _hr = raw_ModuleOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(84)
inline short IDaqData::GetAddress ( ) {
    short _result = 0;
    HRESULT _hr = get_Address(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(85)
inline void IDaqData::PutAddress ( short Value ) {
    HRESULT _hr = put_Address(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(86)
inline unsigned char IDaqData::GetRangeCode ( ) {
    unsigned char _result = 0;
    HRESULT _hr = get_RangeCode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(87)
inline void IDaqData::PutRangeCode ( unsigned char Value ) {
    HRESULT _hr = put_RangeCode(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(88)
inline unsigned char IDaqData::GetFilterCode ( ) {
    unsigned char _result = 0;
    HRESULT _hr = get_FilterCode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(89)
inline void IDaqData::PutFilterCode ( unsigned char Value ) {
    HRESULT _hr = put_FilterCode(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(90)
inline unsigned char IDaqData::GetICPInput ( ) {
    unsigned char _result = 0;
    HRESULT _hr = get_ICPInput(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(91)
inline void IDaqData::PutICPInput ( unsigned char Value ) {
    HRESULT _hr = put_ICPInput(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(92)
inline unsigned char IDaqData::GetVRange ( ) {
    unsigned char _result = 0;
    HRESULT _hr = get_VRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(93)
inline void IDaqData::PutVRange ( unsigned char Value ) {
    HRESULT _hr = put_VRange(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(94)
inline unsigned char IDaqData::GetOverflow ( ) {
    unsigned char _result = 0;
    HRESULT _hr = get_Overflow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(95)
inline void IDaqData::PutOverflow ( unsigned char Value ) {
    HRESULT _hr = put_Overflow(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(96)
inline unsigned char IDaqData::GetCurrentSource ( ) {
    unsigned char _result = 0;
    HRESULT _hr = get_CurrentSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(97)
inline void IDaqData::PutCurrentSource ( unsigned char Value ) {
    HRESULT _hr = put_CurrentSource(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(98)
inline unsigned char IDaqData::GetHighpassType ( ) {
    unsigned char _result = 0;
    HRESULT _hr = get_HighpassType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(99)
inline void IDaqData::PutHighpassType ( unsigned char Value ) {
    HRESULT _hr = put_HighpassType(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(100)
inline unsigned char IDaqData::GetModuleError ( ) {
    unsigned char _result = 0;
    HRESULT _hr = get_ModuleError(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(101)
inline void IDaqData::PutModuleError ( unsigned char Value ) {
    HRESULT _hr = put_ModuleError(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(102)
inline unsigned char IDaqData::GetRemote ( ) {
    unsigned char _result = 0;
    HRESULT _hr = get_Remote(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(103)
inline void IDaqData::PutRemote ( unsigned char Value ) {
    HRESULT _hr = put_Remote(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(104)
inline _bstr_t IDaqData::GetRanges ( long ARangeCode ) {
    BSTR _result = 0;
    HRESULT _hr = get_Ranges(ARangeCode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(105)
inline long IDaqData::GetRangesCount ( ) {
    long _result = 0;
    HRESULT _hr = get_RangesCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(106)
inline _bstr_t IDaqData::GetFilters ( unsigned char AFilterCode ) {
    BSTR _result = 0;
    HRESULT _hr = get_Filters(AFilterCode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(107)
inline long IDaqData::GetFiltersCount ( ) {
    long _result = 0;
    HRESULT _hr = get_FiltersCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(108)
inline short IDaqData::GetModuleType ( ) {
    short _result = 0;
    HRESULT _hr = get_ModuleType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(109)
inline void IDaqData::PutModuleType ( short Value ) {
    HRESULT _hr = put_ModuleType(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(110)
inline long IDaqData::GetDaqNNamesCount ( ) {
    long _result = 0;
    HRESULT _hr = get_DaqNNamesCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(111)
inline _bstr_t IDaqData::GetDaqNNames ( short ANameCode ) {
    BSTR _result = 0;
    HRESULT _hr = get_DaqNNames(ANameCode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(112)
inline double IDaqData::ThermLinearize ( double InputVoltage ) {
    double _result = 0;
    HRESULT _hr = raw_ThermLinearize(InputVoltage, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(113)
inline char IDaqData::GetFREQAInputCoupling ( ) {
    char _result = 0;
    HRESULT _hr = get_FREQAInputCoupling(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(114)
inline void IDaqData::PutFREQAInputCoupling ( char Value ) {
    HRESULT _hr = put_FREQAInputCoupling(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(115)
inline char IDaqData::GetFREQAOutputFilter ( ) {
    char _result = 0;
    HRESULT _hr = get_FREQAOutputFilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(116)
inline void IDaqData::PutFREQAOutputFilter ( char Value ) {
    HRESULT _hr = put_FREQAOutputFilter(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(117)
inline float IDaqData::GetFREQATriggerLevel ( ) {
    float _result = 0;
    HRESULT _hr = get_FREQATriggerLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(118)
inline void IDaqData::PutFREQATriggerLevel ( float Value ) {
    HRESULT _hr = put_FREQATriggerLevel(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IModule wrapper method implementations
//

#pragma implementation_key(119)
inline short IModule::GetIndex ( ) {
    short _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(120)
inline IPadDataPtr IModule::GetPadData ( ) {
    struct IPadData * _result = 0;
    HRESULT _hr = get_PadData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPadDataPtr(_result, false);
}

#pragma implementation_key(121)
inline HRESULT IModule::SetPad ( long NewAddress ) {
    HRESULT _hr = raw_SetPad(NewAddress);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(122)
inline HRESULT IModule::GetDataPad ( ) {
    HRESULT _hr = raw_GetDataPad();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(123)
inline IDaqDataPtr IModule::GetDaqData ( ) {
    struct IDaqData * _result = 0;
    HRESULT _hr = get_DaqData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDaqDataPtr(_result, false);
}

#pragma implementation_key(124)
inline VARIANT_BOOL IModule::SetDaq ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetDaq(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(125)
inline HRESULT IModule::SetDaqAddress ( long Address, long Timeout ) {
    HRESULT _hr = raw_SetDaqAddress(Address, Timeout);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(126)
inline VARIANT_BOOL IModule::FillModule ( long Address, long Timeout ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_FillModule(Address, Timeout, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(127)
inline HRESULT IModule::DetectModule ( long Address ) {
    HRESULT _hr = raw_DetectModule(Address);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(128)
inline short IModule::GetModuleType ( ) {
    short _result = 0;
    HRESULT _hr = get_ModuleType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(129)
inline void IModule::PutModuleType ( short Value ) {
    HRESULT _hr = put_ModuleType(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(130)
inline HRESULT IModule::ClearModule ( ) {
    HRESULT _hr = raw_ClearModule();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(131)
inline _bstr_t IModule::GetSerialNumber ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetSerialNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(132)
inline HRESULT IModule::FREQAFindTriggerLevel ( ) {
    HRESULT _hr = raw_FREQAFindTriggerLevel();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(133)
inline HRESULT IModule::SetModule ( long SetType ) {
    HRESULT _hr = raw_SetModule(SetType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IModules wrapper method implementations
//

#pragma implementation_key(134)
inline long IModules::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(135)
inline IUnknownPtr IModules::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(136)
inline IModulePtr IModules::GetItem ( long Index ) {
    struct IModule * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModulePtr(_result, false);
}

//
// interface IAveragedFFT wrapper method implementations
//

#pragma implementation_key(137)
inline long IAveragedFFT::GetAverageType ( ) {
    long _result = 0;
    HRESULT _hr = get_AverageType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(138)
inline void IAveragedFFT::PutAverageType ( long Value ) {
    HRESULT _hr = put_AverageType(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(139)
inline long IAveragedFFT::GetWindow ( ) {
    long _result = 0;
    HRESULT _hr = get_Window(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(140)
inline void IAveragedFFT::PutWindow ( long Value ) {
    HRESULT _hr = put_Window(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(141)
inline long IAveragedFFT::GetLines ( ) {
    long _result = 0;
    HRESULT _hr = get_Lines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(142)
inline void IAveragedFFT::PutLines ( long Value ) {
    HRESULT _hr = put_Lines(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(143)
inline long IAveragedFFT::GetAveCount ( ) {
    long _result = 0;
    HRESULT _hr = get_AveCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(144)
inline void IAveragedFFT::PutAveCount ( long Value ) {
    HRESULT _hr = put_AveCount(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(145)
inline HRESULT IAveragedFFT::GetData ( long ChNo, long OctaveDivider, long Weighting, long * BandCount, VARIANT * Data ) {
    HRESULT _hr = raw_GetData(ChNo, OctaveDivider, Weighting, BandCount, Data);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(146)
inline HRESULT IAveragedFFT::GetChannels ( VARIANT * Channels ) {
    HRESULT _hr = raw_GetChannels(Channels);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(147)
inline VARIANT_BOOL IAveragedFFT::CalculateFromPos ( long Mid, long Dir ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_CalculateFromPos(Mid, Dir, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(148)
inline long IAveragedFFT::GetOverlap ( ) {
    long _result = 0;
    HRESULT _hr = get_Overlap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(149)
inline void IAveragedFFT::PutOverlap ( long Value ) {
    HRESULT _hr = put_Overlap(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(150)
inline HRESULT IAveragedFFT::GetFFTData ( long ChNo, long Weighting, long DCCutoff, VARIANT * Data ) {
    HRESULT _hr = raw_GetFFTData(ChNo, Weighting, DCCutoff, Data);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(151)
inline HRESULT IAveragedFFT::GetCPBData ( long ChNo, long OctaveDivider, long Weighting, long * BandCount, VARIANT * Data ) {
    HRESULT _hr = raw_GetCPBData(ChNo, OctaveDivider, Weighting, BandCount, Data);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(152)
inline HRESULT IAveragedFFT::GetCPBXData ( long ChNo, long OctaveDivider, long Weighting, long * BandCount, VARIANT * Data ) {
    HRESULT _hr = raw_GetCPBXData(ChNo, OctaveDivider, Weighting, BandCount, Data);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IPluginLicense wrapper method implementations
//

#pragma implementation_key(153)
inline long IPluginLicense::GetRegTypeWanted ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetRegTypeWanted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(154)
inline long IPluginLicense::GetTrustedCode ( long Param ) {
    long _result = 0;
    HRESULT _hr = raw_GetTrustedCode(Param, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(155)
inline _bstr_t IPluginLicense::GetHardwareCode ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetHardwareCode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(156)
inline VARIANT_BOOL IPluginLicense::SetLicenseCode ( _bstr_t LicenseCode ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetLicenseCode(LicenseCode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IDaqGroup wrapper method implementations
//

#pragma implementation_key(157)
inline long IDaqGroup::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(158)
inline IDaqChannelPtr IDaqGroup::GetItem ( long Index ) {
    struct IDaqChannel * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDaqChannelPtr(_result, false);
}

#pragma implementation_key(159)
inline IUnknownPtr IDaqGroup::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IFileNameSettings wrapper method implementations
//

#pragma implementation_key(160)
inline VARIANT_BOOL IFileNameSettings::GetAutoCreate ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoCreate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(161)
inline void IFileNameSettings::PutAutoCreate ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_AutoCreate(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(162)
inline VARIANT_BOOL IFileNameSettings::GetUseMultiFile ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseMultiFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(163)
inline void IFileNameSettings::PutUseMultiFile ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_UseMultiFile(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(164)
inline _bstr_t IFileNameSettings::GetBaseFileName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BaseFileName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(165)
inline void IFileNameSettings::PutBaseFileName ( _bstr_t Value ) {
    HRESULT _hr = put_BaseFileName(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(166)
inline VARIANT_BOOL IFileNameSettings::GetUseTime ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(167)
inline void IFileNameSettings::PutUseTime ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_UseTime(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(168)
inline VARIANT_BOOL IFileNameSettings::GetUseDate ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(169)
inline void IFileNameSettings::PutUseDate ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_UseDate(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(170)
inline short IFileNameSettings::GetAutoFlipFile ( ) {
    short _result = 0;
    HRESULT _hr = get_AutoFlipFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(171)
inline void IFileNameSettings::PutAutoFlipFile ( short Value ) {
    HRESULT _hr = put_AutoFlipFile(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(172)
inline float IFileNameSettings::GetAutoFlipSize ( ) {
    float _result = 0;
    HRESULT _hr = get_AutoFlipSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(173)
inline void IFileNameSettings::PutAutoFlipSize ( float Value ) {
    HRESULT _hr = put_AutoFlipSize(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(174)
inline long IFileNameSettings::GetAutoFlipUnit ( ) {
    long _result = 0;
    HRESULT _hr = get_AutoFlipUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(175)
inline void IFileNameSettings::PutAutoFlipUnit ( long Value ) {
    HRESULT _hr = put_AutoFlipUnit(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(176)
inline VARIANT_BOOL IFileNameSettings::GetAutoFlipAbsTime ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoFlipAbsTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(177)
inline void IFileNameSettings::PutAutoFlipAbsTime ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_AutoFlipAbsTime(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(178)
inline long IFileNameSettings::GetMultiFileStartIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_MultiFileStartIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(179)
inline void IFileNameSettings::PutMultiFileStartIndex ( long Value ) {
    HRESULT _hr = put_MultiFileStartIndex(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(180)
inline HRESULT IFileNameSettings::AutoFlipUnits ( _bstr_t PluginGUID, VARIANT * Units ) {
    HRESULT _hr = raw_AutoFlipUnits(PluginGUID, Units);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IPluginChannel wrapper method implementations
//

#pragma implementation_key(181)
inline HRESULT IPluginChannel::ReserveMemory ( long DBSize ) {
    HRESULT _hr = raw_ReserveMemory(DBSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(182)
inline HRESULT IPluginChannel::FreeMemory ( ) {
    HRESULT _hr = raw_FreeMemory();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(183)
inline HRESULT IPluginChannel::SetIndex ( long Level, const _variant_t & Ind ) {
    HRESULT _hr = raw_SetIndex(Level, Ind);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(184)
inline HRESULT IPluginChannel::SetChNo ( _bstr_t Value ) {
    HRESULT _hr = raw_SetChNo(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(185)
inline HRESULT IPluginChannel::SetSettings ( _bstr_t Value ) {
    HRESULT _hr = raw_SetSettings(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(186)
inline _bstr_t IPluginChannel::GetLongName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LongName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(187)
inline void IPluginChannel::PutLongName ( _bstr_t Value ) {
    HRESULT _hr = put_LongName(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(188)
inline HRESULT IPluginChannel::MarkAsOffline ( ) {
    HRESULT _hr = raw_MarkAsOffline();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(189)
inline _bstr_t IPluginChannel::GetPluginGUID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PluginGUID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(190)
inline long IPluginChannel::GetDefaultRes ( ) {
    long _result = 0;
    HRESULT _hr = get_DefaultRes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(191)
inline void IPluginChannel::PutDefaultRes ( long Value ) {
    HRESULT _hr = put_DefaultRes(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(192)
inline VARIANT_BOOL IPluginChannel::GetAlwaysReserveMemoryInSetup ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AlwaysReserveMemoryInSetup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(193)
inline void IPluginChannel::PutAlwaysReserveMemoryInSetup ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_AlwaysReserveMemoryInSetup(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(194)
inline double IPluginChannel::GetDefaultMax ( ) {
    double _result = 0;
    HRESULT _hr = get_DefaultMax(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(195)
inline void IPluginChannel::PutDefaultMax ( double Value ) {
    HRESULT _hr = put_DefaultMax(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(196)
inline double IPluginChannel::GetDefaultMin ( ) {
    double _result = 0;
    HRESULT _hr = get_DefaultMin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(197)
inline void IPluginChannel::PutDefaultMin ( double Value ) {
    HRESULT _hr = put_DefaultMin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(198)
inline long IPluginChannel::GetAsyncBufSize ( ) {
    long _result = 0;
    HRESULT _hr = get_AsyncBufSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(199)
inline void IPluginChannel::PutAsyncBufSize ( long Value ) {
    HRESULT _hr = put_AsyncBufSize(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(200)
inline HRESULT IPluginChannel::SetCalcSingleValue ( VARIANT_BOOL Value ) {
    HRESULT _hr = raw_SetCalcSingleValue(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(201)
inline HRESULT IPluginChannel::SetCanOverload ( VARIANT_BOOL Value ) {
    HRESULT _hr = raw_SetCanOverload(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IDiscreteItem wrapper method implementations
//

#pragma implementation_key(202)
inline long IDiscreteItem::GetValue ( ) {
    long _result = 0;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(203)
inline void IDiscreteItem::PutValue ( long Value ) {
    HRESULT _hr = put_Value(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(204)
inline _bstr_t IDiscreteItem::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(205)
inline void IDiscreteItem::PutCaption ( _bstr_t Value ) {
    HRESULT _hr = put_Caption(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(206)
inline long IDiscreteItem::GetColor ( ) {
    long _result = 0;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(207)
inline void IDiscreteItem::PutColor ( long Value ) {
    HRESULT _hr = put_Color(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IDiscreteList wrapper method implementations
//

#pragma implementation_key(208)
inline long IDiscreteList::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(209)
inline IUnknownPtr IDiscreteList::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(210)
inline HRESULT IDiscreteList::Remove ( long Ind ) {
    HRESULT _hr = raw_Remove(Ind);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(211)
inline IDiscreteItemPtr IDiscreteList::GetItem ( long Index ) {
    struct IDiscreteItem * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDiscreteItemPtr(_result, false);
}

#pragma implementation_key(212)
inline IDiscreteItemPtr IDiscreteList::Add ( ) {
    struct IDiscreteItem * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDiscreteItemPtr(_result, false);
}

#pragma implementation_key(213)
inline IDiscreteItemPtr IDiscreteList::Find ( long Val ) {
    struct IDiscreteItem * _result = 0;
    HRESULT _hr = raw_Find(Val, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDiscreteItemPtr(_result, false);
}

//
// interface IGHObject wrapper method implementations
//

#pragma implementation_key(214)
inline _bstr_t IGHObject::GetData ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Data(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(215)
inline void IGHObject::PutData ( _bstr_t Value ) {
    HRESULT _hr = put_Data(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(216)
inline _bstr_t IGHObject::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(217)
inline void IGHObject::PutCaption ( _bstr_t Value ) {
    HRESULT _hr = put_Caption(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(218)
inline long IGHObject::GetObjType ( ) {
    long _result = 0;
    HRESULT _hr = get_ObjType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(219)
inline _variant_t IGHObject::GetSubList ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_SubList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(220)
inline void IGHObject::PutSubList ( const _variant_t & Value ) {
    HRESULT _hr = put_SubList(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(221)
inline HRESULT IGHObject::SetObjType ( long Value ) {
    HRESULT _hr = raw_SetObjType(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(222)
inline _bstr_t IGHObject::GetUniqueID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UniqueID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(223)
inline void IGHObject::PutUniqueID ( _bstr_t Value ) {
    HRESULT _hr = put_UniqueID(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(224)
inline long IGHObject::GetDataType ( ) {
    long _result = 0;
    HRESULT _hr = get_DataType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(225)
inline void IGHObject::PutDataType ( long Value ) {
    HRESULT _hr = put_DataType(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(226)
inline _bstr_t IGHObject::GetDefaultData ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DefaultData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(227)
inline void IGHObject::PutDefaultData ( _bstr_t Value ) {
    HRESULT _hr = put_DefaultData(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IGlobalHeader wrapper method implementations
//

#pragma implementation_key(228)
inline long IGlobalHeader::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(229)
inline IUnknownPtr IGlobalHeader::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(230)
inline IGHObjectPtr IGlobalHeader::GetItem ( long Ind ) {
    struct IGHObject * _result = 0;
    HRESULT _hr = get_Item(Ind, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGHObjectPtr(_result, false);
}

#pragma implementation_key(231)
inline IGHObjectPtr IGlobalHeader::Add ( ) {
    struct IGHObject * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGHObjectPtr(_result, false);
}

#pragma implementation_key(232)
inline HRESULT IGlobalHeader::Remove ( long Index ) {
    HRESULT _hr = raw_Remove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ITiming wrapper method implementations
//

#pragma implementation_key(233)
inline VARIANT_BOOL ITiming::GetTracking ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Tracking(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IDewePlugin wrapper method implementations
//

#pragma implementation_key(234)
inline HRESULT IDewePlugin::OnMessage ( long Msg, const _variant_t & InParam, VARIANT * OutParam ) {
    HRESULT _hr = raw_OnMessage(Msg, InParam, OutParam);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IPluginChannelXMLHelper wrapper method implementations
//

#pragma implementation_key(235)
inline _variant_t IPluginChannelXMLHelper::FindNode ( long IndexLevel, const _variant_t & Ind, VARIANT_BOOL ChannelNode, VARIANT_BOOL AllowCreate ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_FindNode(IndexLevel, Ind, ChannelNode, AllowCreate, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(236)
inline HRESULT IPluginChannelXMLHelper::StartExtractChannels ( ) {
    HRESULT _hr = raw_StartExtractChannels();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(237)
inline VARIANT_BOOL IPluginChannelXMLHelper::ExtractNextChannel ( long * IndexLevel, VARIANT * Ind ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ExtractNextChannel(IndexLevel, Ind, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(238)
inline HRESULT IPluginChannelXMLHelper::MountAllChannels ( ) {
    HRESULT _hr = raw_MountAllChannels();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IRegistrationHelper wrapper method implementations
//

#pragma implementation_key(239)
inline HRESULT IRegistrationHelper::CheckRegistration ( ) {
    HRESULT _hr = raw_CheckRegistration();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(240)
inline VARIANT_BOOL IRegistrationHelper::ActiveLicenseIncludes ( GUID Guid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ActiveLicenseIncludes(Guid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAmplifier wrapper method implementations
//

#pragma implementation_key(241)
inline long IAmplifier::IOControl ( long IOCode, const _variant_t & InParam, VARIANT * OutParam ) {
    long _result = 0;
    HRESULT _hr = raw_IOControl(IOCode, InParam, OutParam, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAmplChain wrapper method implementations
//

#pragma implementation_key(242)
inline long IAmplChain::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(243)
inline IUnknownPtr IAmplChain::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(244)
inline IAmplifierPtr IAmplChain::GetItem ( long Index ) {
    struct IAmplifier * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAmplifierPtr(_result, false);
}

#pragma implementation_key(245)
inline long IAmplChain::IOControl ( long IOCode, const _variant_t & InParam, VARIANT * OutParam ) {
    long _result = 0;
    HRESULT _hr = raw_IOControl(IOCode, InParam, OutParam, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAmplChainList wrapper method implementations
//

#pragma implementation_key(246)
inline long IAmplChainList::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(247)
inline IUnknownPtr IAmplChainList::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(248)
inline IAmplChainPtr IAmplChainList::GetItem ( long Index ) {
    struct IAmplChain * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAmplChainPtr(_result, false);
}

//
// interface IAmplInterface wrapper method implementations
//

#pragma implementation_key(249)
inline IAmplChainListPtr IAmplInterface::GetChainList ( ) {
    struct IAmplChainList * _result = 0;
    HRESULT _hr = get_ChainList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAmplChainListPtr(_result, false);
}

#pragma implementation_key(250)
inline IAmplInterfacePtr IAmplInterface::GetSubInterface ( ) {
    struct IAmplInterface * _result = 0;
    HRESULT _hr = get_SubInterface(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAmplInterfacePtr(_result, false);
}

#pragma implementation_key(251)
inline long IAmplInterface::IOControl ( long IOCode, const _variant_t & InParam, VARIANT * OutParam ) {
    long _result = 0;
    HRESULT _hr = raw_IOControl(IOCode, InParam, OutParam, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAmplInterfaces wrapper method implementations
//

#pragma implementation_key(252)
inline IAmplInterfacePtr IAmplInterfaces::GetMainInterface ( ) {
    struct IAmplInterface * _result = 0;
    HRESULT _hr = get_MainInterface(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAmplInterfacePtr(_result, false);
}

//
// interface IImportChannel wrapper method implementations
//

#pragma implementation_key(253)
inline long IImportChannel::GetDefaultRes ( ) {
    long _result = 0;
    HRESULT _hr = get_DefaultRes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(254)
inline void IImportChannel::PutDefaultRes ( long Value ) {
    HRESULT _hr = put_DefaultRes(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IPluginLicense2 wrapper method implementations
//

#pragma implementation_key(255)
inline _bstr_t IPluginLicense2::GetLicenseCode ( VARIANT_BOOL Builtin ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetLicenseCode(Builtin, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IOfflineCalc wrapper method implementations
//

#pragma implementation_key(256)
inline HRESULT IOfflineCalc::StoreCalculatedChannels ( ) {
    HRESULT _hr = raw_StoreCalculatedChannels();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(257)
inline HRESULT IOfflineCalc::Calculate ( ) {
    HRESULT _hr = raw_Calculate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ICustomDAQ2 wrapper method implementations
//

#pragma implementation_key(258)
inline HRESULT ICustomDAQ2::OnMessage ( long Msg, const _variant_t & InParam, VARIANT * OutParam ) {
    HRESULT _result = 0;
    HRESULT _hr = raw_OnMessage(Msg, InParam, OutParam, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IDigitalTrigLevel wrapper method implementations
//

#pragma implementation_key(259)
inline long IDigitalTrigLevel::GetTrigType ( ) {
    long _result = 0;
    HRESULT _hr = get_TrigType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(260)
inline long IDigitalTrigLevel::GetCoupling ( ) {
    long _result = 0;
    HRESULT _hr = get_Coupling(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(261)
inline long IDigitalTrigLevel::GetTrigLevel ( ) {
    long _result = 0;
    HRESULT _hr = get_TrigLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(262)
inline long IDigitalTrigLevel::GetReTrigLevel ( ) {
    long _result = 0;
    HRESULT _hr = get_ReTrigLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ISyncSource wrapper method implementations
//

#pragma implementation_key(263)
inline double ISyncSource::GetSampleRate ( ) {
    double _result = 0;
    HRESULT _hr = get_SampleRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(264)
inline void ISyncSource::PutSampleRate ( double Value ) {
    HRESULT _hr = put_SampleRate(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(265)
inline VARIANT_BOOL ISyncSource::GetIsSyncSource ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsSyncSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(266)
inline void ISyncSource::PutIsSyncSource ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_IsSyncSource(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ICANMsg wrapper method implementations
//

#pragma implementation_key(267)
inline HRESULT ICANMsg::AddData ( const _variant_t & Data, double TimeStamp ) {
    HRESULT _hr = raw_AddData(Data, TimeStamp);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ICANPortContext wrapper method implementations
//

#pragma implementation_key(268)
inline ICANMsgPtr ICANPortContext::GetMsg ( long ArbId, VARIANT_BOOL Extended, long DLC ) {
    struct ICANMsg * _result = 0;
    HRESULT _hr = raw_GetMsg(ArbId, Extended, DLC, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICANMsgPtr(_result, false);
}

#pragma implementation_key(269)
inline HRESULT ICANPortContext::SetTotalMsgCount ( long Value ) {
    HRESULT _hr = raw_SetTotalMsgCount(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(270)
inline HRESULT ICANPortContext::SetErrMsgCount ( long Value ) {
    HRESULT _hr = raw_SetErrMsgCount(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(271)
inline VARIANT_BOOL ICANPortContext::GetListenOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ListenOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(272)
inline VARIANT_BOOL ICANPortContext::GetUsed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Used(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(273)
inline long ICANPortContext::GetBaudRate ( ) {
    long _result = 0;
    HRESULT _hr = get_BaudRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(274)
inline VARIANT_BOOL ICANPortContext::GetTermination ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Termination(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(275)
inline VARIANT_BOOL ICANPortContext::GetCaptured ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Captured(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ICANContext wrapper method implementations
//

#pragma implementation_key(276)
inline ICANPortContextPtr ICANContext::GetPorts ( long Index ) {
    struct ICANPortContext * _result = 0;
    HRESULT _hr = get_Ports(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICANPortContextPtr(_result, false);
}

#pragma implementation_key(277)
inline long ICANContext::GetPortCount ( ) {
    long _result = 0;
    HRESULT _hr = get_PortCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(278)
inline double ICANContext::GetClock ( ) {
    double _result = 0;
    HRESULT _hr = raw_GetClock(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(279)
inline double ICANContext::GetClockOffset ( ) {
    double _result = 0;
    HRESULT _hr = raw_GetClockOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IProjectManager wrapper method implementations
//

#pragma implementation_key(280)
inline VARIANT_BOOL IProjectManager::ChangeProject ( _bstr_t ProjectName ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ChangeProject(ProjectName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(281)
inline _bstr_t IProjectManager::GetCurrentProject ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetCurrentProject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(282)
inline _variant_t IProjectManager::GetProjects ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetProjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface IDIPort wrapper method implementations
//

#pragma implementation_key(283)
inline HRESULT IDIPort::ApplyDBBuf ( ) {
    HRESULT _hr = raw_ApplyDBBuf();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IDIGroup wrapper method implementations
//

#pragma implementation_key(284)
inline long IDIGroup::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(285)
inline IUnknownPtr IDIGroup::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(286)
inline IDIPortPtr IDIGroup::GetItem ( long Index ) {
    struct IDIPort * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDIPortPtr(_result, false);
}

//
// interface IDIChannel wrapper method implementations
//

#pragma implementation_key(287)
inline long IDIChannel::GetDIFilter ( ) {
    long _result = 0;
    HRESULT _hr = get_DIFilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(288)
inline VARIANT_BOOL IDIChannel::GetDIInvert ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DIInvert(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(289)
inline IDigitalTrigLevelPtr IDIChannel::GetTrigLevels ( ) {
    struct IDigitalTrigLevel * _result = 0;
    HRESULT _hr = get_TrigLevels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDigitalTrigLevelPtr(_result, false);
}

//
// interface IVideoFrame wrapper method implementations
//

#pragma implementation_key(290)
inline _variant_t IVideoFrame::GetData ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(291)
inline long IVideoFrame::GetBufSize ( ) {
    long _result = 0;
    HRESULT _hr = get_BufSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(292)
inline double IVideoFrame::GetTS ( ) {
    double _result = 0;
    HRESULT _hr = raw_GetTS(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ICamera wrapper method implementations
//

#pragma implementation_key(293)
inline IVideoFramePtr ICamera::GetFrameList ( long Index ) {
    struct IVideoFrame * _result = 0;
    HRESULT _hr = get_FrameList(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVideoFramePtr(_result, false);
}

#pragma implementation_key(294)
inline _variant_t ICamera::GetBitmapInfoHeader ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetBitmapInfoHeader(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(295)
inline long ICamera::GetFrameBufSize ( ) {
    long _result = 0;
    HRESULT _hr = get_FrameBufSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(296)
inline long ICamera::GetFramePos ( ) {
    long _result = 0;
    HRESULT _hr = get_FramePos(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(297)
inline _bstr_t ICamera::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(298)
inline long ICamera::GetFrameDataSize ( ) {
    long _result = 0;
    HRESULT _hr = get_FrameDataSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(299)
inline long ICamera::GetFrameSizeInBytes ( ) {
    long _result = 0;
    HRESULT _hr = get_FrameSizeInBytes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(300)
inline VARIANT_BOOL ICamera::GetUsed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Used(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(301)
inline HRESULT ICamera::Start ( ) {
    HRESULT _hr = raw_Start();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(302)
inline HRESULT ICamera::Stop ( ) {
    HRESULT _hr = raw_Stop();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(303)
inline _variant_t ICamera::TakeSnapshot ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_TakeSnapshot(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(304)
inline _bstr_t ICamera::GetDisplayName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DisplayName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IVideo wrapper method implementations
//

#pragma implementation_key(305)
inline long IVideo::GetCameraCount ( ) {
    long _result = 0;
    HRESULT _hr = get_CameraCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(306)
inline ICameraPtr IVideo::GetCameras ( long Index ) {
    struct ICamera * _result = 0;
    HRESULT _hr = get_Cameras(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICameraPtr(_result, false);
}

//
// interface IViewInfo wrapper method implementations
//

#pragma implementation_key(307)
inline long IViewInfo::GetAxisViewType ( ) {
    long _result = 0;
    HRESULT _hr = get_AxisViewType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(308)
inline void IViewInfo::PutAxisViewType ( long Value ) {
    HRESULT _hr = put_AxisViewType(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(309)
inline long IViewInfo::GetDefaultVC ( ) {
    long _result = 0;
    HRESULT _hr = get_DefaultVC(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(310)
inline void IViewInfo::PutDefaultVC ( long Value ) {
    HRESULT _hr = put_DefaultVC(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ILockableCursor wrapper method implementations
//

#pragma implementation_key(311)
inline VARIANT_BOOL ILockableCursor::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(312)
inline double ILockableCursor::GetPosition ( ) {
    double _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(313)
inline void ILockableCursor::PutPosition ( double Value ) {
    HRESULT _hr = put_Position(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(314)
inline HRESULT ILockableCursor::Lock ( ) {
    HRESULT _hr = raw_Lock();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(315)
inline HRESULT ILockableCursor::Unlock ( ) {
    HRESULT _hr = raw_Unlock();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ILockableCursors wrapper method implementations
//

#pragma implementation_key(316)
inline long ILockableCursors::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(317)
inline IUnknownPtr ILockableCursors::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(318)
inline ILockableCursorPtr ILockableCursors::GetItem ( long Index ) {
    struct ILockableCursor * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILockableCursorPtr(_result, false);
}

//
// interface IMathItem2 wrapper method implementations
//

#pragma implementation_key(319)
inline long IMathItem2::IOControl ( long Msg, const _variant_t & InParam, VARIANT * OutParam ) {
    long _result = 0;
    HRESULT _hr = raw_IOControl(Msg, InParam, OutParam, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(320)
inline IUnknownPtr IMathItem2::GetImplObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_GetImplObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IDwXMLNode wrapper method implementations
//

#pragma implementation_key(321)
inline HRESULT IDwXMLNode::SetValue ( _bstr_t Value ) {
    HRESULT _hr = raw_SetValue(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(322)
inline HRESULT IDwXMLNode::AddChild ( struct IDwXMLNode * Node ) {
    HRESULT _hr = raw_AddChild(Node);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(323)
inline HRESULT IDwXMLNode::RemoveChildNode ( struct IDwXMLNode * Node ) {
    HRESULT _hr = raw_RemoveChildNode(Node);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(324)
inline HRESULT IDwXMLNode::ClearChildNodes ( ) {
    HRESULT _hr = raw_ClearChildNodes();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(325)
inline IDwXMLNodePtr IDwXMLNode::FindChildNode ( _bstr_t NodeName ) {
    struct IDwXMLNode * _result = 0;
    HRESULT _hr = raw_FindChildNode(NodeName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDwXMLNodePtr(_result, false);
}

#pragma implementation_key(326)
inline IDwXMLNodePtr IDwXMLNode::GetChild ( long I ) {
    struct IDwXMLNode * _result = 0;
    HRESULT _hr = raw_GetChild(I, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDwXMLNodePtr(_result, false);
}

#pragma implementation_key(327)
inline long IDwXMLNode::GetChildCount ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetChildCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(328)
inline IDwXMLNodePtr IDwXMLNode::Clone ( ) {
    struct IDwXMLNode * _result = 0;
    HRESULT _hr = raw_Clone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDwXMLNodePtr(_result, false);
}

#pragma implementation_key(329)
inline IDwXMLNodePtr IDwXMLNode::GetNextSibling ( ) {
    struct IDwXMLNode * _result = 0;
    HRESULT _hr = raw_GetNextSibling(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDwXMLNodePtr(_result, false);
}

#pragma implementation_key(330)
inline HRESULT IDwXMLNode::AddAttrNode ( struct IDwXMLNode * AttrNode ) {
    HRESULT _hr = raw_AddAttrNode(AttrNode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(331)
inline HRESULT IDwXMLNode::RemoveAttrNode ( struct IDwXMLNode * AttrNode ) {
    HRESULT _hr = raw_RemoveAttrNode(AttrNode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(332)
inline IDwXMLNodePtr IDwXMLNode::FindAttrNode ( _bstr_t AttrNodeName ) {
    struct IDwXMLNode * _result = 0;
    HRESULT _hr = raw_FindAttrNode(AttrNodeName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDwXMLNodePtr(_result, false);
}

#pragma implementation_key(333)
inline IDwXMLNodePtr IDwXMLNode::GetAttr ( long I ) {
    struct IDwXMLNode * _result = 0;
    HRESULT _hr = raw_GetAttr(I, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDwXMLNodePtr(_result, false);
}

#pragma implementation_key(334)
inline long IDwXMLNode::GetAttrCount ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetAttrCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(335)
inline HRESULT IDwXMLNode::ClearAttrNodes ( ) {
    HRESULT _hr = raw_ClearAttrNodes();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(336)
inline _bstr_t IDwXMLNode::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(337)
inline _bstr_t IDwXMLNode::GetValue ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface ISequencer wrapper method implementations
//

#pragma implementation_key(338)
inline HRESULT ISequencer::ImportSeqVariables ( _bstr_t FileName ) {
    HRESULT _hr = raw_ImportSeqVariables(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(339)
inline HRESULT ISequencer::ExportSeqVariables ( _bstr_t FileName ) {
    HRESULT _hr = raw_ExportSeqVariables(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(340)
inline HRESULT ISequencer::StopSequence ( ) {
    HRESULT _hr = raw_StopSequence();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(341)
inline _bstr_t ISequencer::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IVariableChannel wrapper method implementations
//

#pragma implementation_key(342)
inline HRESULT IVariableChannel::SetControlValue ( double Value ) {
    HRESULT _hr = raw_SetControlValue(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IUIHelper wrapper method implementations
//

#pragma implementation_key(343)
inline HRESULT IUIHelper::AddMUI ( void * Param1 ) {
    HRESULT _hr = raw_AddMUI(Param1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IMeasUnit wrapper method implementations
//

#pragma implementation_key(344)
inline VARIANT_BOOL IMeasUnit::GetUsed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Used(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(345)
inline void IMeasUnit::PutUsed ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Used(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(346)
inline HRESULT IMeasUnit::SendCustomCommand ( _bstr_t CmdIn, _bstr_t DataIn, BSTR * CmdOut, BSTR * DataOut ) {
    HRESULT _hr = raw_SendCustomCommand(CmdIn, DataIn, CmdOut, DataOut);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(347)
inline HRESULT IMeasUnit::EnterSync ( ) {
    HRESULT _hr = raw_EnterSync();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(348)
inline HRESULT IMeasUnit::LeaveSync ( ) {
    HRESULT _hr = raw_LeaveSync();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IRemoteManager wrapper method implementations
//

#pragma implementation_key(349)
inline VARIANT_BOOL IRemoteManager::GetConnected ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Connected(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(350)
inline long IRemoteManager::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(351)
inline IUnknownPtr IRemoteManager::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(352)
inline IMeasUnitPtr IRemoteManager::GetItem ( long Index ) {
    struct IMeasUnit * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMeasUnitPtr(_result, false);
}

//
// interface IVCProperty wrapper method implementations
//

#pragma implementation_key(353)
inline _bstr_t IVCProperty::GetId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(354)
inline _bstr_t IVCProperty::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(355)
inline void IVCProperty::PutText ( _bstr_t Value ) {
    HRESULT _hr = put_Text(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(356)
inline _bstr_t IVCProperty::GetRightText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RightText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(357)
inline void IVCProperty::PutRightText ( _bstr_t Value ) {
    HRESULT _hr = put_RightText(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(358)
inline _bstr_t IVCProperty::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(359)
inline void IVCProperty::PutDescription ( _bstr_t Value ) {
    HRESULT _hr = put_Description(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(360)
inline VARIANT_BOOL IVCProperty::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(361)
inline void IVCProperty::PutVisible ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Visible(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(362)
inline VARIANT_BOOL IVCProperty::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(363)
inline void IVCProperty::PutEnabled ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Enabled(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(364)
inline long IVCProperty::GetIndent ( ) {
    long _result = 0;
    HRESULT _hr = get_Indent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(365)
inline void IVCProperty::PutIndent ( long Value ) {
    HRESULT _hr = put_Indent(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(366)
inline HRESULT IVCProperty::AddButton ( _bstr_t Hint, _bstr_t IconName ) {
    HRESULT _hr = raw_AddButton(Hint, IconName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(367)
inline VARIANT_BOOL IVCProperty::GetAllowUnified ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AllowUnified(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(368)
inline void IVCProperty::PutAllowUnified ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_AllowUnified(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(369)
inline long IVCProperty::GetDefaultButtonIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_DefaultButtonIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(370)
inline void IVCProperty::PutDefaultButtonIndex ( long Value ) {
    HRESULT _hr = put_DefaultButtonIndex(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IVCIntegerProperty wrapper method implementations
//

#pragma implementation_key(371)
inline long IVCIntegerProperty::GetValue ( ) {
    long _result = 0;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(372)
inline void IVCIntegerProperty::PutValue ( long Value ) {
    HRESULT _hr = put_Value(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(373)
inline long IVCIntegerProperty::GetMinValue ( ) {
    long _result = 0;
    HRESULT _hr = get_MinValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(374)
inline void IVCIntegerProperty::PutMinValue ( long Value ) {
    HRESULT _hr = put_MinValue(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(375)
inline long IVCIntegerProperty::GetMaxValue ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(376)
inline void IVCIntegerProperty::PutMaxValue ( long Value ) {
    HRESULT _hr = put_MaxValue(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IVCColorProperty wrapper method implementations
//

#pragma implementation_key(377)
inline long IVCColorProperty::GetColor ( ) {
    long _result = 0;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(378)
inline void IVCColorProperty::PutColor ( long Value ) {
    HRESULT _hr = put_Color(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IVCFloatProperty wrapper method implementations
//

#pragma implementation_key(379)
inline double IVCFloatProperty::GetValue ( ) {
    double _result = 0;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(380)
inline void IVCFloatProperty::PutValue ( double Value ) {
    HRESULT _hr = put_Value(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(381)
inline double IVCFloatProperty::GetMinValue ( ) {
    double _result = 0;
    HRESULT _hr = get_MinValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(382)
inline void IVCFloatProperty::PutMinValue ( double Value ) {
    HRESULT _hr = put_MinValue(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(383)
inline double IVCFloatProperty::GetMaxValue ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(384)
inline void IVCFloatProperty::PutMaxValue ( double Value ) {
    HRESULT _hr = put_MaxValue(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IVCTextProperty wrapper method implementations
//

#pragma implementation_key(385)
inline _bstr_t IVCTextProperty::GetValue ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(386)
inline void IVCTextProperty::PutValue ( _bstr_t Value ) {
    HRESULT _hr = put_Value(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IVCSelectProperty wrapper method implementations
//

#pragma implementation_key(387)
inline long IVCSelectProperty::GetItemIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_ItemIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(388)
inline void IVCSelectProperty::PutItemIndex ( long Value ) {
    HRESULT _hr = put_ItemIndex(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(389)
inline long IVCSelectProperty::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(390)
inline HRESULT IVCSelectProperty::Add ( _bstr_t Item ) {
    HRESULT _hr = raw_Add(Item);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(391)
inline HRESULT IVCSelectProperty::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(392)
inline _bstr_t IVCSelectProperty::Item ( long Index ) {
    BSTR _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IVCCheckBoxProperty wrapper method implementations
//

#pragma implementation_key(393)
inline VARIANT_BOOL IVCCheckBoxProperty::GetChecked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Checked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(394)
inline void IVCCheckBoxProperty::PutChecked ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Checked(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAcqLoop wrapper method implementations
//

#pragma implementation_key(395)
inline VARIANT_BOOL IAcqLoop::GetMaxUpdateRateMode ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MaxUpdateRateMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(396)
inline void IAcqLoop::PutMaxUpdateRateMode ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_MaxUpdateRateMode(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IVCSearchProperty wrapper method implementations
//

#pragma implementation_key(397)
inline long IVCSearchProperty::GetItemIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_ItemIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(398)
inline void IVCSearchProperty::PutItemIndex ( long Value ) {
    HRESULT _hr = put_ItemIndex(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(399)
inline long IVCSearchProperty::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(400)
inline HRESULT IVCSearchProperty::Add ( _bstr_t Item ) {
    HRESULT _hr = raw_Add(Item);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(401)
inline HRESULT IVCSearchProperty::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(402)
inline _bstr_t IVCSearchProperty::Item ( long Index ) {
    BSTR _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IVCPropertiesGroup wrapper method implementations
//

#pragma implementation_key(403)
inline _bstr_t IVCPropertiesGroup::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(404)
inline void IVCPropertiesGroup::PutName ( _bstr_t Value ) {
    HRESULT _hr = put_Name(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(405)
inline IVCIntegerPropertyPtr IVCPropertiesGroup::AddIntegerProperty ( _bstr_t PropertyID, _bstr_t Name ) {
    struct IVCIntegerProperty * _result = 0;
    HRESULT _hr = raw_AddIntegerProperty(PropertyID, Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVCIntegerPropertyPtr(_result, false);
}

#pragma implementation_key(406)
inline IVCPropertyPtr IVCPropertiesGroup::FindProperty ( _bstr_t PropertyID ) {
    struct IVCProperty * _result = 0;
    HRESULT _hr = raw_FindProperty(PropertyID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVCPropertyPtr(_result, false);
}

#pragma implementation_key(407)
inline _bstr_t IVCPropertiesGroup::GetId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(408)
inline IVCColorPropertyPtr IVCPropertiesGroup::AddColorProperty ( _bstr_t PropertyID, _bstr_t Name ) {
    struct IVCColorProperty * _result = 0;
    HRESULT _hr = raw_AddColorProperty(PropertyID, Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVCColorPropertyPtr(_result, false);
}

#pragma implementation_key(409)
inline IVCFloatPropertyPtr IVCPropertiesGroup::AddFloatProperty ( _bstr_t PropertyID, _bstr_t Name ) {
    struct IVCFloatProperty * _result = 0;
    HRESULT _hr = raw_AddFloatProperty(PropertyID, Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVCFloatPropertyPtr(_result, false);
}

#pragma implementation_key(410)
inline IVCTextPropertyPtr IVCPropertiesGroup::AddTextProperty ( _bstr_t PropertyID, _bstr_t Name ) {
    struct IVCTextProperty * _result = 0;
    HRESULT _hr = raw_AddTextProperty(PropertyID, Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVCTextPropertyPtr(_result, false);
}

#pragma implementation_key(411)
inline IVCSelectPropertyPtr IVCPropertiesGroup::AddSelectProperty ( _bstr_t PropertyID, _bstr_t Name ) {
    struct IVCSelectProperty * _result = 0;
    HRESULT _hr = raw_AddSelectProperty(PropertyID, Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVCSelectPropertyPtr(_result, false);
}

#pragma implementation_key(412)
inline IVCCheckBoxPropertyPtr IVCPropertiesGroup::AddCheckBoxProperty ( _bstr_t PropertyID, _bstr_t Name ) {
    struct IVCCheckBoxProperty * _result = 0;
    HRESULT _hr = raw_AddCheckBoxProperty(PropertyID, Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVCCheckBoxPropertyPtr(_result, false);
}

#pragma implementation_key(413)
inline IVCPropertyPtr IVCPropertiesGroup::AddLabelProperty ( _bstr_t PropertyID, _bstr_t Name ) {
    struct IVCProperty * _result = 0;
    HRESULT _hr = raw_AddLabelProperty(PropertyID, Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVCPropertyPtr(_result, false);
}

#pragma implementation_key(414)
inline VARIANT_BOOL IVCPropertiesGroup::GetExpanded ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Expanded(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(415)
inline void IVCPropertiesGroup::PutExpanded ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Expanded(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(416)
inline VARIANT_BOOL IVCPropertiesGroup::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(417)
inline void IVCPropertiesGroup::PutVisible ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Visible(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(418)
inline IVCSearchPropertyPtr IVCPropertiesGroup::AddSearchProperty ( _bstr_t PropertyID, _bstr_t Name ) {
    struct IVCSearchProperty * _result = 0;
    HRESULT _hr = raw_AddSearchProperty(PropertyID, Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVCSearchPropertyPtr(_result, false);
}

#pragma implementation_key(419)
inline long IVCPropertiesGroup::GetMinPropertyTextWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_MinPropertyTextWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(420)
inline void IVCPropertiesGroup::PutMinPropertyTextWidth ( long Value ) {
    HRESULT _hr = put_MinPropertyTextWidth(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IVCProperties wrapper method implementations
//

#pragma implementation_key(421)
inline IVCPropertiesGroupPtr IVCProperties::FindGroup ( _bstr_t GroupID ) {
    struct IVCPropertiesGroup * _result = 0;
    HRESULT _hr = raw_FindGroup(GroupID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVCPropertiesGroupPtr(_result, false);
}

#pragma implementation_key(422)
inline IVCPropertyPtr IVCProperties::FindProperty ( _bstr_t GroupID, _bstr_t PropertyID ) {
    struct IVCProperty * _result = 0;
    HRESULT _hr = raw_FindProperty(GroupID, PropertyID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVCPropertyPtr(_result, false);
}

#pragma implementation_key(423)
inline IVCPropertiesGroupPtr IVCProperties::AddOrFindGroup ( _bstr_t GroupID ) {
    struct IVCPropertiesGroup * _result = 0;
    HRESULT _hr = raw_AddOrFindGroup(GroupID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVCPropertiesGroupPtr(_result, false);
}

//
// interface IResamplerChannel wrapper method implementations
//

#pragma implementation_key(424)
inline HRESULT IResamplerChannel::SetInterpolate ( long InterpolationType ) {
    HRESULT _hr = raw_SetInterpolate(InterpolationType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(425)
inline _variant_t IResamplerChannel::GetTimesBuffer ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetTimesBuffer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(426)
inline _variant_t IResamplerChannel::GetDoubleValuesBuffer ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetDoubleValuesBuffer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(427)
inline _variant_t IResamplerChannel::GetBinaryPointersBuffer ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetBinaryPointersBuffer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(428)
inline _variant_t IResamplerChannel::GetBinarySizesBuffer ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetBinarySizesBuffer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(429)
inline _variant_t IResamplerChannel::GetDirectDataBuffer ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetDirectDataBuffer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface IRTModule wrapper method implementations
//

#pragma implementation_key(430)
inline IUnknownPtr IRTModule::GetDataModule ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_DataModule(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(431)
inline _bstr_t IRTModule::GetModuleId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ModuleId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IRTCore wrapper method implementations
//

#pragma implementation_key(432)
inline IUnknownPtr IRTCore::GetData ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_Data(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IReport wrapper method implementations
//

#pragma implementation_key(433)
inline HRESULT IReport::OpenWidgetInCurrentWordDocument ( _bstr_t WidgetID ) {
    HRESULT _hr = raw_OpenWidgetInCurrentWordDocument(WidgetID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(434)
inline HRESULT IReport::SetActiveDocument ( _bstr_t DocumentFilePath ) {
    HRESULT _hr = raw_SetActiveDocument(DocumentFilePath);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(435)
inline HRESULT IReport::OnWordShutdown ( ) {
    HRESULT _hr = raw_OnWordShutdown();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(436)
inline _bstr_t IReport::GetActiveDocument ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetActiveDocument(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(437)
inline HRESULT IReport::LinkDewesoftToWord ( _bstr_t DocumentName ) {
    HRESULT _hr = raw_LinkDewesoftToWord(DocumentName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(438)
inline HRESULT IReport::UpdateSelectedWidget ( ) {
    HRESULT _hr = raw_UpdateSelectedWidget();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(439)
inline VARIANT_BOOL IReport::GetIsInReportingMode ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsInReportingMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IGenericBitmap wrapper method implementations
//

#pragma implementation_key(440)
inline long IGenericBitmap::AddReference ( ) {
    long _result = 0;
    HRESULT _hr = raw_AddReference(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(441)
inline long IGenericBitmap::ReleaseReference ( ) {
    long _result = 0;
    HRESULT _hr = raw_ReleaseReference(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(442)
inline HRESULT IGenericBitmap::Resize ( long W, long H ) {
    HRESULT _hr = raw_Resize(W, H);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(443)
inline HRESULT IGenericBitmap::SetData ( __int64 Data ) {
    HRESULT _hr = raw_SetData(Data);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(444)
inline long IGenericBitmap::GetWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(445)
inline long IGenericBitmap::GetHeight ( ) {
    long _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(446)
inline long IGenericBitmap::GetBitDepth ( ) {
    long _result = 0;
    HRESULT _hr = get_BitDepth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(447)
inline long IGenericBitmap::GetScanLineSize ( ) {
    long _result = 0;
    HRESULT _hr = get_ScanLineSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(448)
inline __int64 IGenericBitmap::GetScanLine ( long I ) {
    __int64 _result = 0;
    HRESULT _hr = raw_GetScanLine(I, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(449)
inline long IGenericBitmap::GetReferenceCount ( ) {
    long _result = 0;
    HRESULT _hr = get_ReferenceCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IGDIBitmap wrapper method implementations
//

#pragma implementation_key(450)
inline __int64 IGDIBitmap::GetDC ( ) {
    __int64 _result = 0;
    HRESULT _hr = get_DC(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IStoreEngine wrapper method implementations
//

#pragma implementation_key(451)
inline VARIANT_BOOL IStoreEngine::GetStoring ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Storing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(452)
inline long IStoreEngine::GetStoreMode ( ) {
    long _result = 0;
    HRESULT _hr = get_StoreMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(453)
inline VARIANT_BOOL IStoreEngine::GetIsTriggering ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsTriggering(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(454)
inline unsigned __int64 IStoreEngine::GetFileSize ( ) {
    unsigned __int64 _result = 0;
    HRESULT _hr = get_FileSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(455)
inline HRESULT IStoreEngine::AddNewEvent ( enum EventType Type_, const _variant_t & Data ) {
    HRESULT _hr = raw_AddNewEvent(Type_, Data);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(456)
inline _bstr_t IStoreEngine::GetFileName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FileName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(457)
inline double IStoreEngine::GetTrackingOffset ( ) {
    double _result = 0;
    HRESULT _hr = get_TrackingOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(458)
inline HRESULT IStoreEngine::StartStoreTimeChanged ( ) {
    HRESULT _hr = raw_StartStoreTimeChanged();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(459)
inline VARIANT_BOOL IStoreEngine::GetPaused ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Paused(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(460)
inline VARIANT_BOOL IStoreEngine::GetAllowIBSkipping ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AllowIBSkipping(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(461)
inline void IStoreEngine::PutAllowIBSkipping ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_AllowIBSkipping(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(462)
inline HRESULT IStoreEngine::StartNewMultifile ( ) {
    HRESULT _hr = raw_StartNewMultifile();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(463)
inline HRESULT IStoreEngine::AddNewEventWithTime ( enum EventType Type_, const _variant_t & Data, double Time ) {
    HRESULT _hr = raw_AddNewEventWithTime(Type_, Data, Time);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAOChannel wrapper method implementations
//

#pragma implementation_key(464)
inline enum AOWaveForm IAOChannel::GetWaveForm ( ) {
    enum AOWaveForm _result;
    HRESULT _hr = get_WaveForm(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(465)
inline void IAOChannel::PutWaveForm ( enum AOWaveForm Value ) {
    HRESULT _hr = put_WaveForm(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(466)
inline float IAOChannel::GetAmpl ( ) {
    float _result = 0;
    HRESULT _hr = get_Ampl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(467)
inline void IAOChannel::PutAmpl ( float Value ) {
    HRESULT _hr = put_Ampl(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(468)
inline float IAOChannel::GetOffset ( ) {
    float _result = 0;
    HRESULT _hr = get_Offset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(469)
inline void IAOChannel::PutOffset ( float Value ) {
    HRESULT _hr = put_Offset(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(470)
inline float IAOChannel::GetPhase ( ) {
    float _result = 0;
    HRESULT _hr = get_Phase(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(471)
inline void IAOChannel::PutPhase ( float Value ) {
    HRESULT _hr = put_Phase(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(472)
inline long IAOChannel::GetFilterType ( ) {
    long _result = 0;
    HRESULT _hr = get_FilterType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(473)
inline void IAOChannel::PutFilterType ( long Value ) {
    HRESULT _hr = put_FilterType(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(474)
inline long IAOChannel::GetFilterProtoType ( ) {
    long _result = 0;
    HRESULT _hr = get_FilterProtoType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(475)
inline void IAOChannel::PutFilterProtoType ( long Value ) {
    HRESULT _hr = put_FilterProtoType(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(476)
inline long IAOChannel::GetFilterOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_FilterOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(477)
inline void IAOChannel::PutFilterOrder ( long Value ) {
    HRESULT _hr = put_FilterOrder(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(478)
inline float IAOChannel::GetFilterFreq2 ( ) {
    float _result = 0;
    HRESULT _hr = get_FilterFreq2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(479)
inline void IAOChannel::PutFilterFreq2 ( float Value ) {
    HRESULT _hr = put_FilterFreq2(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(480)
inline float IAOChannel::GetFilterFreq1 ( ) {
    float _result = 0;
    HRESULT _hr = get_FilterFreq1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(481)
inline void IAOChannel::PutFilterFreq1 ( float Value ) {
    HRESULT _hr = put_FilterFreq1(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(482)
inline long IAOChannel::GetRange ( ) {
    long _result = 0;
    HRESULT _hr = get_Range(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(483)
inline void IAOChannel::PutRange ( long Value ) {
    HRESULT _hr = put_Range(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IPlugin4 wrapper method implementations
//

#pragma implementation_key(484)
inline HRESULT IPlugin4::OnEvent ( enum EventIDs EventID, const _variant_t & InParam, VARIANT * OutParam ) {
    HRESULT _hr = raw_OnEvent(EventID, InParam, OutParam);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IPowerModule wrapper method implementations
//

#pragma implementation_key(485)
inline HRESULT IPowerModule::LoadFromXML ( enum XMLType AType, const _variant_t & XML ) {
    HRESULT _hr = raw_LoadFromXML(AType, XML);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(486)
inline HRESULT IPowerModule::SaveToXML ( enum XMLType AType, VARIANT * XML ) {
    HRESULT _hr = raw_SaveToXML(AType, XML);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(487)
inline HRESULT IPowerModule::GetFFT ( long ValueType, long Phase, VARIANT * Data ) {
    HRESULT _hr = raw_GetFFT(ValueType, Phase, Data);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(488)
inline float IPowerModule::GetFFTSampleRate ( ) {
    float _result = 0;
    HRESULT _hr = get_FFTSampleRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(489)
inline long IPowerModule::GetFFTBlockSize ( ) {
    long _result = 0;
    HRESULT _hr = get_FFTBlockSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(490)
inline long IPowerModule::GetModuleIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_ModuleIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(491)
inline HRESULT IPowerModule::SaveToXML1 ( long AType, VARIANT * XML ) {
    HRESULT _hr = raw_SaveToXML1(AType, XML);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(492)
inline HRESULT IPowerModule::LoadFromXML1 ( long AType, const _variant_t & XML ) {
    HRESULT _hr = raw_LoadFromXML1(AType, XML);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(493)
inline _variant_t IPowerModule::GetVectorScopeData ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetVectorScopeData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface IPowerModules wrapper method implementations
//

#pragma implementation_key(494)
inline long IPowerModules::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(495)
inline IUnknownPtr IPowerModules::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(496)
inline IPowerModulePtr IPowerModules::GetItem ( long Index ) {
    struct IPowerModule * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPowerModulePtr(_result, false);
}

#pragma implementation_key(497)
inline IPowerModulePtr IPowerModules::Add ( ) {
    struct IPowerModule * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPowerModulePtr(_result, false);
}

#pragma implementation_key(498)
inline HRESULT IPowerModules::Remove ( long Ind ) {
    HRESULT _hr = raw_Remove(Ind);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ICustomExport3 wrapper method implementations
//

#pragma implementation_key(499)
inline HRESULT ICustomExport3::OnEvent ( enum CustomExpEventIDs EventIDs, const _variant_t & InParam, VARIANT * OutParam ) {
    HRESULT _result = 0;
    HRESULT _hr = raw_OnEvent(EventIDs, InParam, OutParam, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ISetupMessages wrapper method implementations
//

#pragma implementation_key(500)
inline HRESULT ISetupMessages::Add ( enum SetupMessageType MsgType, _bstr_t Header, _bstr_t Text ) {
    HRESULT _hr = raw_Add(MsgType, Header, Text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IDwXMLDocument wrapper method implementations
//

#pragma implementation_key(501)
inline IDwXMLNodePtr IDwXMLDocument::GetStartNode ( ) {
    struct IDwXMLNode * _result = 0;
    HRESULT _hr = raw_GetStartNode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDwXMLNodePtr(_result, false);
}

#pragma implementation_key(502)
inline HRESULT IDwXMLDocument::SetStartNode ( struct IDwXMLNode * Node ) {
    HRESULT _hr = raw_SetStartNode(Node);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(503)
inline IDwXMLNodePtr IDwXMLDocument::CreateNode ( _bstr_t NodeName, _bstr_t NodeValue ) {
    struct IDwXMLNode * _result = 0;
    HRESULT _hr = raw_CreateNode(NodeName, NodeValue, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDwXMLNodePtr(_result, false);
}

#pragma implementation_key(504)
inline HRESULT IDwXMLDocument::WriteInteger ( struct IDwXMLNode * Node, _bstr_t Name, long Value, long Default ) {
    HRESULT _hr = raw_WriteInteger(Node, Name, Value, Default);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(505)
inline VARIANT_BOOL IDwXMLDocument::GetWriteDefault ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_WriteDefault(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(506)
inline void IDwXMLDocument::PutWriteDefault ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_WriteDefault(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(507)
inline VARIANT_BOOL IDwXMLDocument::GetSearchForExistingNodes ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SearchForExistingNodes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(508)
inline void IDwXMLDocument::PutSearchForExistingNodes ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_SearchForExistingNodes(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(509)
inline HRESULT IDwXMLDocument::ReadInteger ( struct IDwXMLNode * Node, _bstr_t Name, long * Value, long Default ) {
    HRESULT _hr = raw_ReadInteger(Node, Name, Value, Default);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(510)
inline HRESULT IDwXMLDocument::WriteString ( struct IDwXMLNode * Node, _bstr_t Name, _bstr_t Value, _bstr_t Default ) {
    HRESULT _hr = raw_WriteString(Node, Name, Value, Default);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(511)
inline HRESULT IDwXMLDocument::ReadString ( struct IDwXMLNode * Node, _bstr_t Name, BSTR * Value, _bstr_t Default ) {
    HRESULT _hr = raw_ReadString(Node, Name, Value, Default);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(512)
inline HRESULT IDwXMLDocument::UpdateString ( struct IDwXMLNode * Node, _bstr_t Name, BSTR * Value, _bstr_t Default ) {
    HRESULT _hr = raw_UpdateString(Node, Name, Value, Default);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(513)
inline enum UpdateType IDwXMLDocument::GetUpdateOperation ( ) {
    enum UpdateType _result;
    HRESULT _hr = get_UpdateOperation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(514)
inline void IDwXMLDocument::PutUpdateOperation ( enum UpdateType Value ) {
    HRESULT _hr = put_UpdateOperation(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(515)
inline HRESULT IDwXMLDocument::UpdateInteger ( struct IDwXMLNode * Node, _bstr_t Name, long * Value, long Default ) {
    HRESULT _hr = raw_UpdateInteger(Node, Name, Value, Default);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(516)
inline HRESULT IDwXMLDocument::ReadBoolean ( struct IDwXMLNode * Node, _bstr_t Name, VARIANT_BOOL * Value, VARIANT_BOOL Default ) {
    HRESULT _hr = raw_ReadBoolean(Node, Name, Value, Default);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(517)
inline HRESULT IDwXMLDocument::WriteBoolean ( struct IDwXMLNode * Node, _bstr_t Name, VARIANT_BOOL Value, VARIANT_BOOL Default ) {
    HRESULT _hr = raw_WriteBoolean(Node, Name, Value, Default);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(518)
inline HRESULT IDwXMLDocument::UpdateBoolean ( struct IDwXMLNode * Node, _bstr_t Name, VARIANT_BOOL * Value, VARIANT_BOOL Default ) {
    HRESULT _hr = raw_UpdateBoolean(Node, Name, Value, Default);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(519)
inline HRESULT IDwXMLDocument::ReadByte ( struct IDwXMLNode * Node, _bstr_t Name, unsigned char * Value, unsigned char Default ) {
    HRESULT _hr = raw_ReadByte(Node, Name, Value, Default);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(520)
inline HRESULT IDwXMLDocument::WriteByte ( struct IDwXMLNode * Node, _bstr_t Name, unsigned char Value, unsigned char Default ) {
    HRESULT _hr = raw_WriteByte(Node, Name, Value, Default);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(521)
inline HRESULT IDwXMLDocument::UpdateByte ( struct IDwXMLNode * Node, _bstr_t Name, unsigned char * Value, unsigned char Default ) {
    HRESULT _hr = raw_UpdateByte(Node, Name, Value, Default);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(522)
inline HRESULT IDwXMLDocument::ReadLongWord ( struct IDwXMLNode * Node, _bstr_t Name, unsigned long * Value, unsigned long Default ) {
    HRESULT _hr = raw_ReadLongWord(Node, Name, Value, Default);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(523)
inline HRESULT IDwXMLDocument::WriteLongWord ( struct IDwXMLNode * Node, _bstr_t Name, unsigned long Value, unsigned long Default ) {
    HRESULT _hr = raw_WriteLongWord(Node, Name, Value, Default);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(524)
inline HRESULT IDwXMLDocument::UpdateLongWord ( struct IDwXMLNode * Node, _bstr_t Name, unsigned long * Value, unsigned long Default ) {
    HRESULT _hr = raw_UpdateLongWord(Node, Name, Value, Default);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(525)
inline HRESULT IDwXMLDocument::ReadWord ( struct IDwXMLNode * Node, _bstr_t Name, unsigned short * Value, unsigned short Default ) {
    HRESULT _hr = raw_ReadWord(Node, Name, Value, Default);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(526)
inline HRESULT IDwXMLDocument::WriteWord ( struct IDwXMLNode * Node, _bstr_t Name, unsigned short Value, unsigned short Default ) {
    HRESULT _hr = raw_WriteWord(Node, Name, Value, Default);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(527)
inline HRESULT IDwXMLDocument::UpdateWord ( struct IDwXMLNode * Node, _bstr_t Name, unsigned short * Value, unsigned short Default ) {
    HRESULT _hr = raw_UpdateWord(Node, Name, Value, Default);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(528)
inline HRESULT IDwXMLDocument::ReadSmallInt ( struct IDwXMLNode * Node, _bstr_t Name, short * Value, short Default ) {
    HRESULT _hr = raw_ReadSmallInt(Node, Name, Value, Default);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(529)
inline HRESULT IDwXMLDocument::WriteSmallInt ( struct IDwXMLNode * Node, _bstr_t Name, short Value, short Default ) {
    HRESULT _hr = raw_WriteSmallInt(Node, Name, Value, Default);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(530)
inline HRESULT IDwXMLDocument::UpdateSmallInt ( struct IDwXMLNode * Node, _bstr_t Name, short * Value, short Default ) {
    HRESULT _hr = raw_UpdateSmallInt(Node, Name, Value, Default);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(531)
inline HRESULT IDwXMLDocument::ReadSingle ( struct IDwXMLNode * Node, _bstr_t Name, float * Value, float Default ) {
    HRESULT _hr = raw_ReadSingle(Node, Name, Value, Default);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(532)
inline HRESULT IDwXMLDocument::WriteSingle ( struct IDwXMLNode * Node, _bstr_t Name, float Value, float Default ) {
    HRESULT _hr = raw_WriteSingle(Node, Name, Value, Default);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(533)
inline HRESULT IDwXMLDocument::UpdateSingle ( struct IDwXMLNode * Node, _bstr_t Name, float * Value, float Default ) {
    HRESULT _hr = raw_UpdateSingle(Node, Name, Value, Default);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(534)
inline HRESULT IDwXMLDocument::ReadDouble ( struct IDwXMLNode * Node, _bstr_t Name, double * Value, double Default ) {
    HRESULT _hr = raw_ReadDouble(Node, Name, Value, Default);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(535)
inline HRESULT IDwXMLDocument::WriteDouble ( struct IDwXMLNode * Node, _bstr_t Name, double Value, double Default ) {
    HRESULT _hr = raw_WriteDouble(Node, Name, Value, Default);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(536)
inline HRESULT IDwXMLDocument::UpdateDouble ( struct IDwXMLNode * Node, _bstr_t Name, double * Value, double Default ) {
    HRESULT _hr = raw_UpdateDouble(Node, Name, Value, Default);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(537)
inline HRESULT IDwXMLDocument::ReadByteArray ( struct IDwXMLNode * Node, _bstr_t Name, VARIANT * Value ) {
    HRESULT _hr = raw_ReadByteArray(Node, Name, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(538)
inline HRESULT IDwXMLDocument::WriteByteArray ( struct IDwXMLNode * Node, _bstr_t Name, const _variant_t & Value ) {
    HRESULT _hr = raw_WriteByteArray(Node, Name, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IProperties wrapper method implementations
//

#pragma implementation_key(539)
inline long IProperties::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(540)
inline IUnknownPtr IProperties::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(541)
inline _variant_t IProperties::GetItem ( const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(542)
inline void IProperties::PutItem ( const _variant_t & Index, const _variant_t & Value ) {
    HRESULT _hr = put_Item(Index, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(543)
inline HRESULT IProperties::Add ( _bstr_t Name, const _variant_t & Value ) {
    HRESULT _hr = raw_Add(Name, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(544)
inline IDwXMLDocumentPtr IProperties::GetXmlItem ( _bstr_t Name ) {
    struct IDwXMLDocument * _result = 0;
    HRESULT _hr = get_XmlItem(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDwXMLDocumentPtr(_result, false);
}

#pragma implementation_key(545)
inline IDwXMLDocumentPtr IProperties::AddXmlItem ( _bstr_t Name ) {
    struct IDwXMLDocument * _result = 0;
    HRESULT _hr = raw_AddXmlItem(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDwXMLDocumentPtr(_result, false);
}

//
// interface IInputGroup wrapper method implementations
//

#pragma implementation_key(546)
inline _variant_t IInputGroup::GetIndex ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(547)
inline _bstr_t IInputGroup::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(548)
inline void IInputGroup::PutName ( _bstr_t Value ) {
    HRESULT _hr = put_Name(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(549)
inline _bstr_t IInputGroup::GetGuid ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Guid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(550)
inline void IInputGroup::PutGuid ( _bstr_t Value ) {
    HRESULT _hr = put_Guid(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(551)
inline IPropertiesPtr IInputGroup::GetProperties ( ) {
    struct IProperties * _result = 0;
    HRESULT _hr = get_Properties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPropertiesPtr(_result, false);
}

//
// interface IInputGroups wrapper method implementations
//

#pragma implementation_key(552)
inline long IInputGroups::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(553)
inline IUnknownPtr IInputGroups::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(554)
inline IInputGroupPtr IInputGroups::GetItem ( long Index ) {
    struct IInputGroup * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IInputGroupPtr(_result, false);
}

//
// interface IXMLHelper wrapper method implementations
//

#pragma implementation_key(555)
inline IDwXMLDocumentPtr IXMLHelper::GetCustomIDwXMLDocument ( VARIANT_BOOL Write ) {
    struct IDwXMLDocument * _result = 0;
    HRESULT _hr = raw_GetCustomIDwXMLDocument(Write, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDwXMLDocumentPtr(_result, false);
}

//
// interface IPermission wrapper method implementations
//

#pragma implementation_key(556)
inline _bstr_t IPermission::GetUniqueID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UniqueID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(557)
inline _bstr_t IPermission::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(558)
inline void IPermission::PutName ( _bstr_t Value ) {
    HRESULT _hr = put_Name(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(559)
inline enum TPermissionType IPermission::GetPermissionType ( ) {
    enum TPermissionType _result;
    HRESULT _hr = get_PermissionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(560)
inline void IPermission::PutPermissionType ( enum TPermissionType Value ) {
    HRESULT _hr = put_PermissionType(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(561)
inline IPermissionPtr IPermission::GetOrCreatePermission ( _bstr_t UniqueID ) {
    struct IPermission * _result = 0;
    HRESULT _hr = raw_GetOrCreatePermission(UniqueID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPermissionPtr(_result, false);
}

//
// interface ISynchronization wrapper method implementations
//

#pragma implementation_key(562)
inline HRESULT ISynchronization::AddSourceMode ( enum TSyncMode SyncMode ) {
    HRESULT _hr = raw_AddSourceMode(SyncMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(563)
inline HRESULT ISynchronization::RemoveSourceMode ( enum TSyncMode SyncMode ) {
    HRESULT _hr = raw_RemoveSourceMode(SyncMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(564)
inline HRESULT ISynchronization::AddSlaveMode ( enum TSyncMode SyncMode ) {
    HRESULT _hr = raw_AddSlaveMode(SyncMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(565)
inline HRESULT ISynchronization::RemoveSlaveMode ( enum TSyncMode SyncMode ) {
    HRESULT _hr = raw_RemoveSlaveMode(SyncMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(566)
inline HRESULT ISynchronization::CustomSourceModeAdd ( _bstr_t CustomMode ) {
    HRESULT _hr = raw_CustomSourceModeAdd(CustomMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(567)
inline long ISynchronization::CustomSourceModeCount ( ) {
    long _result = 0;
    HRESULT _hr = raw_CustomSourceModeCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(568)
inline _bstr_t ISynchronization::CustomSourceModeItem ( long I ) {
    BSTR _result = 0;
    HRESULT _hr = raw_CustomSourceModeItem(I, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(569)
inline HRESULT ISynchronization::CustomSlaveModeAdd ( _bstr_t SyncMode ) {
    HRESULT _hr = raw_CustomSlaveModeAdd(SyncMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(570)
inline long ISynchronization::CustomSlaveModeCount ( ) {
    long _result = 0;
    HRESULT _hr = raw_CustomSlaveModeCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(571)
inline _bstr_t ISynchronization::CustomSlaveModeItem ( long I ) {
    BSTR _result = 0;
    HRESULT _hr = raw_CustomSlaveModeItem(I, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(572)
inline VARIANT_BOOL ISynchronization::GetIsClockSource ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsClockSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(573)
inline void ISynchronization::PutIsClockSource ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_IsClockSource(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(574)
inline enum TSyncMode ISynchronization::GetCurrentMode ( ) {
    enum TSyncMode _result;
    HRESULT _hr = get_CurrentMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(575)
inline void ISynchronization::PutCurrentMode ( enum TSyncMode Value ) {
    HRESULT _hr = put_CurrentMode(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(576)
inline int ISynchronization::GetCurrentCustomModeValue ( ) {
    int _result = 0;
    HRESULT _hr = get_CurrentCustomModeValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(577)
inline void ISynchronization::PutCurrentCustomModeValue ( int Value ) {
    HRESULT _hr = put_CurrentCustomModeValue(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(578)
inline int ISynchronization::GetCurrentCustomModeIdx ( ) {
    int _result = 0;
    HRESULT _hr = get_CurrentCustomModeIdx(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(579)
inline void ISynchronization::PutCurrentCustomModeIdx ( int Value ) {
    HRESULT _hr = put_CurrentCustomModeIdx(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(580)
inline VARIANT_BOOL ISynchronization::GetSupportsAutomaticMode ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SupportsAutomaticMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(581)
inline void ISynchronization::PutSupportsAutomaticMode ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_SupportsAutomaticMode(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(582)
inline VARIANT_BOOL ISynchronization::GetAutomaticMode ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutomaticMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(583)
inline void ISynchronization::PutAutomaticMode ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_AutomaticMode(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IDeviceNode wrapper method implementations
//

#pragma implementation_key(584)
inline _bstr_t IDeviceNode::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(585)
inline void IDeviceNode::PutName ( _bstr_t Value ) {
    HRESULT _hr = put_Name(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(586)
inline IDeviceNodePtr IDeviceNode::AddSubDevice ( _bstr_t Name ) {
    struct IDeviceNode * _result = 0;
    HRESULT _hr = raw_AddSubDevice(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDeviceNodePtr(_result, false);
}

#pragma implementation_key(587)
inline ISynchronizationPtr IDeviceNode::CreateSynchronization ( ) {
    struct ISynchronization * _result = 0;
    HRESULT _hr = raw_CreateSynchronization(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISynchronizationPtr(_result, false);
}

#pragma implementation_key(588)
inline HRESULT IDeviceNode::SetSynchronization ( struct ISynchronization * Sync ) {
    HRESULT _hr = raw_SetSynchronization(Sync);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ICanvasPen wrapper method implementations
//

#pragma implementation_key(589)
inline long ICanvasPen::GetColor ( ) {
    long _result = 0;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(590)
inline void ICanvasPen::PutColor ( long Value ) {
    HRESULT _hr = put_Color(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(591)
inline long ICanvasPen::GetWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(592)
inline void ICanvasPen::PutWidth ( long Value ) {
    HRESULT _hr = put_Width(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(593)
inline enum CanvasPenStyle ICanvasPen::GetStyle ( ) {
    enum CanvasPenStyle _result;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(594)
inline void ICanvasPen::PutStyle ( enum CanvasPenStyle Value ) {
    HRESULT _hr = put_Style(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(595)
inline enum CanvasPenMode ICanvasPen::GetMode ( ) {
    enum CanvasPenMode _result;
    HRESULT _hr = get_Mode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(596)
inline void ICanvasPen::PutMode ( enum CanvasPenMode Value ) {
    HRESULT _hr = put_Mode(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ICanvasBrush wrapper method implementations
//

#pragma implementation_key(597)
inline long ICanvasBrush::GetColor ( ) {
    long _result = 0;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(598)
inline void ICanvasBrush::PutColor ( long Value ) {
    HRESULT _hr = put_Color(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(599)
inline enum CanvasBrushStyle ICanvasBrush::GetStyle ( ) {
    enum CanvasBrushStyle _result;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(600)
inline void ICanvasBrush::PutStyle ( enum CanvasBrushStyle Value ) {
    HRESULT _hr = put_Style(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ICanvasFont wrapper method implementations
//

#pragma implementation_key(601)
inline _bstr_t ICanvasFont::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(602)
inline void ICanvasFont::PutName ( _bstr_t Value ) {
    HRESULT _hr = put_Name(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(603)
inline long ICanvasFont::GetColor ( ) {
    long _result = 0;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(604)
inline void ICanvasFont::PutColor ( long Value ) {
    HRESULT _hr = put_Color(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(605)
inline long ICanvasFont::GetSize ( ) {
    long _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(606)
inline void ICanvasFont::PutSize ( long Value ) {
    HRESULT _hr = put_Size(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(607)
inline long ICanvasFont::GetHeight ( ) {
    long _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(608)
inline void ICanvasFont::PutHeight ( long Value ) {
    HRESULT _hr = put_Height(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(609)
inline long ICanvasFont::GetOrientation ( ) {
    long _result = 0;
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(610)
inline void ICanvasFont::PutOrientation ( long Value ) {
    HRESULT _hr = put_Orientation(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(611)
inline long ICanvasFont::GetAngle ( ) {
    long _result = 0;
    HRESULT _hr = get_Angle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(612)
inline void ICanvasFont::PutAngle ( long Value ) {
    HRESULT _hr = put_Angle(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(613)
inline long ICanvasFont::GetStyle ( ) {
    long _result = 0;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(614)
inline void ICanvasFont::PutStyle ( long Value ) {
    HRESULT _hr = put_Style(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(615)
inline enum CanvasFontQuality ICanvasFont::GetQuality ( ) {
    enum CanvasFontQuality _result;
    HRESULT _hr = get_Quality(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(616)
inline void ICanvasFont::PutQuality ( enum CanvasFontQuality Value ) {
    HRESULT _hr = put_Quality(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ICanvas wrapper method implementations
//

#pragma implementation_key(617)
inline HRESULT ICanvas::LineTo ( long X, long Y ) {
    HRESULT _hr = raw_LineTo(X, Y);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(618)
inline HRESULT ICanvas::MoveTo ( long X, long Y ) {
    HRESULT _hr = raw_MoveTo(X, Y);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(619)
inline HRESULT ICanvas::CircleRadius ( long X, long Y, long R ) {
    HRESULT _hr = raw_CircleRadius(X, Y, R);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(620)
inline HRESULT ICanvas::Ellipse ( long X1, long Y1, long X2, long Y2 ) {
    HRESULT _hr = raw_Ellipse(X1, Y1, X2, Y2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(621)
inline HRESULT ICanvas::Rectangle ( long X1, long Y1, long X2, long Y2 ) {
    HRESULT _hr = raw_Rectangle(X1, Y1, X2, Y2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(622)
inline HRESULT ICanvas::TextOut ( long X, long Y, _bstr_t Text ) {
    HRESULT _hr = raw_TextOut(X, Y, Text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(623)
inline ICanvasBrushPtr ICanvas::GetBrush ( ) {
    struct ICanvasBrush * _result = 0;
    HRESULT _hr = get_Brush(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICanvasBrushPtr(_result, false);
}

#pragma implementation_key(624)
inline ICanvasPenPtr ICanvas::GetPen ( ) {
    struct ICanvasPen * _result = 0;
    HRESULT _hr = get_Pen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICanvasPenPtr(_result, false);
}

#pragma implementation_key(625)
inline ICanvasFontPtr ICanvas::GetFont ( ) {
    struct ICanvasFont * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICanvasFontPtr(_result, false);
}

#pragma implementation_key(626)
inline HRESULT ICanvas::Arc ( long X1, long Y1, long X2, long Y2, long X3, long Y3, long X4, long Y4 ) {
    HRESULT _hr = raw_Arc(X1, Y1, X2, Y2, X3, Y3, X4, Y4);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(627)
inline HRESULT ICanvas::FillRect ( long Left, long Top, long Right, long Bottom ) {
    HRESULT _hr = raw_FillRect(Left, Top, Right, Bottom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(628)
inline HRESULT ICanvas::FloodFill ( long X, long Y, long Color, enum CanvasFillStyle FillStyle ) {
    HRESULT _hr = raw_FloodFill(X, Y, Color, FillStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(629)
inline HRESULT ICanvas::Pie ( long X1, long Y1, long X2, long Y2, long X3, long Y3, long X4, long Y4 ) {
    HRESULT _hr = raw_Pie(X1, Y1, X2, Y2, X3, Y3, X4, Y4);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(630)
inline long ICanvas::TextWidth ( _bstr_t Text ) {
    long _result = 0;
    HRESULT _hr = raw_TextWidth(Text, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(631)
inline long ICanvas::TextHeight ( _bstr_t Text ) {
    long _result = 0;
    HRESULT _hr = raw_TextHeight(Text, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(632)
inline HRESULT ICanvas::TextRect ( long Left, long Top, long Right, long Bottom, _bstr_t Text, long TextFormat ) {
    HRESULT _hr = raw_TextRect(Left, Top, Right, Bottom, Text, TextFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(633)
inline HRESULT ICanvas::Polygon ( VARIANT * Points, long Count ) {
    HRESULT _hr = raw_Polygon(Points, Count);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(634)
inline HRESULT ICanvas::Polyline ( VARIANT * Points, long Count ) {
    HRESULT _hr = raw_Polyline(Points, Count);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(635)
inline HRESULT ICanvas::SetClipRegion ( long Left, long Top, long Right, long Bottom ) {
    HRESULT _hr = raw_SetClipRegion(Left, Top, Right, Bottom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(636)
inline HRESULT ICanvas::ClearClipRegion ( ) {
    HRESULT _hr = raw_ClearClipRegion();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(637)
inline VARIANT_BOOL ICanvas::BitBlt ( long X, long Y, long Width, long Height, __int64 SrcDC, long XSrc, long YSrc ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_BitBlt(X, Y, Width, Height, SrcDC, XSrc, YSrc, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(638)
inline VARIANT_BOOL ICanvas::StretchBlt ( long DestX, long DestY, long DestW, long DestH, __int64 SrcDC, long SrcX, long SrcY, long SrcW, long SrcH ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_StretchBlt(DestX, DestY, DestW, DestH, SrcDC, SrcX, SrcY, SrcW, SrcH, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(639)
inline IGDIBitmapPtr ICanvas::CreateGDIBitmap ( long Width, long Height, long BitDepth ) {
    struct IGDIBitmap * _result = 0;
    HRESULT _hr = raw_CreateGDIBitmap(Width, Height, BitDepth, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGDIBitmapPtr(_result, false);
}

#pragma implementation_key(640)
inline HRESULT ICanvas::Draw ( long X, long Y, struct IGenericBitmap * Bmp ) {
    HRESULT _hr = raw_Draw(X, Y, Bmp);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IRTModuleLoader wrapper method implementations
//

#pragma implementation_key(641)
inline HRESULT IRTModuleLoader::AddDriver ( IUnknown * Driver ) {
    HRESULT _hr = raw_AddDriver(Driver);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(642)
inline IRTModulePtr IRTModuleLoader::LoadModule ( _bstr_t Name, long MinMajorVersion, long MinMinorVeresion, enum RTModuleLoadOptions LoadOptions ) {
    struct IRTModule * _result = 0;
    HRESULT _hr = raw_LoadModule(Name, MinMajorVersion, MinMinorVeresion, LoadOptions, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRTModulePtr(_result, false);
}

//
// interface IMarkerObject wrapper method implementations
//

#pragma implementation_key(643)
inline enum IMarkerValueType IMarkerObject::GetValueType ( ) {
    enum IMarkerValueType _result;
    HRESULT _hr = get_ValueType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(644)
inline void IMarkerObject::PutValueType ( enum IMarkerValueType Value ) {
    HRESULT _hr = put_ValueType(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(645)
inline _bstr_t IMarkerObject::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(646)
inline void IMarkerObject::PutName ( _bstr_t Value ) {
    HRESULT _hr = put_Name(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(647)
inline VARIANT_BOOL IMarkerObject::GetIsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(648)
inline long IMarkerObject::GetColor ( ) {
    long _result = 0;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(649)
inline void IMarkerObject::PutColor ( long Value ) {
    HRESULT _hr = put_Color(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(650)
inline VARIANT_BOOL IMarkerObject::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(651)
inline void IMarkerObject::PutVisible ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Visible(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(652)
inline _bstr_t IMarkerObject::GetValueUnit ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ValueUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(653)
inline void IMarkerObject::PutValueUnit ( _bstr_t Value ) {
    HRESULT _hr = put_ValueUnit(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(654)
inline HRESULT IMarkerObject::AddAxisType ( enum IMarkerValueType Value ) {
    HRESULT _hr = raw_AddAxisType(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IMarkerInput wrapper method implementations
//

#pragma implementation_key(655)
inline VARIANT_BOOL IMarkerInput::GetUsingChannelInput ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UsingChannelInput(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(656)
inline void IMarkerInput::PutUsingChannelInput ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_UsingChannelInput(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(657)
inline double IMarkerInput::GetValueEx ( ) {
    double _result = 0;
    HRESULT _hr = get_ValueEx(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(658)
inline void IMarkerInput::PutValueEx ( double Value ) {
    HRESULT _hr = put_ValueEx(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IPairedValueMarkerInput wrapper method implementations
//

#pragma implementation_key(659)
inline _variant_t IPairedValueMarkerInput::GetValues ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(660)
inline HRESULT IPairedValueMarkerInput::SetValues ( VARIANT * Values ) {
    HRESULT _hr = raw_SetValues(Values);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(661)
inline long IPairedValueMarkerInput::GetNumberOfPairs ( ) {
    long _result = 0;
    HRESULT _hr = get_NumberOfPairs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(662)
inline void IPairedValueMarkerInput::PutNumberOfPairs ( long Value ) {
    HRESULT _hr = put_NumberOfPairs(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISingleValueMarkerInput wrapper method implementations
//

#pragma implementation_key(663)
inline double ISingleValueMarkerInput::GetValue ( ) {
    double _result = 0;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(664)
inline void ISingleValueMarkerInput::PutValue ( double Value ) {
    HRESULT _hr = put_Value(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IMarkerObjectsList wrapper method implementations
//

#pragma implementation_key(665)
inline long IMarkerObjectsList::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(666)
inline IMarkerObjectPtr IMarkerObjectsList::GetItems ( long Index ) {
    struct IMarkerObject * _result = 0;
    HRESULT _hr = get_Items(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMarkerObjectPtr(_result, false);
}

#pragma implementation_key(667)
inline void IMarkerObjectsList::PutItems ( long Index, struct IMarkerObject * Value ) {
    HRESULT _hr = put_Items(Index, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(668)
inline HRESULT IMarkerObjectsList::Add ( struct IMarkerObject * Value ) {
    HRESULT _hr = raw_Add(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(669)
inline long IMarkerObjectsList::Remove ( struct IMarkerObject * Value ) {
    long _result = 0;
    HRESULT _hr = raw_Remove(Value, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(670)
inline HRESULT IMarkerObjectsList::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(671)
inline HRESULT IMarkerObjectsList::Insert ( long Index, struct IMarkerObject * Value ) {
    HRESULT _hr = raw_Insert(Index, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(672)
inline HRESULT IMarkerObjectsList::Delete ( long Index ) {
    HRESULT _hr = raw_Delete(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IRTCPropertyInfo wrapper method implementations
//

#pragma implementation_key(673)
inline _bstr_t IRTCPropertyInfo::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(674)
inline enum TRTCoreType IRTCPropertyInfo::GetType ( ) {
    enum TRTCoreType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IRTCPropertiesInfo wrapper method implementations
//

#pragma implementation_key(675)
inline long IRTCPropertiesInfo::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(676)
inline IRTCPropertyInfoPtr IRTCPropertiesInfo::GetItems ( long Index ) {
    struct IRTCPropertyInfo * _result = 0;
    HRESULT _hr = get_Items(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRTCPropertyInfoPtr(_result, false);
}

//
// interface IRTCModule wrapper method implementations
//

#pragma implementation_key(677)
inline VARIANT_BOOL IRTCModule::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(678)
inline void IRTCModule::PutEnabled ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Enabled(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(679)
inline _bstr_t IRTCModule::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(680)
inline _variant_t IRTCModule::GetProperty ( _bstr_t Query ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetProperty(Query, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(681)
inline VARIANT_BOOL IRTCModule::SetProperty ( _bstr_t Query, const _variant_t & Value ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetProperty(Query, Value, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(682)
inline _variant_t IRTCModule::ExecuteProperty ( _bstr_t Query, const _variant_t & Params ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ExecuteProperty(Query, Params, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(683)
inline _variant_t IRTCModule::GetDeviceProperty ( _bstr_t Query ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetDeviceProperty(Query, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(684)
inline VARIANT_BOOL IRTCModule::SetDeviceProperty ( _bstr_t Query, const _variant_t & Value ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetDeviceProperty(Query, Value, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(685)
inline _variant_t IRTCModule::ExecuteDeviceProperty ( _bstr_t Query, const _variant_t & Params ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ExecuteDeviceProperty(Query, Params, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(686)
inline IRTCPropertiesInfoPtr IRTCModule::GetPropertiesInfo ( _bstr_t Query ) {
    struct IRTCPropertiesInfo * _result = 0;
    HRESULT _hr = raw_GetPropertiesInfo(Query, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRTCPropertiesInfoPtr(_result, false);
}

#pragma implementation_key(687)
inline IRTCPropertiesInfoPtr IRTCModule::GetDevicePropertiesInfo ( _bstr_t Query ) {
    struct IRTCPropertiesInfo * _result = 0;
    HRESULT _hr = raw_GetDevicePropertiesInfo(Query, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRTCPropertiesInfoPtr(_result, false);
}

//
// interface IRTCModules wrapper method implementations
//

#pragma implementation_key(688)
inline long IRTCModules::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(689)
inline IRTCModulePtr IRTCModules::GetItems ( long Index ) {
    struct IRTCModule * _result = 0;
    HRESULT _hr = get_Items(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRTCModulePtr(_result, false);
}

//
// interface IRTCController wrapper method implementations
//

#pragma implementation_key(690)
inline VARIANT_BOOL IRTCController::ApplyChanges ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ApplyChanges(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(691)
inline HRESULT IRTCController::Start ( ) {
    HRESULT _hr = raw_Start();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(692)
inline HRESULT IRTCController::Stop ( ) {
    HRESULT _hr = raw_Stop();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(693)
inline IRTCModulesPtr IRTCController::GetModules ( ) {
    struct IRTCModules * _result = 0;
    HRESULT _hr = get_Modules(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRTCModulesPtr(_result, false);
}

#pragma implementation_key(694)
inline enum TRTCStatus IRTCController::GetStatus ( ) {
    enum TRTCStatus _result;
    HRESULT _hr = raw_GetStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(695)
inline HRESULT IRTCController::ReadDefaultValues ( ) {
    HRESULT _hr = raw_ReadDefaultValues();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(696)
inline VARIANT_BOOL IRTCController::IsConfigChanged ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsConfigChanged(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(697)
inline _bstr_t IRTCController::CheckConfiguration ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_CheckConfiguration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(698)
inline long IRTCController::GetScanCycleFrequency ( ) {
    long _result = 0;
    HRESULT _hr = get_ScanCycleFrequency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(699)
inline void IRTCController::PutScanCycleFrequency ( long Value ) {
    HRESULT _hr = put_ScanCycleFrequency(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IRTCControllers wrapper method implementations
//

#pragma implementation_key(700)
inline long IRTCControllers::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(701)
inline IRTCControllerPtr IRTCControllers::GetItems ( long Index ) {
    struct IRTCController * _result = 0;
    HRESULT _hr = get_Items(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRTCControllerPtr(_result, false);
}

#pragma implementation_key(702)
inline HRESULT IRTCControllers::Start ( ) {
    HRESULT _hr = raw_Start();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(703)
inline HRESULT IRTCControllers::Stop ( ) {
    HRESULT _hr = raw_Stop();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(704)
inline VARIANT_BOOL IRTCControllers::ApplyChanges ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ApplyChanges(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(705)
inline HRESULT IRTCControllers::ReadDefaultValues ( ) {
    HRESULT _hr = raw_ReadDefaultValues();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(706)
inline VARIANT_BOOL IRTCControllers::IsConfigChanged ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsConfigChanged(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(707)
inline _bstr_t IRTCControllers::CheckConfiguration ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_CheckConfiguration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IRTC wrapper method implementations
//

#pragma implementation_key(708)
inline IRTCControllersPtr IRTC::GetControllers ( ) {
    struct IRTCControllers * _result = 0;
    HRESULT _hr = get_Controllers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRTCControllersPtr(_result, false);
}

//
// interface ICANPort wrapper method implementations
//

#pragma implementation_key(709)
inline VARIANT_BOOL ICANPort::SendFrame ( VARIANT_BOOL Extended, long ArbId, struct T_CANFrame Data, long Size ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SendFrame(Extended, ArbId, Data, Size, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(710)
inline HRESULT ICANPort::EnableOutput ( VARIANT_BOOL Enable ) {
    HRESULT _hr = raw_EnableOutput(Enable);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(711)
inline long ICANPort::GetMessageCount ( ) {
    long _result = 0;
    HRESULT _hr = get_MessageCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(712)
inline VARIANT_BOOL ICANPort::ReadMessage ( double * TimeStamp, long * ArbId, long * DataLo, long * DataHi ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ReadMessage(TimeStamp, ArbId, DataLo, DataHi, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(713)
inline HRESULT ICANPort::StartRead ( ) {
    HRESULT _hr = raw_StartRead();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(714)
inline HRESULT ICANPort::EndRead ( ) {
    HRESULT _hr = raw_EndRead();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(715)
inline _variant_t ICANPort::GetBaudRateList ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetBaudRateList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(716)
inline HRESULT ICANPort::SetBaudRate ( long BaudRate ) {
    HRESULT _hr = raw_SetBaudRate(BaudRate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(717)
inline long ICANPort::GetBaudRate ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetBaudRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(718)
inline long ICANPort::GetTotalMsgCount ( ) {
    long _result = 0;
    HRESULT _hr = get_TotalMsgCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(719)
inline long ICANPort::GetTotalErrMsgCount ( ) {
    long _result = 0;
    HRESULT _hr = get_TotalErrMsgCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(720)
inline HRESULT ICANPort::Capture ( VARIANT_BOOL Status ) {
    HRESULT _hr = raw_Capture(Status);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(721)
inline VARIANT_BOOL ICANPort::GetUseListenOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseListenOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(722)
inline void ICANPort::PutUseListenOnly ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_UseListenOnly(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(723)
inline _bstr_t ICANPort::GetInterfaceName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_InterfaceName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface ICAN wrapper method implementations
//

#pragma implementation_key(724)
inline VARIANT_BOOL ICAN::GetSupportsOutput ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SupportsOutput(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(725)
inline long ICAN::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(726)
inline IUnknownPtr ICAN::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(727)
inline ICANPortPtr ICAN::GetItem ( long Index ) {
    struct ICANPort * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICANPortPtr(_result, false);
}

//
// interface IDaq wrapper method implementations
//

#pragma implementation_key(728)
inline _bstr_t IDaq::GetDeviceCode ( long Index ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetDeviceCode(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(729)
inline long IDaq::GetCardCount ( ) {
    long _result = 0;
    HRESULT _hr = get_CardCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(730)
inline long IDaq::GetDaqType ( ) {
    long _result = 0;
    HRESULT _hr = get_DaqType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(731)
inline VARIANT_BOOL IDaq::GetDataLost ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DataLost(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(732)
inline void IDaq::PutDataLost ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_DataLost(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(733)
inline struct DaqDeviceInfo IDaq::GetDeviceInfo ( long Index ) {
    struct DaqDeviceInfo _result;
    HRESULT _hr = raw_GetDeviceInfo(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(734)
inline long IDaq::SetDeviceCalDate ( long Index, _bstr_t CalDate, _bstr_t Pwd ) {
    long _result = 0;
    HRESULT _hr = raw_SetDeviceCalDate(Index, CalDate, Pwd, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(735)
inline long IDaq::GetDITrgLevel ( long PinNr, long * TrgLevel, long * ReTrgLevel, unsigned char * Coupling, unsigned char * SupportLevel ) {
    long _result = 0;
    HRESULT _hr = raw_GetDITrgLevel(PinNr, TrgLevel, ReTrgLevel, Coupling, SupportLevel, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(736)
inline long IDaq::SetDITrgLevel ( long PinNr, long TrgLevel, long ReTrgLevel, unsigned char Coupling ) {
    long _result = 0;
    HRESULT _hr = raw_SetDITrgLevel(PinNr, TrgLevel, ReTrgLevel, Coupling, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(737)
inline long IDaq::GetCNTTrgLevel ( long CNTNr, unsigned char PinType, long * TrgLevel, long * ReTrgLevel, unsigned char * Coupling, unsigned char * SupportLevel ) {
    long _result = 0;
    HRESULT _hr = raw_GetCNTTrgLevel(CNTNr, PinType, TrgLevel, ReTrgLevel, Coupling, SupportLevel, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(738)
inline long IDaq::SetCNTTrgLevel ( long CNTNr, unsigned char PinType, long TrgLevel, long ReTrgLevel, unsigned char Coupling ) {
    long _result = 0;
    HRESULT _hr = raw_SetCNTTrgLevel(CNTNr, PinType, TrgLevel, ReTrgLevel, Coupling, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(739)
inline long IDaq::IOControl ( long Msg, const _variant_t & InParam, VARIANT * OutParam ) {
    long _result = 0;
    HRESULT _hr = raw_IOControl(Msg, InParam, OutParam, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(740)
inline VARIANT_BOOL IDaq::GetCanAutoCalculate ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CanAutoCalculate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(741)
inline ISynchronizationPtr IDaq::CreateSynchronization ( ) {
    struct ISynchronization * _result = 0;
    HRESULT _hr = raw_CreateSynchronization(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISynchronizationPtr(_result, false);
}

//
// interface IData wrapper method implementations
//

#pragma implementation_key(742)
inline IChannelGroupsPtr IData::GetGroups ( ) {
    struct IChannelGroups * _result = 0;
    HRESULT _hr = get_Groups(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChannelGroupsPtr(_result, false);
}

#pragma implementation_key(743)
inline long IData::GetSampleRate ( ) {
    long _result = 0;
    HRESULT _hr = get_SampleRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(744)
inline IChannelPtr IData::FindChannel ( _bstr_t Name ) {
    struct IChannel * _result = 0;
    HRESULT _hr = raw_FindChannel(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChannelPtr(_result, false);
}

#pragma implementation_key(745)
inline long IData::GetSamples ( ) {
    long _result = 0;
    HRESULT _hr = get_Samples(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(746)
inline HRESULT IData::GetSamplesAcquired ( long * Mid, long * Dir ) {
    HRESULT _hr = raw_GetSamplesAcquired(Mid, Dir);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(747)
inline IChannelListPtr IData::GetShownChannels ( ) {
    struct IChannelList * _result = 0;
    HRESULT _hr = get_ShownChannels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChannelListPtr(_result, false);
}

#pragma implementation_key(748)
inline IChannelListPtr IData::GetActiveChannels ( ) {
    struct IChannelList * _result = 0;
    HRESULT _hr = get_ActiveChannels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChannelListPtr(_result, false);
}

#pragma implementation_key(749)
inline long IData::GetExternalClock ( ) {
    long _result = 0;
    HRESULT _hr = get_ExternalClock(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(750)
inline DATE IData::GetStartStoreTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_StartStoreTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(751)
inline IChannelPtr IData::FindChannelByIndex ( struct T_ChIndex Index ) {
    struct IChannel * _result = 0;
    HRESULT _hr = raw_FindChannelByIndex(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChannelPtr(_result, false);
}

#pragma implementation_key(752)
inline struct T_RecordPosition IData::GetCurrentPos ( ) {
    struct T_RecordPosition _result;
    HRESULT _hr = get_CurrentPos(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(753)
inline void IData::PutCurrentPos ( struct T_RecordPosition Value ) {
    HRESULT _hr = put_CurrentPos(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(754)
inline struct T_RecordPosition IData::GetEndStamp ( ) {
    struct T_RecordPosition _result;
    HRESULT _hr = get_EndStamp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(755)
inline void IData::PutEndStamp ( struct T_RecordPosition Value ) {
    HRESULT _hr = put_EndStamp(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(756)
inline struct T_RecordPosition IData::GetStartStamp ( ) {
    struct T_RecordPosition _result;
    HRESULT _hr = get_StartStamp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(757)
inline void IData::PutStartStamp ( struct T_RecordPosition Value ) {
    HRESULT _hr = put_StartStamp(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(758)
inline _bstr_t IData::GetIndexName ( struct T_ChIndex Index ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetIndexName(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(759)
inline IChannelPtr IData::FindChannelByIndex1 ( long IndexLevel, long I1, long I2, long I3, long I4, long I5 ) {
    struct IChannel * _result = 0;
    HRESULT _hr = raw_FindChannelByIndex1(IndexLevel, I1, I2, I3, I4, I5, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChannelPtr(_result, false);
}

#pragma implementation_key(760)
inline _bstr_t IData::GetIndexName1 ( long IndexLevel, long I1, long I2, long I3, long I4, long I5 ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetIndexName1(IndexLevel, I1, I2, I3, I4, I5, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(761)
inline HRESULT IData::BuildChannelList ( ) {
    HRESULT _hr = raw_BuildChannelList();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(762)
inline IChannelListPtr IData::GetAllChannels ( ) {
    struct IChannelList * _result = 0;
    HRESULT _hr = get_AllChannels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChannelListPtr(_result, false);
}

#pragma implementation_key(763)
inline IChannelListPtr IData::GetUsedChannels ( ) {
    struct IChannelList * _result = 0;
    HRESULT _hr = get_UsedChannels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChannelListPtr(_result, false);
}

#pragma implementation_key(764)
inline HRESULT IData::StartDataSync ( ) {
    HRESULT _hr = raw_StartDataSync();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(765)
inline HRESULT IData::EndDataSync ( ) {
    HRESULT _hr = raw_EndDataSync();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(766)
inline _bstr_t IData::GetIndexNameShort ( struct T_ChIndex ChIndex ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetIndexNameShort(ChIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(767)
inline _bstr_t IData::GetIndexNameShort1 ( long IndexLevel, long I1, long I2, long I3, long I4, long I5 ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetIndexNameShort1(IndexLevel, I1, I2, I3, I4, I5, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(768)
inline DATE IData::GetStartStoreTimeUTC ( ) {
    DATE _result = 0;
    HRESULT _hr = get_StartStoreTimeUTC(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(769)
inline HRESULT IData::ApplyChannels ( ) {
    HRESULT _hr = raw_ApplyChannels();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(770)
inline HRESULT IData::SetStartStoreTimeUTC ( DATE Time ) {
    HRESULT _hr = raw_SetStartStoreTimeUTC(Time);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(771)
inline HRESULT IData::SetExternalClock ( long Value ) {
    HRESULT _hr = raw_SetExternalClock(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(772)
inline VARIANT_BOOL IData::GetExternalTrigger ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ExternalTrigger(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(773)
inline void IData::PutExternalTrigger ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_ExternalTrigger(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(774)
inline long IData::GetMaxCalcDelay ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxCalcDelay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(775)
inline struct T_RecordPosition IData::GetFirstTimeStamp ( ) {
    struct T_RecordPosition _result;
    HRESULT _hr = get_FirstTimeStamp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(776)
inline struct T_RecordPosition IData::GetMRealTimeStamp ( ) {
    struct T_RecordPosition _result;
    HRESULT _hr = get_MRealTimeStamp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(777)
inline VARIANT_BOOL IData::GetMeasureMode ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MeasureMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(778)
inline VARIANT_BOOL IData::GetFreezeMode ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FreezeMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(779)
inline double IData::GetSampleRateEx ( ) {
    double _result = 0;
    HRESULT _hr = get_SampleRateEx(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(780)
inline double IData::GetCurrentPosD ( ) {
    double _result = 0;
    HRESULT _hr = get_CurrentPosD(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(781)
inline void IData::PutCurrentPosD ( double Value ) {
    HRESULT _hr = put_CurrentPosD(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(782)
inline double IData::GetStartStampD ( ) {
    double _result = 0;
    HRESULT _hr = get_StartStampD(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(783)
inline void IData::PutStartStampD ( double Value ) {
    HRESULT _hr = put_StartStampD(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(784)
inline double IData::GetEndStampD ( ) {
    double _result = 0;
    HRESULT _hr = get_EndStampD(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(785)
inline void IData::PutEndStampD ( double Value ) {
    HRESULT _hr = put_EndStampD(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(786)
inline long IData::GetIBRate ( long Level ) {
    long _result = 0;
    HRESULT _hr = get_IBRate(Level, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(787)
inline long IData::GetIBAbsRate ( long Level ) {
    long _result = 0;
    HRESULT _hr = get_IBAbsRate(Level, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(788)
inline long IData::GetIBAbsMidRate ( long Level ) {
    long _result = 0;
    HRESULT _hr = get_IBAbsMidRate(Level, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(789)
inline long IData::GetIBLevels ( ) {
    long _result = 0;
    HRESULT _hr = get_IBLevels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(790)
inline IInputGroupsPtr IData::GetInputGroups ( ) {
    struct IInputGroups * _result = 0;
    HRESULT _hr = get_InputGroups(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IInputGroupsPtr(_result, false);
}

#pragma implementation_key(791)
inline IChannelPtr IData::FindChannelByIndexEx ( const _variant_t & Index ) {
    struct IChannel * _result = 0;
    HRESULT _hr = raw_FindChannelByIndexEx(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChannelPtr(_result, false);
}

#pragma implementation_key(792)
inline long IData::GetSRDivLCM ( ) {
    long _result = 0;
    HRESULT _hr = get_SRDivLCM(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(793)
inline VARIANT_BOOL IData::GetAnalyseMode ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AnalyseMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(794)
inline HRESULT IData::SelectDataRegion ( double StartPos, double StopPos ) {
    HRESULT _hr = raw_SelectDataRegion(StartPos, StopPos);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(795)
inline long IData::GetCalcDelayLimit ( ) {
    long _result = 0;
    HRESULT _hr = get_CalcDelayLimit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(796)
inline _bstr_t IData::GetIndexNameEx ( const _variant_t & Index ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetIndexNameEx(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(797)
inline double IData::GetRelativeTimeOffset ( ) {
    double _result = 0;
    HRESULT _hr = get_RelativeTimeOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(798)
inline void IData::PutRelativeTimeOffset ( double Value ) {
    HRESULT _hr = put_RelativeTimeOffset(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(799)
inline _bstr_t IData::GetTimestring ( double Time, enum TimeDisplay TimeDisplay, VARIANT_BOOL ForceZeroPrec ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetTimestring(Time, TimeDisplay, ForceZeroPrec, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(800)
inline IProcessingMarkerListPtr IData::GetProcessingMarkers ( ) {
    struct IProcessingMarkerList * _result = 0;
    HRESULT _hr = get_ProcessingMarkers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IProcessingMarkerListPtr(_result, false);
}

//
// interface IChannel wrapper method implementations
//

#pragma implementation_key(801)
inline struct T_ReducedRec IChannel::GetIBValues ( long Index ) {
    struct T_ReducedRec _result;
    HRESULT _hr = get_IBValues(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(802)
inline struct T_ReducedRec IChannel::GetRBValues ( long Index ) {
    struct T_ReducedRec _result;
    HRESULT _hr = get_RBValues(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(803)
inline float IChannel::GetDBValues ( long Index ) {
    float _result = 0;
    HRESULT _hr = get_DBValues(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(804)
inline long IChannel::GetDBBufSize ( ) {
    long _result = 0;
    HRESULT _hr = get_DBBufSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(805)
inline long IChannel::GetDBDataSize ( ) {
    long _result = 0;
    HRESULT _hr = get_DBDataSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(806)
inline long IChannel::GetDBPos ( ) {
    long _result = 0;
    HRESULT _hr = get_DBPos(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(807)
inline long IChannel::GetIBBufSize ( ) {
    long _result = 0;
    HRESULT _hr = get_IBBufSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(808)
inline long IChannel::GetIBDataSize ( ) {
    long _result = 0;
    HRESULT _hr = get_IBDataSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(809)
inline long IChannel::GetIBPos ( ) {
    long _result = 0;
    HRESULT _hr = get_IBPos(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(810)
inline long IChannel::GetRBBufSize ( ) {
    long _result = 0;
    HRESULT _hr = get_RBBufSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(811)
inline long IChannel::GetRBDataSize ( ) {
    long _result = 0;
    HRESULT _hr = get_RBDataSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(812)
inline long IChannel::GetRBPos ( ) {
    long _result = 0;
    HRESULT _hr = get_RBPos(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(813)
inline _bstr_t IChannel::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(814)
inline void IChannel::PutName ( _bstr_t Value ) {
    HRESULT _hr = put_Name(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(815)
inline double IChannel::GetDBTimeStamp ( long Index ) {
    double _result = 0;
    HRESULT _hr = get_DBTimeStamp(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(816)
inline VARIANT_BOOL IChannel::GetUsed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Used(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(817)
inline void IChannel::PutUsed ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Used(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(818)
inline VARIANT_BOOL IChannel::GetShown ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Shown(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(819)
inline void IChannel::PutShown ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Shown(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(820)
inline _variant_t IChannel::GetUnscaledData ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetUnscaledData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(821)
inline _variant_t IChannel::GetScaledData ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetScaledData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(822)
inline long IChannel::GetDBAddress ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetDBAddress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(823)
inline long IChannel::GetDataType ( ) {
    long _result = 0;
    HRESULT _hr = get_DataType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(824)
inline long IChannel::GetBytes ( ) {
    long _result = 0;
    HRESULT _hr = get_Bytes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(825)
inline VARIANT_BOOL IChannel::GetAsync ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Async(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(826)
inline HRESULT IChannel::AddSingleSample ( float Value ) {
    HRESULT _hr = raw_AddSingleSample(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(827)
inline _variant_t IChannel::GetTSData ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetTSData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(828)
inline _variant_t IChannel::GetUnscaledDataEx ( long Start, long Count ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetUnscaledDataEx(Start, Count, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(829)
inline float IChannel::ScaleValue ( float Value ) {
    float _result = 0;
    HRESULT _hr = raw_ScaleValue(Value, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(830)
inline HRESULT IChannel::AddAsyncSingleSample ( float Value, double TimeStamp ) {
    HRESULT _hr = raw_AddAsyncSingleSample(Value, TimeStamp);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(831)
inline _variant_t IChannel::GetScaledDataEx ( long Start, long Count ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetScaledDataEx(Start, Count, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(832)
inline long IChannel::GetSRDiv ( ) {
    long _result = 0;
    HRESULT _hr = get_SRDiv(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(833)
inline IChannelGroupPtr IChannel::GetGroup ( ) {
    struct IChannelGroup * _result = 0;
    HRESULT _hr = get_Group(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChannelGroupPtr(_result, false);
}

#pragma implementation_key(834)
inline _bstr_t IChannel::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(835)
inline void IChannel::PutDescription ( _bstr_t Value ) {
    HRESULT _hr = put_Description(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(836)
inline _bstr_t IChannel::GetUnit_ ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Unit_(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(837)
inline void IChannel::PutUnit_ ( _bstr_t Value ) {
    HRESULT _hr = put_Unit_(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(838)
inline HRESULT IChannel::AddAsyncDoubleSample ( double Value, double TimeStamp ) {
    HRESULT _hr = raw_AddAsyncDoubleSample(Value, TimeStamp);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(839)
inline HRESULT IChannel::AddAsyncByteSample ( unsigned char Value, double TimeStamp ) {
    HRESULT _hr = raw_AddAsyncByteSample(Value, TimeStamp);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(840)
inline long IChannel::GetMType ( ) {
    long _result = 0;
    HRESULT _hr = get_MType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(841)
inline void IChannel::PutMType ( long Value ) {
    HRESULT _hr = put_MType(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(842)
inline _bstr_t IChannel::GetMeasurement ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Measurement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(843)
inline void IChannel::PutMeasurement ( _bstr_t Value ) {
    HRESULT _hr = put_Measurement(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(844)
inline IChannelConnectionPtr IChannel::CreateConnection ( ) {
    struct IChannelConnection * _result = 0;
    HRESULT _hr = raw_CreateConnection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChannelConnectionPtr(_result, false);
}

#pragma implementation_key(845)
inline long IChannel::GetMainDisplayColor ( ) {
    long _result = 0;
    HRESULT _hr = get_MainDisplayColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(846)
inline void IChannel::PutMainDisplayColor ( long Value ) {
    HRESULT _hr = put_MainDisplayColor(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(847)
inline float IChannel::GetTypicalMinValue ( ) {
    float _result = 0;
    HRESULT _hr = get_TypicalMinValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(848)
inline float IChannel::GetTypicalMaxValue ( ) {
    float _result = 0;
    HRESULT _hr = get_TypicalMaxValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(849)
inline struct T_ChIndex IChannel::GetIndex ( ) {
    struct T_ChIndex _result;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(850)
inline HRESULT IChannel::GetScaledDataEx1 ( long Start, long Count, VARIANT * Data ) {
    HRESULT _hr = raw_GetScaledDataEx1(Start, Count, Data);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(851)
inline HRESULT IChannel::GetUnscaledDataEx1 ( long Start, long Count, VARIANT * Data ) {
    HRESULT _hr = raw_GetUnscaledDataEx1(Start, Count, Data);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(852)
inline _variant_t IChannel::GetTSDataEx ( long Start, long Count ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetTSDataEx(Start, Count, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(853)
inline HRESULT IChannel::GetTSDataEx1 ( long Start, long Count, VARIANT * Data ) {
    HRESULT _hr = raw_GetTSDataEx1(Start, Count, Data);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(854)
inline HRESULT IChannel::GetIBValues ( long Pos, float * Min, float * Max, float * Ave, float * Rms ) {
    HRESULT _hr = raw_GetIBValues(Pos, Min, Max, Ave, Rms);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(855)
inline HRESULT IChannel::GetRBValues ( long Pos, float * Min, float * Max, float * Ave, float * Rms ) {
    HRESULT _hr = raw_GetRBValues(Pos, Min, Max, Ave, Rms);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(856)
inline HRESULT IChannel::GetIndex1 ( long * IndexLevel, long * I1, long * I2, long * I3, long * I4, long * I5 ) {
    HRESULT _hr = raw_GetIndex1(IndexLevel, I1, I2, I3, I4, I5);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(857)
inline float IChannel::GetUserScaleMin ( ) {
    float _result = 0;
    HRESULT _hr = get_UserScaleMin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(858)
inline void IChannel::PutUserScaleMin ( float Value ) {
    HRESULT _hr = put_UserScaleMin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(859)
inline float IChannel::GetUserScaleMax ( ) {
    float _result = 0;
    HRESULT _hr = get_UserScaleMax(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(860)
inline void IChannel::PutUserScaleMax ( float Value ) {
    HRESULT _hr = put_UserScaleMax(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(861)
inline double IChannel::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(862)
inline void IChannel::PutScale ( double Value ) {
    HRESULT _hr = put_Scale(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(863)
inline double IChannel::GetOffset ( ) {
    double _result = 0;
    HRESULT _hr = get_Offset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(864)
inline void IChannel::PutOffset ( double Value ) {
    HRESULT _hr = put_Offset(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(865)
inline HRESULT IChannel::IncDBSamples ( long Count ) {
    HRESULT _hr = raw_IncDBSamples(Count);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(866)
inline HRESULT IChannel::AddSingleSamples ( long Count, const _variant_t & Data, const _variant_t & Timestamps ) {
    HRESULT _hr = raw_AddSingleSamples(Count, Data, Timestamps);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(867)
inline HRESULT IChannel::SetSRDiv ( long SRDiv ) {
    HRESULT _hr = raw_SetSRDiv(SRDiv);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(868)
inline HRESULT IChannel::SetSRDivType ( enum TSRDivType AType ) {
    HRESULT _hr = raw_SetSRDivType(AType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(869)
inline long IChannel::GetExportOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_ExportOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(870)
inline void IChannel::PutExportOrder ( long Value ) {
    HRESULT _hr = put_ExportOrder(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(871)
inline long IChannel::GetCalcDelay ( ) {
    long _result = 0;
    HRESULT _hr = get_CalcDelay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(872)
inline void IChannel::PutCalcDelay ( long Value ) {
    HRESULT _hr = put_CalcDelay(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(873)
inline HRESULT IChannel::AddAsyncShortintSample ( char Value, double TimeStamp ) {
    HRESULT _hr = raw_AddAsyncShortintSample(Value, TimeStamp);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(874)
inline HRESULT IChannel::AddAsyncSmallintSample ( short Value, double TimeStamp ) {
    HRESULT _hr = raw_AddAsyncSmallintSample(Value, TimeStamp);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(875)
inline HRESULT IChannel::AddAsyncIntegerSample ( long Value, double TimeStamp ) {
    HRESULT _hr = raw_AddAsyncIntegerSample(Value, TimeStamp);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(876)
inline HRESULT IChannel::AddAsyncInt64Sample ( __int64 Value, double TimeStamp ) {
    HRESULT _hr = raw_AddAsyncInt64Sample(Value, TimeStamp);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(877)
inline long IChannel::GetCalcSRDiv ( ) {
    long _result = 0;
    HRESULT _hr = get_CalcSRDiv(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(878)
inline float IChannel::GetChangeThreshold ( ) {
    float _result = 0;
    HRESULT _hr = get_ChangeThreshold(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(879)
inline void IChannel::PutChangeThreshold ( float Value ) {
    HRESULT _hr = put_ChangeThreshold(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(880)
inline IDiscreteListPtr IChannel::GetDiscreteList ( ) {
    struct IDiscreteList * _result = 0;
    HRESULT _hr = get_DiscreteList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDiscreteListPtr(_result, false);
}

#pragma implementation_key(881)
inline HRESULT IChannel::GetChannelSetup ( VARIANT * Data ) {
    HRESULT _hr = raw_GetChannelSetup(Data);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(882)
inline HRESULT IChannel::SetChannelSetup ( const _variant_t & Data ) {
    HRESULT _hr = raw_SetChannelSetup(Data);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(883)
inline HRESULT IChannel::SetDataType ( long ADataType ) {
    HRESULT _hr = raw_SetDataType(ADataType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(884)
inline long IChannel::GetBitCount ( ) {
    long _result = 0;
    HRESULT _hr = get_BitCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(885)
inline void IChannel::PutBitCount ( long Value ) {
    HRESULT _hr = put_BitCount(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(886)
inline _bstr_t IChannel::GetSettings ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Settings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(887)
inline _bstr_t IChannel::GetChNo ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ChNo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(888)
inline VARIANT_BOOL IChannel::GetExported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Exported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(889)
inline void IChannel::PutExported ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Exported(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(890)
inline double IChannel::GetAbsMin ( ) {
    double _result = 0;
    HRESULT _hr = get_AbsMin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(891)
inline double IChannel::GetAbsMax ( ) {
    double _result = 0;
    HRESULT _hr = get_AbsMax(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(892)
inline VARIANT_BOOL IChannel::GetIsSingleValue ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsSingleValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(893)
inline double IChannel::GetSingleValue ( ) {
    double _result = 0;
    HRESULT _hr = get_SingleValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(894)
inline void IChannel::PutSingleValue ( double Value ) {
    HRESULT _hr = put_SingleValue(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(895)
inline HRESULT IChannel::SetFreezeMode ( VARIANT_BOOL Freeze ) {
    HRESULT _hr = raw_SetFreezeMode(Freeze);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(896)
inline _bstr_t IChannel::GetLogicalName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LogicalName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(897)
inline void IChannel::PutLogicalName ( _bstr_t Value ) {
    HRESULT _hr = put_LogicalName(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(898)
inline __int64 IChannel::GetLogicalIndex ( ) {
    __int64 _result = 0;
    HRESULT _hr = get_LogicalIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(899)
inline void IChannel::PutLogicalIndex ( __int64 Value ) {
    HRESULT _hr = put_LogicalIndex(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(900)
inline long IChannel::GetTag ( ) {
    long _result = 0;
    HRESULT _hr = get_Tag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(901)
inline void IChannel::PutTag ( long Value ) {
    HRESULT _hr = put_Tag(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(902)
inline HRESULT IChannel::SetAsync ( VARIANT_BOOL Async ) {
    HRESULT _hr = raw_SetAsync(Async);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(903)
inline HRESULT IChannel::SetIsSingleValue ( VARIANT_BOOL Value ) {
    HRESULT _hr = raw_SetIsSingleValue(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(904)
inline double IChannel::GetScale_ ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale_(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(905)
inline void IChannel::PutScale_ ( double Value ) {
    HRESULT _hr = put_Scale_(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(906)
inline VARIANT_BOOL IChannel::GetStored ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Stored(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(907)
inline void IChannel::PutStored ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Stored(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(908)
inline HRESULT IChannel::AddByteSample ( unsigned char Value ) {
    HRESULT _hr = raw_AddByteSample(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(909)
inline HRESULT IChannel::AddShortintSample ( char Value ) {
    HRESULT _hr = raw_AddShortintSample(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(910)
inline HRESULT IChannel::AddSmallintSample ( short Value ) {
    HRESULT _hr = raw_AddSmallintSample(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(911)
inline HRESULT IChannel::AddWordSample ( unsigned short Value ) {
    HRESULT _hr = raw_AddWordSample(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(912)
inline HRESULT IChannel::AddIntegerSample ( long Value ) {
    HRESULT _hr = raw_AddIntegerSample(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(913)
inline HRESULT IChannel::AddIn64Sample ( __int64 Value ) {
    HRESULT _hr = raw_AddIn64Sample(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(914)
inline HRESULT IChannel::AddDoubleSample ( double Value ) {
    HRESULT _hr = raw_AddDoubleSample(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(915)
inline float IChannel::GetValueAtAbsPos ( long Pos, long * SeekPos, VARIANT_BOOL Interpolate ) {
    float _result = 0;
    HRESULT _hr = raw_GetValueAtAbsPos(Pos, SeekPos, Interpolate, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(916)
inline double IChannel::GetValueAtAbsPosDouble ( long Pos, long * SeekPos, VARIANT_BOOL Interpolate ) {
    double _result = 0;
    HRESULT _hr = raw_GetValueAtAbsPosDouble(Pos, SeekPos, Interpolate, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(917)
inline HRESULT IChannel::UpdateXML ( const _variant_t & DOMDocument, const _variant_t & DOMNode, VARIANT_BOOL Write ) {
    HRESULT _hr = raw_UpdateXML(DOMDocument, DOMNode, Write);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(918)
inline IArrayInfoPtr IChannel::GetArrayInfo ( ) {
    struct IArrayInfo * _result = 0;
    HRESULT _hr = get_ArrayInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IArrayInfoPtr(_result, false);
}

#pragma implementation_key(919)
inline VARIANT_BOOL IChannel::GetArrayChannel ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ArrayChannel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(920)
inline void IChannel::PutArrayChannel ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_ArrayChannel(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(921)
inline long IChannel::GetArraySize ( ) {
    long _result = 0;
    HRESULT _hr = get_ArraySize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(922)
inline HRESULT IChannel::AddAsyncData ( const _variant_t & Data, double TimeStamp ) {
    HRESULT _hr = raw_AddAsyncData(Data, TimeStamp);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(923)
inline HRESULT IChannel::AddData ( const _variant_t & Data ) {
    HRESULT _hr = raw_AddData(Data);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(924)
inline long IChannel::GetOfflineStatus ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetOfflineStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(925)
inline float IChannel::GetExpectedAsyncRate ( ) {
    float _result = 0;
    HRESULT _hr = get_ExpectedAsyncRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(926)
inline void IChannel::PutExpectedAsyncRate ( float Value ) {
    HRESULT _hr = put_ExpectedAsyncRate(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(927)
inline long IChannel::GetFirstIBLevel ( ) {
    long _result = 0;
    HRESULT _hr = get_FirstIBLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(928)
inline struct T_ReducedRec IChannel::GetIBValuesEx ( long Level, long Index ) {
    struct T_ReducedRec _result;
    HRESULT _hr = get_IBValuesEx(Level, Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(929)
inline long IChannel::GetIBPosEx ( long Level ) {
    long _result = 0;
    HRESULT _hr = get_IBPosEx(Level, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(930)
inline long IChannel::GetIBDataSizeEx ( long Level ) {
    long _result = 0;
    HRESULT _hr = get_IBDataSizeEx(Level, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(931)
inline long IChannel::GetSelectorIndexLevel ( ) {
    long _result = 0;
    HRESULT _hr = get_SelectorIndexLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(932)
inline void IChannel::PutSelectorIndexLevel ( long Value ) {
    HRESULT _hr = put_SelectorIndexLevel(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(933)
inline long IChannel::GetSelectorIndexStartLevel ( ) {
    long _result = 0;
    HRESULT _hr = get_SelectorIndexStartLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(934)
inline void IChannel::PutSelectorIndexStartLevel ( long Value ) {
    HRESULT _hr = put_SelectorIndexStartLevel(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(935)
inline _variant_t IChannel::GetSelectorIndex ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_SelectorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(936)
inline void IChannel::PutSelectorIndex ( const _variant_t & Value ) {
    HRESULT _hr = put_SelectorIndex(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(937)
inline _bstr_t IChannel::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(938)
inline void IChannel::PutText ( _bstr_t Value ) {
    HRESULT _hr = put_Text(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(939)
inline double IChannel::GetFirstX ( ) {
    double _result = 0;
    HRESULT _hr = get_FirstX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(940)
inline void IChannel::PutFirstX ( double Value ) {
    HRESULT _hr = put_FirstX(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(941)
inline double IChannel::GetSecondX ( ) {
    double _result = 0;
    HRESULT _hr = get_SecondX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(942)
inline void IChannel::PutSecondX ( double Value ) {
    HRESULT _hr = put_SecondX(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(943)
inline VARIANT_BOOL IChannel::GetIsControlChannel ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsControlChannel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(944)
inline void IChannel::PutIsControlChannel ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_IsControlChannel(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(945)
inline long IChannel::GetControlChannelState ( ) {
    long _result = 0;
    HRESULT _hr = get_ControlChannelState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(946)
inline void IChannel::PutControlChannelState ( long Value ) {
    HRESULT _hr = put_ControlChannelState(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(947)
inline double IChannel::GetDBValuesDouble ( long Index ) {
    double _result = 0;
    HRESULT _hr = get_DBValuesDouble(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(948)
inline HRESULT IChannel::AddAsyncString ( _bstr_t Value, double TimeStamp ) {
    HRESULT _hr = raw_AddAsyncString(Value, TimeStamp);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(949)
inline HRESULT IChannel::SetAsStringChannel ( long Size ) {
    HRESULT _hr = raw_SetAsStringChannel(Size);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(950)
inline double IChannel::ScaleValueDouble ( double Value ) {
    double _result = 0;
    HRESULT _hr = raw_ScaleValueDouble(Value, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(951)
inline long IChannel::GetDStopDataAvail ( ) {
    long _result = 0;
    HRESULT _hr = get_DStopDataAvail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(952)
inline long IChannel::GetDStopDataAvailDir ( ) {
    long _result = 0;
    HRESULT _hr = get_DStopDataAvailDir(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(953)
inline long IChannel::GetDStartDataAvail ( ) {
    long _result = 0;
    HRESULT _hr = get_DStartDataAvail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(954)
inline _variant_t IChannel::GetIndexEx ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_IndexEx(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(955)
inline HRESULT IChannel::ShowChannelSetup ( ) {
    HRESULT _hr = raw_ShowChannelSetup();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(956)
inline long IChannel::GetTSAddress ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetTSAddress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(957)
inline long IChannel::GetControlChannelFlags ( ) {
    long _result = 0;
    HRESULT _hr = get_ControlChannelFlags(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(958)
inline void IChannel::PutControlChannelFlags ( long Value ) {
    HRESULT _hr = put_ControlChannelFlags(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(959)
inline enum TSRDivType IChannel::GetSRDivType ( ) {
    enum TSRDivType _result;
    HRESULT _hr = get_SRDivType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(960)
inline HRESULT IChannel::FastCalc ( ) {
    HRESULT _hr = raw_FastCalc();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(961)
inline HRESULT IChannel::FastCalcInt32 ( long Min, long Max, double Ave, double Rms ) {
    HRESULT _hr = raw_FastCalcInt32(Min, Max, Ave, Rms);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(962)
inline HRESULT IChannel::AddIntegerSampleWithCalc ( long Value ) {
    HRESULT _hr = raw_AddIntegerSampleWithCalc(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(963)
inline HRESULT IChannel::AddSmallintSampleWithCalc ( short Value ) {
    HRESULT _hr = raw_AddSmallintSampleWithCalc(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(964)
inline HRESULT IChannel::AddShortintSampleWithCalc ( char Value ) {
    HRESULT _hr = raw_AddShortintSampleWithCalc(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(965)
inline HRESULT IChannel::FastCalcInt16 ( short Min, short Max, float Ave, float Rms ) {
    HRESULT _hr = raw_FastCalcInt16(Min, Max, Ave, Rms);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(966)
inline IViewInfoPtr IChannel::GetViewInfo ( ) {
    struct IViewInfo * _result = 0;
    HRESULT _hr = get_ViewInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IViewInfoPtr(_result, false);
}

#pragma implementation_key(967)
inline HRESULT IChannel::AddAsyncBinarySample ( double TimeStamp, const _variant_t & Data ) {
    HRESULT _hr = raw_AddAsyncBinarySample(TimeStamp, Data);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(968)
inline long IChannel::GetBinAvgSampleSize ( ) {
    long _result = 0;
    HRESULT _hr = get_BinAvgSampleSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(969)
inline void IChannel::PutBinAvgSampleSize ( long Value ) {
    HRESULT _hr = put_BinAvgSampleSize(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(970)
inline HRESULT IChannel::GetBinaryDataAtPos ( long Pos, VARIANT * Data ) {
    HRESULT _hr = raw_GetBinaryDataAtPos(Pos, Data);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(971)
inline long IChannel::GetGetBinAddress ( ) {
    long _result = 0;
    HRESULT _hr = get_GetBinAddress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(972)
inline __int64 IChannel::GetBinAbsPos ( ) {
    __int64 _result = 0;
    HRESULT _hr = get_BinAbsPos(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(973)
inline long IChannel::GetBinBufSize ( ) {
    long _result = 0;
    HRESULT _hr = get_BinBufSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(974)
inline HRESULT IChannel::ValueChanged ( ) {
    HRESULT _hr = raw_ValueChanged();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(975)
inline HRESULT IChannel::StartFastCalc ( ) {
    HRESULT _hr = raw_StartFastCalc();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(976)
inline VARIANT_BOOL IChannel::GetKeepValues ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_KeepValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(977)
inline void IChannel::PutKeepValues ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_KeepValues(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(978)
inline __int64 IChannel::GetDBAddress64 ( ) {
    __int64 _result = 0;
    HRESULT _hr = raw_GetDBAddress64(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(979)
inline __int64 IChannel::GetTSAddress64 ( ) {
    __int64 _result = 0;
    HRESULT _hr = raw_GetTSAddress64(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(980)
inline VARIANT_BOOL IChannel::GetCalcSingleValue ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CalcSingleValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(981)
inline double IChannel::GetCustExportRate ( ) {
    double _result = 0;
    HRESULT _hr = get_CustExportRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(982)
inline IPropertiesPtr IChannel::GetProperties ( ) {
    struct IProperties * _result = 0;
    HRESULT _hr = get_Properties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPropertiesPtr(_result, false);
}

#pragma implementation_key(983)
inline HRESULT IChannel::AddAsyncWordSample ( unsigned short Value, double TimeStamp ) {
    HRESULT _hr = raw_AddAsyncWordSample(Value, TimeStamp);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(984)
inline _variant_t IChannel::GetCustomProp ( _bstr_t Name ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetCustomProp(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(985)
inline __int64 IChannel::GetBinAddress64 ( ) {
    __int64 _result = 0;
    HRESULT _hr = raw_GetBinAddress64(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(986)
inline _variant_t IChannel::GetScaledDataDoubleEx ( long Start, long Count ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetScaledDataDoubleEx(Start, Count, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(987)
inline void IChannel::PutCustExportRate ( double Value ) {
    HRESULT _hr = put_CustExportRate(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(988)
inline HRESULT IChannel::SetAsCANFDMessage ( ) {
    HRESULT _hr = raw_SetAsCANFDMessage();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(989)
inline long IChannel::GetExpectedAsyncRateType ( ) {
    long _result = 0;
    HRESULT _hr = get_ExpectedAsyncRateType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(990)
inline void IChannel::PutExpectedAsyncRateType ( long Value ) {
    HRESULT _hr = put_ExpectedAsyncRateType(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(991)
inline double IChannel::GetValueAtRelTimeDouble ( double Time, long * AsyncSeekPos, VARIANT_BOOL Interpolate, long Ind, enum ComplexPresentation ComplexPresent ) {
    double _result = 0;
    HRESULT _hr = raw_GetValueAtRelTimeDouble(Time, AsyncSeekPos, Interpolate, Ind, ComplexPresent, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(992)
inline double IChannel::DBValuesEx ( long Index, enum ComplexPresentation ComplexPresent ) {
    double _result = 0;
    HRESULT _hr = raw_DBValuesEx(Index, ComplexPresent, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(993)
inline _bstr_t IChannel::GetLongName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LongName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(994)
inline VARIANT_BOOL IChannel::GetShowLongName ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowLongName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(995)
inline _bstr_t IChannel::GetDisplayName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DisplayName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(996)
inline double IChannel::GetWarningLevelHigh ( ) {
    double _result = 0;
    HRESULT _hr = get_WarningLevelHigh(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(997)
inline void IChannel::PutWarningLevelHigh ( double Value ) {
    HRESULT _hr = put_WarningLevelHigh(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(998)
inline double IChannel::GetWarningLevelLow ( ) {
    double _result = 0;
    HRESULT _hr = get_WarningLevelLow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(999)
inline void IChannel::PutWarningLevelLow ( double Value ) {
    HRESULT _hr = put_WarningLevelLow(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1000)
inline double IChannel::GetCriticalLevelHigh ( ) {
    double _result = 0;
    HRESULT _hr = get_CriticalLevelHigh(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1001)
inline void IChannel::PutCriticalLevelHigh ( double Value ) {
    HRESULT _hr = put_CriticalLevelHigh(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1002)
inline double IChannel::GetCriticalLevelLow ( ) {
    double _result = 0;
    HRESULT _hr = get_CriticalLevelLow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1003)
inline void IChannel::PutCriticalLevelLow ( double Value ) {
    HRESULT _hr = put_CriticalLevelLow(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1004)
inline __int64 IChannel::GetValueAtAbsPosInt64 ( long Pos, long * SeekPos, VARIANT_BOOL Interpolate ) {
    __int64 _result = 0;
    HRESULT _hr = raw_GetValueAtAbsPosInt64(Pos, SeekPos, Interpolate, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1005)
inline double IChannel::GetSampleRate ( ) {
    double _result = 0;
    HRESULT _hr = raw_GetSampleRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1006)
inline double IChannel::CalcDataScale ( ) {
    double _result = 0;
    HRESULT _hr = raw_CalcDataScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1007)
inline double IChannel::CalcDataOffset ( ) {
    double _result = 0;
    HRESULT _hr = raw_CalcDataOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1008)
inline long IChannel::GetDigitsAfterDecPoint ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetDigitsAfterDecPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1009)
inline HRESULT IChannel::AddAsyncLongwordSample ( unsigned long Value, double TimeStamp ) {
    HRESULT _hr = raw_AddAsyncLongwordSample(Value, TimeStamp);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1010)
inline HRESULT IChannel::AddLongwordSample ( unsigned long Value ) {
    HRESULT _hr = raw_AddLongwordSample(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1011)
inline HRESULT IChannel::SetCustomProp ( _bstr_t Name, const _variant_t & Value ) {
    HRESULT _hr = raw_SetCustomProp(Name, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1012)
inline VARIANT_BOOL IChannel::GetIsScaleEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsScaleEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1013)
inline VARIANT_BOOL IChannel::GetIsDoublePrecision ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsDoublePrecision(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1014)
inline VARIANT_BOOL IChannel::SendMessageEvent ( _bstr_t MsgHeader, _bstr_t MsgData, BSTR * MsgOut ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SendMessageEvent(MsgHeader, MsgData, MsgOut, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1015)
inline VARIANT_BOOL IChannel::SendMessageToOwnerEvent ( _bstr_t MsgHeader, _bstr_t MsgData, BSTR * MsgOut ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SendMessageToOwnerEvent(MsgHeader, MsgData, MsgOut, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IChannelList wrapper method implementations
//

#pragma implementation_key(1016)
inline long IChannelList::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1017)
inline IChannelPtr IChannelList::GetItem ( long Index ) {
    struct IChannel * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChannelPtr(_result, false);
}

#pragma implementation_key(1018)
inline IUnknownPtr IChannelList::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IChannelGroup wrapper method implementations
//

#pragma implementation_key(1019)
inline _bstr_t IChannelGroup::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1020)
inline long IChannelGroup::GetExportRate ( ) {
    long _result = 0;
    HRESULT _hr = get_ExportRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1021)
inline void IChannelGroup::PutExportRate ( long Value ) {
    HRESULT _hr = put_ExportRate(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1022)
inline _bstr_t IChannelGroup::GetIndexName ( struct T_ChIndex Index ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetIndexName(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IChannelGroups wrapper method implementations
//

#pragma implementation_key(1023)
inline long IChannelGroups::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1024)
inline IChannelGroupPtr IChannelGroups::GetItem ( long Index ) {
    struct IChannelGroup * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChannelGroupPtr(_result, false);
}

#pragma implementation_key(1025)
inline IUnknownPtr IChannelGroups::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IPluginGroup wrapper method implementations
//

#pragma implementation_key(1026)
inline IChannelPtr IPluginGroup::MountChannel ( long DataType, VARIANT_BOOL Async, long DBSize ) {
    struct IChannel * _result = 0;
    HRESULT _hr = raw_MountChannel(DataType, Async, DBSize, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChannelPtr(_result, false);
}

#pragma implementation_key(1027)
inline HRESULT IPluginGroup::ClearAllChannels ( ) {
    HRESULT _hr = raw_ClearAllChannels();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1028)
inline HRESULT IPluginGroup::UnmountChannel ( struct IChannel * * Channel ) {
    HRESULT _hr = raw_UnmountChannel(Channel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1029)
inline HRESULT IPluginGroup::AddIndexName ( long Level, const _variant_t & Ind, _bstr_t Name ) {
    HRESULT _hr = raw_AddIndexName(Level, Ind, Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1030)
inline IChannelPtr IPluginGroup::MountChannelEx ( _bstr_t PluginGUID, long IndexLevel, const _variant_t & Ind ) {
    struct IChannel * _result = 0;
    HRESULT _hr = raw_MountChannelEx(PluginGUID, IndexLevel, Ind, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChannelPtr(_result, false);
}

#pragma implementation_key(1031)
inline IChannelPtr IPluginGroup::FindChannel ( _bstr_t PluginGUID, long IndexLevel, const _variant_t & Ind, VARIANT_BOOL AllowMount ) {
    struct IChannel * _result = 0;
    HRESULT _hr = raw_FindChannel(PluginGUID, IndexLevel, Ind, AllowMount, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChannelPtr(_result, false);
}

#pragma implementation_key(1032)
inline IInputGroupPtr IPluginGroup::MountInputGroup ( _bstr_t PluginGUID, const _variant_t & Index ) {
    struct IInputGroup * _result = 0;
    HRESULT _hr = raw_MountInputGroup(PluginGUID, Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IInputGroupPtr(_result, false);
}

#pragma implementation_key(1033)
inline HRESULT IPluginGroup::AddIndexNameEx ( _bstr_t PluginGUID, long Level, const _variant_t & Ind, _bstr_t Name ) {
    HRESULT _hr = raw_AddIndexNameEx(PluginGUID, Level, Ind, Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1034)
inline IInputGroupPtr IPluginGroup::FindInputGroup ( _bstr_t PluginGUID, long IndexLevel, const _variant_t & Ind ) {
    struct IInputGroup * _result = 0;
    HRESULT _hr = raw_FindInputGroup(PluginGUID, IndexLevel, Ind, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IInputGroupPtr(_result, false);
}

//
// interface IDataSection wrapper method implementations
//

#pragma implementation_key(1035)
inline _variant_t IDataSection::ReadData ( struct IChannel * Channel, VARIANT * Timestamps ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ReadData(Channel, Timestamps, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1036)
inline DATE IDataSection::GetTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_Time(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1037)
inline HRESULT IDataSection::ReadData1 ( struct IChannel * Channel, VARIANT * Data, VARIANT * Timestamps ) {
    HRESULT _hr = raw_ReadData1(Channel, Data, Timestamps);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1038)
inline long IDataSection::GetDataCount ( ) {
    long _result = 0;
    HRESULT _hr = get_DataCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1039)
inline long IDataSection::GetTrigPos ( ) {
    long _result = 0;
    HRESULT _hr = get_TrigPos(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IDataSections wrapper method implementations
//

#pragma implementation_key(1040)
inline long IDataSections::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1041)
inline IUnknownPtr IDataSections::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1042)
inline IDataSectionPtr IDataSections::GetItem ( long Index ) {
    struct IDataSection * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDataSectionPtr(_result, false);
}

//
// interface ILoadEngine wrapper method implementations
//

#pragma implementation_key(1043)
inline HRESULT ILoadEngine::ReloadBlock ( long Num ) {
    HRESULT _hr = raw_ReloadBlock(Num);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1044)
inline long ILoadEngine::GetNumBlocks ( ) {
    long _result = 0;
    HRESULT _hr = get_NumBlocks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1045)
inline IDataSectionsPtr ILoadEngine::GetDataSections ( ) {
    struct IDataSections * _result = 0;
    HRESULT _hr = get_DataSections(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDataSectionsPtr(_result, false);
}

#pragma implementation_key(1046)
inline VARIANT_BOOL ILoadEngine::GetReducedOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ReducedOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1047)
inline HRESULT ILoadEngine::CloseFile ( ) {
    HRESULT _hr = raw_CloseFile();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1048)
inline VARIANT_BOOL ILoadEngine::GetFileOpened ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FileOpened(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1049)
inline HRESULT ILoadEngine::ShrinkFile ( _bstr_t FileName ) {
    HRESULT _hr = raw_ShrinkFile(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1050)
inline IVideoLoadEnginesPtr ILoadEngine::GetVideoLoadEngines ( ) {
    struct IVideoLoadEngines * _result = 0;
    HRESULT _hr = get_VideoLoadEngines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVideoLoadEnginesPtr(_result, false);
}

#pragma implementation_key(1051)
inline HRESULT ILoadEngine::Reload ( struct T_RecordPosition Start, struct T_RecordPosition Stop ) {
    HRESULT _hr = raw_Reload(Start, Stop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1052)
inline HRESULT ILoadEngine::StartDBLoad ( struct T_RecordPosition Start, struct T_RecordPosition Stop, long BlockSize ) {
    HRESULT _hr = raw_StartDBLoad(Start, Stop, BlockSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1053)
inline VARIANT_BOOL ILoadEngine::NextDBLoad ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_NextDBLoad(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1054)
inline HRESULT ILoadEngine::StartVideoCompress ( ) {
    HRESULT _hr = raw_StartVideoCompress();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1055)
inline VARIANT_BOOL ILoadEngine::StopVideoCompress ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_StopVideoCompress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1056)
inline long ILoadEngine::GetVideoCompressDone ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetVideoCompressDone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1057)
inline VARIANT_BOOL ILoadEngine::IsVideoCompressDone ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsVideoCompressDone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1058)
inline HRESULT ILoadEngine::ReloadEx ( long StartBlock, long EndBlock, struct IChannel * Channel, long MinLevel ) {
    HRESULT _hr = raw_ReloadEx(StartBlock, EndBlock, Channel, MinLevel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1059)
inline double ILoadEngine::GetDuration ( ) {
    double _result = 0;
    HRESULT _hr = get_Duration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1060)
inline HRESULT ILoadEngine::EnterLoadSync ( ) {
    HRESULT _hr = raw_EnterLoadSync();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1061)
inline HRESULT ILoadEngine::LeaveLoadSync ( ) {
    HRESULT _hr = raw_LeaveLoadSync();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1062)
inline _bstr_t ILoadEngine::GetFileName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FileName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IChannelConnection wrapper method implementations
//

#pragma implementation_key(1063)
inline enum ConnTypes IChannelConnection::GetAType ( ) {
    enum ConnTypes _result;
    HRESULT _hr = get_AType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1064)
inline void IChannelConnection::PutAType ( enum ConnTypes Value ) {
    HRESULT _hr = put_AType(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1065)
inline long IChannelConnection::GetNumValues ( ) {
    long _result = 0;
    HRESULT _hr = get_NumValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1066)
inline long IChannelConnection::GetNumBlocks ( ) {
    long _result = 0;
    HRESULT _hr = get_NumBlocks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1067)
inline _variant_t IChannelConnection::GetDataValues ( long NumValues ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetDataValues(NumValues, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1068)
inline _variant_t IChannelConnection::GetDataBlocks ( long NumBlocks ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetDataBlocks(NumBlocks, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1069)
inline long IChannelConnection::GetOverlap ( ) {
    long _result = 0;
    HRESULT _hr = get_Overlap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1070)
inline void IChannelConnection::PutOverlap ( long Value ) {
    HRESULT _hr = put_Overlap(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1071)
inline long IChannelConnection::GetBlockSize ( ) {
    long _result = 0;
    HRESULT _hr = get_BlockSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1072)
inline void IChannelConnection::PutBlockSize ( long Value ) {
    HRESULT _hr = put_BlockSize(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1073)
inline HRESULT IChannelConnection::Reset ( ) {
    HRESULT _hr = raw_Reset();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1074)
inline IChannelPtr IChannelConnection::GetChannel ( ) {
    struct IChannel * _result = 0;
    HRESULT _hr = get_Channel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChannelPtr(_result, false);
}

#pragma implementation_key(1075)
inline HRESULT IChannelConnection::GetDataValues1 ( long NumValues, VARIANT * Data ) {
    HRESULT _hr = raw_GetDataValues1(NumValues, Data);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1076)
inline HRESULT IChannelConnection::GetDataBlocks1 ( long NumBlocks, VARIANT * Data ) {
    HRESULT _hr = raw_GetDataBlocks1(NumBlocks, Data);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1077)
inline _variant_t IChannelConnection::GetTSValues ( long NumValues ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetTSValues(NumValues, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1078)
inline _variant_t IChannelConnection::GetTSBlocks ( long NumBlocks ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetTSBlocks(NumBlocks, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1079)
inline HRESULT IChannelConnection::GetTSValues1 ( long NumValues, VARIANT * Data ) {
    HRESULT _hr = raw_GetTSValues1(NumValues, Data);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1080)
inline HRESULT IChannelConnection::GetTSBlocks1 ( long NumBlocks, VARIANT * Data ) {
    HRESULT _hr = raw_GetTSBlocks1(NumBlocks, Data);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1081)
inline HRESULT IChannelConnection::Start ( ) {
    HRESULT _hr = raw_Start();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IChannelGroup2 wrapper method implementations
//

#pragma implementation_key(1082)
inline _bstr_t IChannelGroup2::GetIndexNameShort ( struct T_ChIndex Index ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetIndexNameShort(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IAOGroup wrapper method implementations
//

#pragma implementation_key(1083)
inline enum AOOperationMode IAOGroup::GetOperationMode ( ) {
    enum AOOperationMode _result;
    HRESULT _hr = get_OperationMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1084)
inline void IAOGroup::PutOperationMode ( enum AOOperationMode Value ) {
    HRESULT _hr = put_OperationMode(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1085)
inline long IAOGroup::GetSampleRate ( ) {
    long _result = 0;
    HRESULT _hr = get_SampleRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1086)
inline void IAOGroup::PutSampleRate ( long Value ) {
    HRESULT _hr = put_SampleRate(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1087)
inline float IAOGroup::GetStopTime ( ) {
    float _result = 0;
    HRESULT _hr = get_StopTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1088)
inline void IAOGroup::PutStopTime ( float Value ) {
    HRESULT _hr = put_StopTime(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1089)
inline float IAOGroup::GetStartTime ( ) {
    float _result = 0;
    HRESULT _hr = get_StartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1090)
inline void IAOGroup::PutStartTime ( float Value ) {
    HRESULT _hr = put_StartTime(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1091)
inline float IAOGroup::GetStartFreq ( ) {
    float _result = 0;
    HRESULT _hr = get_StartFreq(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1092)
inline void IAOGroup::PutStartFreq ( float Value ) {
    HRESULT _hr = put_StartFreq(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1093)
inline float IAOGroup::GetStopFreq ( ) {
    float _result = 0;
    HRESULT _hr = get_StopFreq(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1094)
inline void IAOGroup::PutStopFreq ( float Value ) {
    HRESULT _hr = put_StopFreq(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1095)
inline float IAOGroup::GetDeltaFreq ( ) {
    float _result = 0;
    HRESULT _hr = get_DeltaFreq(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1096)
inline void IAOGroup::PutDeltaFreq ( float Value ) {
    HRESULT _hr = put_DeltaFreq(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1097)
inline VARIANT_BOOL IAOGroup::GetLogSweep ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LogSweep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1098)
inline void IAOGroup::PutLogSweep ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_LogSweep(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1099)
inline enum AOSweepMode IAOGroup::GetSweepMode ( ) {
    enum AOSweepMode _result;
    HRESULT _hr = get_SweepMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1100)
inline void IAOGroup::PutSweepMode ( enum AOSweepMode Value ) {
    HRESULT _hr = put_SweepMode(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1101)
inline float IAOGroup::GetFreq ( ) {
    float _result = 0;
    HRESULT _hr = get_Freq(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1102)
inline void IAOGroup::PutFreq ( float Value ) {
    HRESULT _hr = put_Freq(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1103)
inline float IAOGroup::GetAmplChangeFactor ( ) {
    float _result = 0;
    HRESULT _hr = get_AmplChangeFactor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1104)
inline void IAOGroup::PutAmplChangeFactor ( float Value ) {
    HRESULT _hr = put_AmplChangeFactor(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1105)
inline float IAOGroup::GetDCChangeFactor ( ) {
    float _result = 0;
    HRESULT _hr = get_DCChangeFactor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1106)
inline void IAOGroup::PutDCChangeFactor ( float Value ) {
    HRESULT _hr = put_DCChangeFactor(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1107)
inline float IAOGroup::GetPhaseChangeFactor ( ) {
    float _result = 0;
    HRESULT _hr = get_PhaseChangeFactor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1108)
inline void IAOGroup::PutPhaseChangeFactor ( float Value ) {
    HRESULT _hr = put_PhaseChangeFactor(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1109)
inline float IAOGroup::GetFreqChangeFactor ( ) {
    float _result = 0;
    HRESULT _hr = get_FreqChangeFactor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1110)
inline void IAOGroup::PutFreqChangeFactor ( float Value ) {
    HRESULT _hr = put_FreqChangeFactor(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1111)
inline VARIANT_BOOL IAOGroup::GetShowInfoChannels ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowInfoChannels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1112)
inline void IAOGroup::PutShowInfoChannels ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_ShowInfoChannels(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1113)
inline VARIANT_BOOL IAOGroup::GetControlsClock ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ControlsClock(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1114)
inline IChannelListPtr IAOGroup::GetAOChannels ( ) {
    struct IChannelList * _result = 0;
    HRESULT _hr = get_AOChannels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChannelListPtr(_result, false);
}

//
// interface ITriggerCondition wrapper method implementations
//

#pragma implementation_key(1115)
inline long ITriggerCondition::GetMode ( ) {
    long _result = 0;
    HRESULT _hr = get_Mode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1116)
inline void ITriggerCondition::PutMode ( long Value ) {
    HRESULT _hr = put_Mode(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1117)
inline long ITriggerCondition::GetTrigType ( ) {
    long _result = 0;
    HRESULT _hr = get_TrigType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1118)
inline void ITriggerCondition::PutTrigType ( long Value ) {
    HRESULT _hr = put_TrigType(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1119)
inline long ITriggerCondition::GetDirection ( ) {
    long _result = 0;
    HRESULT _hr = get_Direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1120)
inline void ITriggerCondition::PutDirection ( long Value ) {
    HRESULT _hr = put_Direction(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1121)
inline long ITriggerCondition::GetTrigValue ( ) {
    long _result = 0;
    HRESULT _hr = get_TrigValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1122)
inline void ITriggerCondition::PutTrigValue ( long Value ) {
    HRESULT _hr = put_TrigValue(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1123)
inline float ITriggerCondition::GetLevel1 ( ) {
    float _result = 0;
    HRESULT _hr = get_Level1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1124)
inline void ITriggerCondition::PutLevel1 ( float Value ) {
    HRESULT _hr = put_Level1(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1125)
inline float ITriggerCondition::GetLevel2 ( ) {
    float _result = 0;
    HRESULT _hr = get_Level2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1126)
inline void ITriggerCondition::PutLevel2 ( float Value ) {
    HRESULT _hr = put_Level2(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1127)
inline IChannelListPtr ITriggerCondition::GetChannels ( ) {
    struct IChannelList * _result = 0;
    HRESULT _hr = get_Channels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChannelListPtr(_result, false);
}

#pragma implementation_key(1128)
inline HRESULT ITriggerCondition::AddChannel ( struct IChannel * Ch ) {
    HRESULT _hr = raw_AddChannel(Ch);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1129)
inline HRESULT ITriggerCondition::DeleteChannel ( long Index ) {
    HRESULT _hr = raw_DeleteChannel(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1130)
inline HRESULT ITriggerCondition::ClearChannels ( ) {
    HRESULT _hr = raw_ClearChannels();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1131)
inline long ITriggerCondition::GetDirection1 ( ) {
    long _result = 0;
    HRESULT _hr = get_Direction1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1132)
inline void ITriggerCondition::PutDirection1 ( long Value ) {
    HRESULT _hr = put_Direction1(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1133)
inline double ITriggerCondition::GetDeltaTime ( ) {
    double _result = 0;
    HRESULT _hr = get_DeltaTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1134)
inline void ITriggerCondition::PutDeltaTime ( double Value ) {
    HRESULT _hr = put_DeltaTime(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1135)
inline double ITriggerCondition::GetTimeValue ( ) {
    double _result = 0;
    HRESULT _hr = get_TimeValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1136)
inline void ITriggerCondition::PutTimeValue ( double Value ) {
    HRESULT _hr = put_TimeValue(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1137)
inline long ITriggerCondition::GetTimeUnit ( ) {
    long _result = 0;
    HRESULT _hr = get_TimeUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1138)
inline void ITriggerCondition::PutTimeUnit ( long Value ) {
    HRESULT _hr = put_TimeUnit(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1139)
inline long ITriggerCondition::GetTimeCond ( ) {
    long _result = 0;
    HRESULT _hr = get_TimeCond(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1140)
inline void ITriggerCondition::PutTimeCond ( long Value ) {
    HRESULT _hr = put_TimeCond(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1141)
inline long ITriggerCondition::GetTimeFormat ( ) {
    long _result = 0;
    HRESULT _hr = get_TimeFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1142)
inline void ITriggerCondition::PutTimeFormat ( long Value ) {
    HRESULT _hr = put_TimeFormat(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ITriggerCondList wrapper method implementations
//

#pragma implementation_key(1143)
inline long ITriggerCondList::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1144)
inline IUnknownPtr ITriggerCondList::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1145)
inline ITriggerConditionPtr ITriggerCondList::GetItem ( long Index ) {
    struct ITriggerCondition * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITriggerConditionPtr(_result, false);
}

#pragma implementation_key(1146)
inline ITriggerConditionPtr ITriggerCondList::Add ( ) {
    struct ITriggerCondition * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITriggerConditionPtr(_result, false);
}

#pragma implementation_key(1147)
inline HRESULT ITriggerCondList::Remove ( long Ind ) {
    HRESULT _hr = raw_Remove(Ind);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ITrig wrapper method implementations
//

#pragma implementation_key(1148)
inline ITriggerCondListPtr ITrig::GetOrList ( ) {
    struct ITriggerCondList * _result = 0;
    HRESULT _hr = get_OrList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITriggerCondListPtr(_result, false);
}

#pragma implementation_key(1149)
inline ITriggerCondListPtr ITrig::GetNotOrList ( ) {
    struct ITriggerCondList * _result = 0;
    HRESULT _hr = get_NotOrList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITriggerCondListPtr(_result, false);
}

#pragma implementation_key(1150)
inline long ITrig::GetTrigIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_TrigIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1151)
inline HRESULT ITrig::GetTrigIndexEx ( long * CondIndex, long * ChIndex, struct IChannel * * Ch ) {
    HRESULT _hr = raw_GetTrigIndexEx(CondIndex, ChIndex, Ch);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ITrigger wrapper method implementations
//

#pragma implementation_key(1152)
inline VARIANT_BOOL ITrigger::GetPreTimeUsed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PreTimeUsed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1153)
inline void ITrigger::PutPreTimeUsed ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_PreTimeUsed(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1154)
inline VARIANT_BOOL ITrigger::GetPostTimeUsed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PostTimeUsed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1155)
inline void ITrigger::PutPostTimeUsed ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_PostTimeUsed(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1156)
inline float ITrigger::GetPreTime ( ) {
    float _result = 0;
    HRESULT _hr = get_PreTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1157)
inline void ITrigger::PutPreTime ( float Value ) {
    HRESULT _hr = put_PreTime(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1158)
inline float ITrigger::GetPostTime ( ) {
    float _result = 0;
    HRESULT _hr = get_PostTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1159)
inline void ITrigger::PutPostTime ( float Value ) {
    HRESULT _hr = put_PostTime(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1160)
inline ITrigPtr ITrigger::GetStartTrig ( ) {
    struct ITrig * _result = 0;
    HRESULT _hr = get_StartTrig(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITrigPtr(_result, false);
}

#pragma implementation_key(1161)
inline ITrigPtr ITrigger::GetStopTrig ( ) {
    struct ITrig * _result = 0;
    HRESULT _hr = get_StopTrig(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITrigPtr(_result, false);
}

#pragma implementation_key(1162)
inline VARIANT_BOOL ITrigger::GetHoldoffTimeUsed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HoldoffTimeUsed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1163)
inline void ITrigger::PutHoldoffTimeUsed ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_HoldoffTimeUsed(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1164)
inline float ITrigger::GetHoldoffTime ( ) {
    float _result = 0;
    HRESULT _hr = get_HoldoffTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1165)
inline void ITrigger::PutHoldoffTime ( float Value ) {
    HRESULT _hr = put_HoldoffTime(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1166)
inline VARIANT_BOOL ITrigger::GetPostTimeExtensionUsed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PostTimeExtensionUsed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1167)
inline void ITrigger::PutPostTimeExtensionUsed ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_PostTimeExtensionUsed(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAlarmCond wrapper method implementations
//

#pragma implementation_key(1168)
inline ITrigPtr IAlarmCond::GetTrigger ( ) {
    struct ITrig * _result = 0;
    HRESULT _hr = get_Trigger(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITrigPtr(_result, false);
}

#pragma implementation_key(1169)
inline ITrigPtr IAlarmCond::GetStopTrigger ( ) {
    struct ITrig * _result = 0;
    HRESULT _hr = get_StopTrigger(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITrigPtr(_result, false);
}

#pragma implementation_key(1170)
inline long IAlarmCond::GetIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1171)
inline long IAlarmCond::GetStopOption ( ) {
    long _result = 0;
    HRESULT _hr = get_StopOption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1172)
inline void IAlarmCond::PutStopOption ( long Value ) {
    HRESULT _hr = put_StopOption(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1173)
inline float IAlarmCond::GetStopTime ( ) {
    float _result = 0;
    HRESULT _hr = get_StopTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1174)
inline void IAlarmCond::PutStopTime ( float Value ) {
    HRESULT _hr = put_StopTime(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1175)
inline VARIANT_BOOL IAlarmCond::GetAvail ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Avail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1176)
inline VARIANT_BOOL IAlarmCond::GetStatus ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Status(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1177)
inline HRESULT IAlarmCond::EndAlarm ( ) {
    HRESULT _hr = raw_EndAlarm();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1178)
inline _bstr_t IAlarmCond::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1179)
inline _bstr_t IAlarmCond::GetCustomName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CustomName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1180)
inline void IAlarmCond::PutCustomName ( _bstr_t Value ) {
    HRESULT _hr = put_CustomName(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAlarms wrapper method implementations
//

#pragma implementation_key(1181)
inline long IAlarms::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1182)
inline long IAlarms::GetActiveCount ( ) {
    long _result = 0;
    HRESULT _hr = get_ActiveCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1183)
inline IAlarmCondPtr IAlarms::GetItem ( long I ) {
    struct IAlarmCond * _result = 0;
    HRESULT _hr = get_Item(I, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAlarmCondPtr(_result, false);
}

#pragma implementation_key(1184)
inline IAlarmCondPtr IAlarms::GetActiveItem ( long I ) {
    struct IAlarmCond * _result = 0;
    HRESULT _hr = get_ActiveItem(I, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAlarmCondPtr(_result, false);
}

#pragma implementation_key(1185)
inline IAlarmCondPtr IAlarms::Add ( ) {
    struct IAlarmCond * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAlarmCondPtr(_result, false);
}

#pragma implementation_key(1186)
inline HRESULT IAlarms::Remove ( long Index ) {
    HRESULT _hr = raw_Remove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IUserInterface wrapper method implementations
//

#pragma implementation_key(1187)
inline HRESULT IUserInterface::ShowTrigCondSetup ( struct ITriggerCondition * Cond ) {
    HRESULT _hr = raw_ShowTrigCondSetup(Cond);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1188)
inline HRESULT IUserInterface::ChangeSetupScreen ( _bstr_t ScreenName ) {
    HRESULT _hr = raw_ChangeSetupScreen(ScreenName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IMathItem wrapper method implementations
//

#pragma implementation_key(1189)
inline IChannelListPtr IMathItem::GetInputChannels ( ) {
    struct IChannelList * _result = 0;
    HRESULT _hr = get_InputChannels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChannelListPtr(_result, false);
}

#pragma implementation_key(1190)
inline IChannelListPtr IMathItem::GetOutputChannels ( ) {
    struct IChannelList * _result = 0;
    HRESULT _hr = get_OutputChannels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChannelListPtr(_result, false);
}

#pragma implementation_key(1191)
inline VARIANT_BOOL IMathItem::GetLastStep ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LastStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IChannelListEx wrapper method implementations
//

#pragma implementation_key(1192)
inline HRESULT IChannelListEx::AddCh ( struct IChannel * Ch ) {
    HRESULT _hr = raw_AddCh(Ch);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1193)
inline HRESULT IChannelListEx::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1194)
inline HRESULT IChannelListEx::SetCh ( long Index, struct IChannel * Ch ) {
    HRESULT _hr = raw_SetCh(Index, Ch);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1195)
inline long IChannelListEx::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1196)
inline IChannelPtr IChannelListEx::GetItem ( long Index ) {
    struct IChannel * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChannelPtr(_result, false);
}

#pragma implementation_key(1197)
inline HRESULT IChannelListEx::DeleteCh ( long Index ) {
    HRESULT _hr = raw_DeleteCh(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IImportGroup wrapper method implementations
//

#pragma implementation_key(1198)
inline IChannelPtr IImportGroup::MountChannel ( ) {
    struct IChannel * _result = 0;
    HRESULT _hr = raw_MountChannel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChannelPtr(_result, false);
}

//
// interface ICNTGroup wrapper method implementations
//

#pragma implementation_key(1199)
inline long ICNTGroup::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1200)
inline IUnknownPtr ICNTGroup::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1201)
inline IChannelPtr ICNTGroup::GetItem ( long Index ) {
    struct IChannel * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChannelPtr(_result, false);
}

//
// interface ICntChannel wrapper method implementations
//

#pragma implementation_key(1202)
inline long ICntChannel::GetCntMode ( ) {
    long _result = 0;
    HRESULT _hr = get_CntMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1203)
inline long ICntChannel::GetCntFilter ( ) {
    long _result = 0;
    HRESULT _hr = get_CntFilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1204)
inline long ICntChannel::GetBaseMode ( ) {
    long _result = 0;
    HRESULT _hr = get_BaseMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1205)
inline IChannelPtr ICntChannel::GetCardChannel0 ( ) {
    struct IChannel * _result = 0;
    HRESULT _hr = get_CardChannel0(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChannelPtr(_result, false);
}

#pragma implementation_key(1206)
inline IChannelPtr ICntChannel::GetCardChannel1 ( ) {
    struct IChannel * _result = 0;
    HRESULT _hr = get_CardChannel1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChannelPtr(_result, false);
}

#pragma implementation_key(1207)
inline ICntChannelPtr ICntChannel::GetCntPair ( ) {
    struct ICntChannel * _result = 0;
    HRESULT _hr = get_CntPair(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICntChannelPtr(_result, false);
}

#pragma implementation_key(1208)
inline long ICntChannel::GetCntUpDownMode ( ) {
    long _result = 0;
    HRESULT _hr = get_CntUpDownMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1209)
inline long ICntChannel::GetCntNewValueUpdateMode ( ) {
    long _result = 0;
    HRESULT _hr = get_CntNewValueUpdateMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1210)
inline IDigitalTrigLevelPtr ICntChannel::GetTrigLevels ( long Index ) {
    struct IDigitalTrigLevel * _result = 0;
    HRESULT _hr = get_TrigLevels(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDigitalTrigLevelPtr(_result, false);
}

#pragma implementation_key(1211)
inline long ICntChannel::GetCntSource ( ) {
    long _result = 0;
    HRESULT _hr = get_CntSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1212)
inline VARIANT_BOOL ICntChannel::GetCntSourceInv ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CntSourceInv(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1213)
inline IChannelPtr ICntChannel::GetDIChannels ( long Index ) {
    struct IChannel * _result = 0;
    HRESULT _hr = get_DIChannels(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChannelPtr(_result, false);
}

#pragma implementation_key(1214)
inline VARIANT_BOOL ICntChannel::GetCntResetOnStartMeasure ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CntResetOnStartMeasure(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1215)
inline VARIANT_BOOL ICntChannel::GetAdvCntMode ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AdvCntMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1216)
inline VARIANT_BOOL ICntChannel::GetCntEventWithZero ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CntEventWithZero(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1217)
inline VARIANT_BOOL ICntChannel::GetCntDoManualReset ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CntDoManualReset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1218)
inline long ICntChannel::GetCntGate ( ) {
    long _result = 0;
    HRESULT _hr = get_CntGate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1219)
inline VARIANT_BOOL ICntChannel::GetCntGateInv ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CntGateInv(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1220)
inline long ICntChannel::GetCntAux ( ) {
    long _result = 0;
    HRESULT _hr = get_CntAux(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1221)
inline VARIANT_BOOL ICntChannel::GetCntAuxInv ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CntAuxInv(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1222)
inline VARIANT_BOOL ICntChannel::GetCanAutoCalculate ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CanAutoCalculate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1223)
inline long ICntChannel::GetCntEncoderMode ( ) {
    long _result = 0;
    HRESULT _hr = get_CntEncoderMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1224)
inline VARIANT_BOOL ICntChannel::GetCntEncoderZero ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CntEncoderZero(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1225)
inline VARIANT_BOOL ICntChannel::GetCntSignalZero ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CntSignalZero(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1226)
inline VARIANT_BOOL ICntChannel::GetTrigLevelsCombined ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TrigLevelsCombined(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1227)
inline VARIANT_BOOL ICntChannel::GetSetupShown ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SetupShown(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ITrigInfo wrapper method implementations
//

#pragma implementation_key(1228)
inline IChannelPtr ITrigInfo::GetChannel ( ) {
    struct IChannel * _result = 0;
    HRESULT _hr = get_Channel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChannelPtr(_result, false);
}

#pragma implementation_key(1229)
inline long ITrigInfo::GetMode ( ) {
    long _result = 0;
    HRESULT _hr = get_Mode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1230)
inline long ITrigInfo::GetDirection ( ) {
    long _result = 0;
    HRESULT _hr = get_Direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1231)
inline double ITrigInfo::GetLevel1 ( ) {
    double _result = 0;
    HRESULT _hr = get_Level1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1232)
inline double ITrigInfo::GetLevel2 ( ) {
    double _result = 0;
    HRESULT _hr = get_Level2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1233)
inline long ITrigInfo::GetTrigValue ( ) {
    long _result = 0;
    HRESULT _hr = get_TrigValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1234)
inline double ITrigInfo::GetDeltaTime ( ) {
    double _result = 0;
    HRESULT _hr = get_DeltaTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1235)
inline long ITrigInfo::GetDirection1 ( ) {
    long _result = 0;
    HRESULT _hr = get_Direction1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1236)
inline VARIANT_BOOL ITrigInfo::GetManual ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Manual(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IEvent wrapper method implementations
//

#pragma implementation_key(1237)
inline long IEvent::GetType_ ( ) {
    long _result = 0;
    HRESULT _hr = get_Type_(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1238)
inline _variant_t IEvent::GetData ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Data(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1239)
inline long IEvent::GetPosMid ( ) {
    long _result = 0;
    HRESULT _hr = get_PosMid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1240)
inline long IEvent::GetPosDir ( ) {
    long _result = 0;
    HRESULT _hr = get_PosDir(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1241)
inline double IEvent::GetTimeStamp ( ) {
    double _result = 0;
    HRESULT _hr = get_TimeStamp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1242)
inline ITrigInfoPtr IEvent::GetTrigInfo ( ) {
    struct ITrigInfo * _result = 0;
    HRESULT _hr = get_TrigInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITrigInfoPtr(_result, false);
}

//
// interface IEventList wrapper method implementations
//

#pragma implementation_key(1243)
inline long IEventList::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1244)
inline IUnknownPtr IEventList::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1245)
inline IEventPtr IEventList::GetItem ( long Index ) {
    struct IEvent * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEventPtr(_result, false);
}

//
// interface IDisplayFrameTemplate wrapper method implementations
//

#pragma implementation_key(1246)
inline _bstr_t IDisplayFrameTemplate::GetGroupName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_GroupName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1247)
inline void IDisplayFrameTemplate::PutGroupName ( _bstr_t Value ) {
    HRESULT _hr = put_GroupName(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1248)
inline _bstr_t IDisplayFrameTemplate::GetTemplateName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TemplateName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1249)
inline void IDisplayFrameTemplate::PutTemplateName ( _bstr_t Value ) {
    HRESULT _hr = put_TemplateName(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1250)
inline _variant_t IDisplayFrameTemplate::GetSetupDOMDoc ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_SetupDOMDoc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1251)
inline _variant_t IDisplayFrameTemplate::CreateCustomGroupAndControl ( _bstr_t CustomVCGuid, _bstr_t GroupName, _bstr_t ControlName, long GroupInd, float Left, float Width, float Top, float Height ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CreateCustomGroupAndControl(CustomVCGuid, GroupName, ControlName, GroupInd, Left, Width, Top, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1252)
inline _variant_t IDisplayFrameTemplate::CreateGroupAndControl ( _bstr_t GroupName, _bstr_t ControlName, long GroupInd, float Left, float Width, float Top, float Height ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CreateGroupAndControl(GroupName, ControlName, GroupInd, Left, Width, Top, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1253)
inline HRESULT IDisplayFrameTemplate::AddChannel ( const _variant_t & GraphNode, long Ind, struct IChannel * Ch ) {
    HRESULT _hr = raw_AddChannel(GraphNode, Ind, Ch);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1254)
inline HRESULT IDisplayFrameTemplate::AddItemChannel ( const _variant_t & GraphNode, long Ind, struct IChannel * Ch, long ItemInd ) {
    HRESULT _hr = raw_AddItemChannel(GraphNode, Ind, Ch, ItemInd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1255)
inline VARIANT_BOOL IDisplayFrameTemplate::GetDoUpdateFromXML ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DoUpdateFromXML(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1256)
inline void IDisplayFrameTemplate::PutDoUpdateFromXML ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_DoUpdateFromXML(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IDisplayFrameTemplates wrapper method implementations
//

#pragma implementation_key(1257)
inline long IDisplayFrameTemplates::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1258)
inline IUnknownPtr IDisplayFrameTemplates::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1259)
inline IDisplayFrameTemplatePtr IDisplayFrameTemplates::GetItem ( long Index ) {
    struct IDisplayFrameTemplate * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDisplayFrameTemplatePtr(_result, false);
}

#pragma implementation_key(1260)
inline IDisplayFrameTemplatePtr IDisplayFrameTemplates::Add ( ) {
    struct IDisplayFrameTemplate * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDisplayFrameTemplatePtr(_result, false);
}

#pragma implementation_key(1261)
inline HRESULT IDisplayFrameTemplates::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IDisplayTemplate wrapper method implementations
//

#pragma implementation_key(1262)
inline IDisplayFrameTemplatesPtr IDisplayTemplate::GetDisplayFrameTemplates ( ) {
    struct IDisplayFrameTemplates * _result = 0;
    HRESULT _hr = get_DisplayFrameTemplates(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDisplayFrameTemplatesPtr(_result, false);
}

#pragma implementation_key(1263)
inline long IDisplayTemplate::GetDW ( ) {
    long _result = 0;
    HRESULT _hr = get_DW(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1264)
inline long IDisplayTemplate::GetDH ( ) {
    long _result = 0;
    HRESULT _hr = get_DH(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IIndexChanger wrapper method implementations
//

#pragma implementation_key(1265)
inline HRESULT IIndexChanger::ChangePluginChIndex ( _bstr_t Guid, const _variant_t & OldIndex, const _variant_t & NewIndex ) {
    HRESULT _hr = raw_ChangePluginChIndex(Guid, OldIndex, NewIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1266)
inline HRESULT IIndexChanger::ChangePluginChIndex1 ( _bstr_t Guid, struct IChannel * Ch, const _variant_t & NewIndex ) {
    HRESULT _hr = raw_ChangePluginChIndex1(Guid, Ch, NewIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAxisViewInfo wrapper method implementations
//

#pragma implementation_key(1267)
inline long IAxisViewInfo::GetAxisViewType ( ) {
    long _result = 0;
    HRESULT _hr = get_AxisViewType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1268)
inline void IAxisViewInfo::PutAxisViewType ( long Value ) {
    HRESULT _hr = put_AxisViewType(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1269)
inline VARIANT_BOOL IAxisViewInfo::GetReverseAxis ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ReverseAxis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1270)
inline void IAxisViewInfo::PutReverseAxis ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_ReverseAxis(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1271)
inline IChannelPtr IAxisViewInfo::GetCursorChannel ( ) {
    struct IChannel * _result = 0;
    HRESULT _hr = get_CursorChannel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChannelPtr(_result, false);
}

#pragma implementation_key(1272)
inline void IAxisViewInfo::PutCursorChannel ( struct IChannel * Value ) {
    HRESULT _hr = put_CursorChannel(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAxisDef wrapper method implementations
//

#pragma implementation_key(1273)
inline enum TAxisType IAxisDef::GetAxisType ( ) {
    enum TAxisType _result;
    HRESULT _hr = get_AxisType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1274)
inline void IAxisDef::PutAxisType ( enum TAxisType Value ) {
    HRESULT _hr = put_AxisType(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1275)
inline double IAxisDef::GetStartValue ( ) {
    double _result = 0;
    HRESULT _hr = get_StartValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1276)
inline void IAxisDef::PutStartValue ( double Value ) {
    HRESULT _hr = put_StartValue(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1277)
inline double IAxisDef::GetStepValue ( ) {
    double _result = 0;
    HRESULT _hr = get_StepValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1278)
inline void IAxisDef::PutStepValue ( double Value ) {
    HRESULT _hr = put_StepValue(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1279)
inline double IAxisDef::GetFloatValues ( long Index ) {
    double _result = 0;
    HRESULT _hr = get_FloatValues(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1280)
inline void IAxisDef::PutFloatValues ( long Index, double Value ) {
    HRESULT _hr = put_FloatValues(Index, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1281)
inline _bstr_t IAxisDef::GetStringValues ( long Index ) {
    BSTR _result = 0;
    HRESULT _hr = get_StringValues(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1282)
inline void IAxisDef::PutStringValues ( long Index, _bstr_t Value ) {
    HRESULT _hr = put_StringValues(Index, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1283)
inline long IAxisDef::GetSize ( ) {
    long _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1284)
inline _bstr_t IAxisDef::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1285)
inline void IAxisDef::PutName ( _bstr_t Value ) {
    HRESULT _hr = put_Name(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1286)
inline _bstr_t IAxisDef::Get_Unit ( ) {
    BSTR _result = 0;
    HRESULT _hr = get__Unit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1287)
inline void IAxisDef::Put_Unit ( _bstr_t Value ) {
    HRESULT _hr = put__Unit(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1288)
inline long IAxisDef::GetPrecision ( ) {
    long _result = 0;
    HRESULT _hr = get_Precision(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1289)
inline void IAxisDef::PutPrecision ( long Value ) {
    HRESULT _hr = put_Precision(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1290)
inline IChannelPtr IAxisDef::GetCursorChannel ( ) {
    struct IChannel * _result = 0;
    HRESULT _hr = get_CursorChannel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChannelPtr(_result, false);
}

#pragma implementation_key(1291)
inline void IAxisDef::PutCursorChannel ( struct IChannel * Value ) {
    HRESULT _hr = put_CursorChannel(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1292)
inline IAxisViewInfoPtr IAxisDef::GetAxisViewInfo ( ) {
    struct IAxisViewInfo * _result = 0;
    HRESULT _hr = get_AxisViewInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAxisViewInfoPtr(_result, false);
}

//
// interface IArrayInfo wrapper method implementations
//

#pragma implementation_key(1293)
inline IAxisDefPtr IArrayInfo::GetAxisDef ( long Index ) {
    struct IAxisDef * _result = 0;
    HRESULT _hr = get_AxisDef(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAxisDefPtr(_result, false);
}

#pragma implementation_key(1294)
inline long IArrayInfo::GetDimCount ( ) {
    long _result = 0;
    HRESULT _hr = get_DimCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1295)
inline void IArrayInfo::PutDimCount ( long Value ) {
    HRESULT _hr = put_DimCount(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1296)
inline long IArrayInfo::GetDimSizes ( long Index ) {
    long _result = 0;
    HRESULT _hr = get_DimSizes(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1297)
inline void IArrayInfo::PutDimSizes ( long Index, long Value ) {
    HRESULT _hr = put_DimSizes(Index, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1298)
inline HRESULT IArrayInfo::Init ( ) {
    HRESULT _hr = raw_Init();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1299)
inline VARIANT_BOOL IArrayInfo::GetItemChannels ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ItemChannels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1300)
inline _bstr_t IArrayInfo::GetNameArr ( long Ind ) {
    BSTR _result = 0;
    HRESULT _hr = get_NameArr(Ind, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1301)
inline void IArrayInfo::PutNameArr ( long Ind, _bstr_t Value ) {
    HRESULT _hr = put_NameArr(Ind, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1302)
inline long IArrayInfo::GetColorArr ( long Ind ) {
    long _result = 0;
    HRESULT _hr = get_ColorArr(Ind, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1303)
inline void IArrayInfo::PutColorArr ( long Ind, long Value ) {
    HRESULT _hr = put_ColorArr(Ind, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1304)
inline ISyncSourcePtr IArrayInfo::GetSyncSource ( ) {
    struct ISyncSource * _result = 0;
    HRESULT _hr = get_SyncSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISyncSourcePtr(_result, false);
}

#pragma implementation_key(1305)
inline void IArrayInfo::PutItemChannels ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_ItemChannels(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IMarkerOutput wrapper method implementations
//

#pragma implementation_key(1306)
inline IChannelPtr IMarkerOutput::GetChannel ( ) {
    struct IChannel * _result = 0;
    HRESULT _hr = get_Channel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChannelPtr(_result, false);
}

#pragma implementation_key(1307)
inline void IMarkerOutput::PutChannel ( struct IChannel * Value ) {
    HRESULT _hr = put_Channel(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IMarkerOwner wrapper method implementations
//

#pragma implementation_key(1308)
inline enum IMarkerChannelType IMarkerOwner::GetChannelType ( ) {
    enum IMarkerChannelType _result;
    HRESULT _hr = get_ChannelType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1309)
inline void IMarkerOwner::PutChannelType ( enum IMarkerChannelType Value ) {
    HRESULT _hr = put_ChannelType(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1310)
inline IChannelPtr IMarkerOwner::GetOwner ( ) {
    struct IChannel * _result = 0;
    HRESULT _hr = get_Owner(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChannelPtr(_result, false);
}

#pragma implementation_key(1311)
inline void IMarkerOwner::PutOwner ( struct IChannel * Value ) {
    HRESULT _hr = put_Owner(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IProcessingMarker wrapper method implementations
//

#pragma implementation_key(1312)
inline IMarkerOwnerPtr IProcessingMarker::GetMarkerOwner ( ) {
    struct IMarkerOwner * _result = 0;
    HRESULT _hr = get_MarkerOwner(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMarkerOwnerPtr(_result, false);
}

#pragma implementation_key(1313)
inline void IProcessingMarker::PutMarkerOwner ( struct IMarkerOwner * Value ) {
    HRESULT _hr = put_MarkerOwner(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1314)
inline long IProcessingMarker::GetInputCount ( ) {
    long _result = 0;
    HRESULT _hr = get_InputCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1315)
inline void IProcessingMarker::PutInputCount ( long Value ) {
    HRESULT _hr = put_InputCount(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1316)
inline long IProcessingMarker::GetOutputCount ( ) {
    long _result = 0;
    HRESULT _hr = get_OutputCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1317)
inline void IProcessingMarker::PutOutputCount ( long Value ) {
    HRESULT _hr = put_OutputCount(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1318)
inline IMarkerInputPtr IProcessingMarker::GetMarkerInput ( long Index ) {
    struct IMarkerInput * _result = 0;
    HRESULT _hr = raw_GetMarkerInput(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMarkerInputPtr(_result, false);
}

#pragma implementation_key(1319)
inline IMarkerOutputPtr IProcessingMarker::GetMarkerOutput ( long Index ) {
    struct IMarkerOutput * _result = 0;
    HRESULT _hr = raw_GetMarkerOutput(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMarkerOutputPtr(_result, false);
}

#pragma implementation_key(1320)
inline HRESULT IProcessingMarker::SetMarkerInput ( long Index, struct IMarkerInput * Value ) {
    HRESULT _hr = raw_SetMarkerInput(Index, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1321)
inline HRESULT IProcessingMarker::SetMarkerOutput ( long Index, struct IMarkerOutput * Value ) {
    HRESULT _hr = raw_SetMarkerOutput(Index, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1322)
inline IMarkerObjectsListPtr IProcessingMarker::GetMarkerObjects ( ) {
    struct IMarkerObjectsList * _result = 0;
    HRESULT _hr = get_MarkerObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMarkerObjectsListPtr(_result, false);
}

#pragma implementation_key(1323)
inline HRESULT IProcessingMarker::ConnectInput ( long Index, enum IMarkerValueType Value ) {
    HRESULT _hr = raw_ConnectInput(Index, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1324)
inline HRESULT IProcessingMarker::ConnectOutput ( long Index, enum IMarkerValueType Value ) {
    HRESULT _hr = raw_ConnectOutput(Index, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1325)
inline IMarkerObjectsListPtr IProcessingMarker::GetMarkerOutputs ( ) {
    struct IMarkerObjectsList * _result = 0;
    HRESULT _hr = get_MarkerOutputs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMarkerObjectsListPtr(_result, false);
}

#pragma implementation_key(1326)
inline IMarkerObjectsListPtr IProcessingMarker::GetMarkerInputs ( ) {
    struct IMarkerObjectsList * _result = 0;
    HRESULT _hr = get_MarkerInputs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMarkerObjectsListPtr(_result, false);
}

#pragma implementation_key(1327)
inline HRESULT IProcessingMarker::DisconnectInputs ( ) {
    HRESULT _hr = raw_DisconnectInputs();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1328)
inline HRESULT IProcessingMarker::DisconnectOutputs ( ) {
    HRESULT _hr = raw_DisconnectOutputs();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1329)
inline IMarkerObjectPtr IProcessingMarker::ConnectInputEx ( enum IMarkerValueType Value ) {
    struct IMarkerObject * _result = 0;
    HRESULT _hr = raw_ConnectInputEx(Value, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMarkerObjectPtr(_result, false);
}

#pragma implementation_key(1330)
inline IMarkerObjectPtr IProcessingMarker::ConnectOutputEx ( enum IMarkerValueType Value ) {
    struct IMarkerObject * _result = 0;
    HRESULT _hr = raw_ConnectOutputEx(Value, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMarkerObjectPtr(_result, false);
}

#pragma implementation_key(1331)
inline HRESULT IProcessingMarker::CreateGroup ( ) {
    HRESULT _hr = raw_CreateGroup();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1332)
inline VARIANT_BOOL IProcessingMarker::HasStyle ( long Index, long Style ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_HasStyle(Index, Style, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1333)
inline HRESULT IProcessingMarker::ClearGroups ( ) {
    HRESULT _hr = raw_ClearGroups();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1334)
inline HRESULT IProcessingMarker::AddGroupStyle ( long Index, long Style ) {
    HRESULT _hr = raw_AddGroupStyle(Index, Style);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1335)
inline long IProcessingMarker::GetGroupColor ( long Index ) {
    long _result = 0;
    HRESULT _hr = get_GroupColor(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1336)
inline void IProcessingMarker::PutGroupColor ( long Index, long Value ) {
    HRESULT _hr = put_GroupColor(Index, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1337)
inline VARIANT_BOOL IProcessingMarker::GetGroupVisible ( long Index ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_GroupVisible(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1338)
inline void IProcessingMarker::PutGroupVisible ( long Index, VARIANT_BOOL Value ) {
    HRESULT _hr = put_GroupVisible(Index, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1339)
inline HRESULT IProcessingMarker::AddGroupMarkerInput ( long Index, struct IMarkerInput * Value ) {
    HRESULT _hr = raw_AddGroupMarkerInput(Index, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1340)
inline HRESULT IProcessingMarker::AddGroupMarkerOutput ( long Index, struct IMarkerOutput * Value ) {
    HRESULT _hr = raw_AddGroupMarkerOutput(Index, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1341)
inline IMarkerObjectsListPtr IProcessingMarker::GetGroupMarkerInputs ( long Index ) {
    struct IMarkerObjectsList * _result = 0;
    HRESULT _hr = get_GroupMarkerInputs(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMarkerObjectsListPtr(_result, false);
}

#pragma implementation_key(1342)
inline IMarkerObjectsListPtr IProcessingMarker::GetGroupMarkerOutputs ( long Index ) {
    struct IMarkerObjectsList * _result = 0;
    HRESULT _hr = get_GroupMarkerOutputs(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMarkerObjectsListPtr(_result, false);
}

#pragma implementation_key(1343)
inline VARIANT_BOOL IProcessingMarker::GetGroupAlwaysDrawInputs ( long Index ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_GroupAlwaysDrawInputs(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1344)
inline void IProcessingMarker::PutGroupAlwaysDrawInputs ( long Index, VARIANT_BOOL Value ) {
    HRESULT _hr = put_GroupAlwaysDrawInputs(Index, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1345)
inline VARIANT_BOOL IProcessingMarker::GetGroupWaitForMouseInput ( long Index ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_GroupWaitForMouseInput(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1346)
inline void IProcessingMarker::PutGroupWaitForMouseInput ( long Index, VARIANT_BOOL Value ) {
    HRESULT _hr = put_GroupWaitForMouseInput(Index, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1347)
inline VARIANT_BOOL IProcessingMarker::GetGroupHasOwnColor ( long Index ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_GroupHasOwnColor(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1348)
inline void IProcessingMarker::PutGroupHasOwnColor ( long Index, VARIANT_BOOL Value ) {
    HRESULT _hr = put_GroupHasOwnColor(Index, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1349)
inline HRESULT IProcessingMarker::SetMarkerProps ( const _variant_t & Value ) {
    HRESULT _hr = raw_SetMarkerProps(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1350)
inline HRESULT IProcessingMarker::AddGroupName ( long Index, _bstr_t Value ) {
    HRESULT _hr = raw_AddGroupName(Index, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IProcessingMarkerList wrapper method implementations
//

#pragma implementation_key(1351)
inline long IProcessingMarkerList::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1352)
inline IProcessingMarkerPtr IProcessingMarkerList::GetItems ( long Index ) {
    struct IProcessingMarker * _result = 0;
    HRESULT _hr = get_Items(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IProcessingMarkerPtr(_result, false);
}

#pragma implementation_key(1353)
inline void IProcessingMarkerList::PutItems ( long Index, struct IProcessingMarker * Value ) {
    HRESULT _hr = put_Items(Index, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1354)
inline HRESULT IProcessingMarkerList::Add ( struct IProcessingMarker * Value ) {
    HRESULT _hr = raw_Add(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1355)
inline long IProcessingMarkerList::Remove ( struct IProcessingMarker * Value ) {
    long _result = 0;
    HRESULT _hr = raw_Remove(Value, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1356)
inline HRESULT IProcessingMarkerList::Insert ( long Index, struct IProcessingMarker * Value ) {
    HRESULT _hr = raw_Insert(Index, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1357)
inline HRESULT IProcessingMarkerList::Delete ( long Index ) {
    HRESULT _hr = raw_Delete(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1358)
inline HRESULT IProcessingMarkerList::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IInputCh wrapper method implementations
//

#pragma implementation_key(1359)
inline IChannelPtr IInputCh::GetCh ( ) {
    struct IChannel * _result = 0;
    HRESULT _hr = get_Ch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChannelPtr(_result, false);
}

#pragma implementation_key(1360)
inline void IInputCh::PutCh ( struct IChannel * Value ) {
    HRESULT _hr = put_Ch(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1361)
inline long IInputCh::GetInd ( ) {
    long _result = 0;
    HRESULT _hr = get_Ind(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1362)
inline void IInputCh::PutInd ( long Value ) {
    HRESULT _hr = put_Ind(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1363)
inline long IInputCh::GetBufInd ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetBufInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ICppResamplerEngine wrapper method implementations
//

#pragma implementation_key(1364)
inline long ICppResamplerEngine::GetSamplingRate ( ) {
    long _result = 0;
    HRESULT _hr = get_SamplingRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1365)
inline void ICppResamplerEngine::PutSamplingRate ( long Value ) {
    HRESULT _hr = put_SamplingRate(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1366)
inline long ICppResamplerEngine::GetBlockSizeInSamples ( ) {
    long _result = 0;
    HRESULT _hr = get_BlockSizeInSamples(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1367)
inline void ICppResamplerEngine::PutBlockSizeInSamples ( long Value ) {
    HRESULT _hr = put_BlockSizeInSamples(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1368)
inline long ICppResamplerEngine::GetPastSamplesRequiredForCalculation ( ) {
    long _result = 0;
    HRESULT _hr = get_PastSamplesRequiredForCalculation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1369)
inline void ICppResamplerEngine::PutPastSamplesRequiredForCalculation ( long Value ) {
    HRESULT _hr = put_PastSamplesRequiredForCalculation(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1370)
inline long ICppResamplerEngine::GetFutureSamplesRequiredForCalculation ( ) {
    long _result = 0;
    HRESULT _hr = get_FutureSamplesRequiredForCalculation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1371)
inline void ICppResamplerEngine::PutFutureSamplesRequiredForCalculation ( long Value ) {
    HRESULT _hr = put_FutureSamplesRequiredForCalculation(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1372)
inline long ICppResamplerEngine::GetResamplerBase ( ) {
    long _result = 0;
    HRESULT _hr = get_ResamplerBase(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1373)
inline void ICppResamplerEngine::PutResamplerBase ( long Value ) {
    HRESULT _hr = put_ResamplerBase(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1374)
inline long ICppResamplerEngine::GetResamplerBlockType ( ) {
    long _result = 0;
    HRESULT _hr = get_ResamplerBlockType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1375)
inline void ICppResamplerEngine::PutResamplerBlockType ( long Value ) {
    HRESULT _hr = put_ResamplerBlockType(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1376)
inline HRESULT ICppResamplerEngine::SetMasterChannel ( struct IChannel * Ch ) {
    HRESULT _hr = raw_SetMasterChannel(Ch);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1377)
inline VARIANT_BOOL ICppResamplerEngine::GetIsOldMode ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsOldMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1378)
inline void ICppResamplerEngine::PutIsOldMode ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_IsOldMode(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IApp wrapper method implementations
//

#pragma implementation_key(1379)
inline IDataPtr IApp::GetData ( ) {
    struct IData * _result = 0;
    HRESULT _hr = get_Data(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDataPtr(_result, false);
}

#pragma implementation_key(1380)
inline VARIANT_BOOL IApp::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1381)
inline void IApp::PutVisible ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Visible(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1382)
inline HRESULT IApp::SetInstrument ( long Id ) {
    HRESULT _hr = raw_SetInstrument(Id);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1383)
inline HRESULT IApp::Stop ( ) {
    HRESULT _hr = raw_Stop();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1384)
inline HRESULT IApp::Init ( ) {
    HRESULT _hr = raw_Init();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1385)
inline long IApp::GetParent ( ) {
    long _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1386)
inline void IApp::PutParent ( long Value ) {
    HRESULT _hr = put_Parent(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1387)
inline VARIANT_BOOL IApp::GetShowPropertyFrame ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowPropertyFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1388)
inline void IApp::PutShowPropertyFrame ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_ShowPropertyFrame(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1389)
inline HRESULT IApp::SetupScreen ( ) {
    HRESULT _hr = raw_SetupScreen();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1390)
inline VARIANT_BOOL IApp::GetShowStoreOptions ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowStoreOptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1391)
inline void IApp::PutShowStoreOptions ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_ShowStoreOptions(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1392)
inline VARIANT_BOOL IApp::GetShowSROptions ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowSROptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1393)
inline void IApp::PutShowSROptions ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_ShowSROptions(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1394)
inline HRESULT IApp::HardwareSetup ( VARIANT_BOOL Plugins ) {
    HRESULT _hr = raw_HardwareSetup(Plugins);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1395)
inline HRESULT IApp::LoadSetup ( _bstr_t FileName ) {
    HRESULT _hr = raw_LoadSetup(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1396)
inline HRESULT IApp::SaveSetup ( _bstr_t FileName ) {
    HRESULT _hr = raw_SaveSetup(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1397)
inline _bstr_t IApp::GetIniFileDir ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IniFileDir(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1398)
inline void IApp::PutIniFileDir ( _bstr_t Value ) {
    HRESULT _hr = put_IniFileDir(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1399)
inline long IApp::GetLeft ( ) {
    long _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1400)
inline void IApp::PutLeft ( long Value ) {
    HRESULT _hr = put_Left(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1401)
inline long IApp::GetTop ( ) {
    long _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1402)
inline void IApp::PutTop ( long Value ) {
    HRESULT _hr = put_Top(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1403)
inline long IApp::GetWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1404)
inline void IApp::PutWidth ( long Value ) {
    HRESULT _hr = put_Width(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1405)
inline long IApp::GetHeight ( ) {
    long _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1406)
inline void IApp::PutHeight ( long Value ) {
    HRESULT _hr = put_Height(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1407)
inline HRESULT IApp::UpdateHardwareSetup ( ) {
    HRESULT _hr = raw_UpdateHardwareSetup();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1408)
inline HRESULT IApp::Measure ( ) {
    HRESULT _hr = raw_Measure();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1409)
inline HRESULT IApp::LoadFile ( _bstr_t FileName ) {
    HRESULT _hr = raw_LoadFile(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1410)
inline HRESULT IApp::StartStoring ( _bstr_t FileName ) {
    HRESULT _hr = raw_StartStoring(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1411)
inline ILoadEnginePtr IApp::GetLoadEngine ( ) {
    struct ILoadEngine * _result = 0;
    HRESULT _hr = get_LoadEngine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILoadEnginePtr(_result, false);
}

#pragma implementation_key(1412)
inline HRESULT IApp::ExportData ( long ExportType, long TimeAxis, _bstr_t FileName ) {
    HRESULT _hr = raw_ExportData(ExportType, TimeAxis, FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1413)
inline _bstr_t IApp::SendCommand ( _bstr_t Cmd, long Timeout ) {
    BSTR _result = 0;
    HRESULT _hr = raw_SendCommand(Cmd, Timeout, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1414)
inline HRESULT IApp::ManualStart ( ) {
    HRESULT _hr = raw_ManualStart();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1415)
inline HRESULT IApp::ManualStop ( ) {
    HRESULT _hr = raw_ManualStop();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1416)
inline long IApp::GetShowStyle ( ) {
    long _result = 0;
    HRESULT _hr = get_ShowStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1417)
inline void IApp::PutShowStyle ( long Value ) {
    HRESULT _hr = put_ShowStyle(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1418)
inline VARIANT_BOOL IApp::GetStayOnTop ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_StayOnTop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1419)
inline void IApp::PutStayOnTop ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_StayOnTop(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1420)
inline HRESULT IApp::SetScreenIndex ( long Index ) {
    HRESULT _hr = raw_SetScreenIndex(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1421)
inline long IApp::GetActiveScreen ( ) {
    long _result = 0;
    HRESULT _hr = get_ActiveScreen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1422)
inline HRESULT IApp::SendKey ( unsigned long Key ) {
    HRESULT _hr = raw_SendKey(Key);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1423)
inline _bstr_t IApp::GetUsedSetupfile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UsedSetupfile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1424)
inline _bstr_t IApp::GetUsedDatafile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UsedDatafile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1425)
inline void IApp::PutUsedDatafile ( _bstr_t Value ) {
    HRESULT _hr = put_UsedDatafile(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1426)
inline long IApp::GetLastKey ( ) {
    long _result = 0;
    HRESULT _hr = get_LastKey(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1427)
inline IScreensPtr IApp::GetScreens ( ) {
    struct IScreens * _result = 0;
    HRESULT _hr = get_Screens(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IScreensPtr(_result, false);
}

#pragma implementation_key(1428)
inline IEventListPtr IApp::GetEventList ( ) {
    struct IEventList * _result = 0;
    HRESULT _hr = get_EventList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEventListPtr(_result, false);
}

#pragma implementation_key(1429)
inline long IApp::GetActualRunMode ( ) {
    long _result = 0;
    HRESULT _hr = get_ActualRunMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1430)
inline _bstr_t IApp::GetVersion ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Version(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1431)
inline IMasterClockPtr IApp::GetMasterClock ( ) {
    struct IMasterClock * _result = 0;
    HRESULT _hr = get_MasterClock(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMasterClockPtr(_result, false);
}

#pragma implementation_key(1432)
inline IStoreEnginePtr IApp::GetStoreEngine ( ) {
    struct IStoreEngine * _result = 0;
    HRESULT _hr = get_StoreEngine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IStoreEnginePtr(_result, false);
}

#pragma implementation_key(1433)
inline HRESULT IApp::GoToInstruments ( ) {
    HRESULT _hr = raw_GoToInstruments();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1434)
inline HRESULT IApp::SetFullScreen ( VARIANT_BOOL Full ) {
    HRESULT _hr = raw_SetFullScreen(Full);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1435)
inline _bstr_t IApp::GetMainDataDir ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MainDataDir(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1436)
inline HRESULT IApp::MainWndMessage ( long Msg, long WParam, VARIANT_BOOL Wait ) {
    HRESULT _hr = raw_MainWndMessage(Msg, WParam, Wait);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1437)
inline HRESULT IApp::SetRemoteMode ( VARIANT_BOOL Remote ) {
    HRESULT _hr = raw_SetRemoteMode(Remote);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1438)
inline HRESULT IApp::MenuClick ( enum MenuItems Item ) {
    HRESULT _hr = raw_MenuClick(Item);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1439)
inline long IApp::GetMeasureSampleRate ( ) {
    long _result = 0;
    HRESULT _hr = get_MeasureSampleRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1440)
inline void IApp::PutMeasureSampleRate ( long Value ) {
    HRESULT _hr = put_MeasureSampleRate(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1441)
inline long IApp::SetScopeParams ( double PreTime, double PostTime, struct IChannel * Channel, float Level ) {
    long _result = 0;
    HRESULT _hr = raw_SetScopeParams(PreTime, PostTime, Channel, Level, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1442)
inline HRESULT IApp::NewSetup ( ) {
    HRESULT _hr = raw_NewSetup();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1443)
inline HRESULT IApp::SetScopeUsed ( VARIANT_BOOL Value ) {
    HRESULT _hr = raw_SetScopeUsed(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1444)
inline VARIANT_BOOL IApp::GetDataLost ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DataLost(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1445)
inline HRESULT IApp::SetHeaderData ( _bstr_t Caption, _bstr_t Header ) {
    HRESULT _hr = raw_SetHeaderData(Caption, Header);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1446)
inline HRESULT IApp::PrintScreen ( VARIANT_BOOL ShowDialog ) {
    HRESULT _hr = raw_PrintScreen(ShowDialog);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1447)
inline long IApp::GetTimerInterval ( ) {
    long _result = 0;
    HRESULT _hr = get_TimerInterval(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1448)
inline void IApp::PutTimerInterval ( long Value ) {
    HRESULT _hr = put_TimerInterval(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1449)
inline HRESULT IApp::GetInterfaceVersion ( long * Major, long * Minor, long * Revision ) {
    HRESULT _hr = raw_GetInterfaceVersion(Major, Minor, Revision);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1450)
inline IAISetupScreenPtr IApp::GetAISetupScreen ( ) {
    struct IAISetupScreen * _result = 0;
    HRESULT _hr = get_AISetupScreen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAISetupScreenPtr(_result, false);
}

#pragma implementation_key(1451)
inline VARIANT_BOOL IApp::GetAlwaysEnableTrigger ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AlwaysEnableTrigger(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1452)
inline void IApp::PutAlwaysEnableTrigger ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_AlwaysEnableTrigger(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1453)
inline ITriggerPtr IApp::GetTrigger ( ) {
    struct ITrigger * _result = 0;
    HRESULT _hr = get_Trigger(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITriggerPtr(_result, false);
}

#pragma implementation_key(1454)
inline VARIANT_BOOL IApp::GetDisableStoring ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisableStoring(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1455)
inline void IApp::PutDisableStoring ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_DisableStoring(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1456)
inline HRESULT IApp::WriteErrorMessage ( _bstr_t ErrorMsg ) {
    HRESULT _hr = raw_WriteErrorMessage(ErrorMsg);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1457)
inline HRESULT IApp::PauseStoring ( ) {
    HRESULT _hr = raw_PauseStoring();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1458)
inline HRESULT IApp::ResumeStoring ( ) {
    HRESULT _hr = raw_ResumeStoring();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1459)
inline HRESULT IApp::LoadModuleSetup ( _bstr_t FileName ) {
    HRESULT _hr = raw_LoadModuleSetup(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1460)
inline HRESULT IApp::ChangeDaqType ( long DaqType ) {
    HRESULT _hr = raw_ChangeDaqType(DaqType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1461)
inline HRESULT IApp::ChangeComPort ( long ComPort ) {
    HRESULT _hr = raw_ChangeComPort(ComPort);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1462)
inline HRESULT IApp::LoadDBC ( long PortNo, _bstr_t FileName ) {
    HRESULT _hr = raw_LoadDBC(PortNo, FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1463)
inline HRESULT IApp::ZeroAllAutoChannels ( VARIANT_BOOL Zero ) {
    HRESULT _hr = raw_ZeroAllAutoChannels(Zero);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1464)
inline HRESULT IApp::ShowSensorEditor ( ) {
    HRESULT _hr = raw_ShowSensorEditor();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1465)
inline IAOGroupPtr IApp::GetAOGroup ( ) {
    struct IAOGroup * _result = 0;
    HRESULT _hr = get_AOGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAOGroupPtr(_result, false);
}

#pragma implementation_key(1466)
inline ICANPtr IApp::GetCAN ( ) {
    struct ICAN * _result = 0;
    HRESULT _hr = get_CAN(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICANPtr(_result, false);
}

#pragma implementation_key(1467)
inline HRESULT IApp::InitScopeTrig ( struct T_RecordPosition Start, struct T_RecordPosition Stop ) {
    HRESULT _hr = raw_InitScopeTrig(Start, Stop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1468)
inline VARIANT_BOOL IApp::CalcScopeTrig ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_CalcScopeTrig(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1469)
inline VARIANT_BOOL IApp::GetAcquiring ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Acquiring(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1470)
inline VARIANT_BOOL IApp::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1471)
inline void IApp::PutEnabled ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Enabled(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1472)
inline HRESULT IApp::AOSetManual ( ) {
    HRESULT _hr = raw_AOSetManual();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1473)
inline VARIANT_BOOL IApp::AOGetManualAvail ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AOGetManualAvail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1474)
inline IModulesPtr IApp::GetModules ( ) {
    struct IModules * _result = 0;
    HRESULT _hr = get_Modules(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModulesPtr(_result, false);
}

#pragma implementation_key(1475)
inline HRESULT IApp::StartModuleScan ( ) {
    HRESULT _hr = raw_StartModuleScan();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1476)
inline HRESULT IApp::StopModuleScan ( ) {
    HRESULT _hr = raw_StopModuleScan();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1477)
inline long IApp::GetRegType ( ) {
    long _result = 0;
    HRESULT _hr = get_RegType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1478)
inline IAveragedFFTPtr IApp::GetAveragedCPB ( ) {
    struct IAveragedFFT * _result = 0;
    HRESULT _hr = get_AveragedCPB(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAveragedFFTPtr(_result, false);
}

#pragma implementation_key(1479)
inline HRESULT IApp::LoadDisplaySetup ( _bstr_t FileName ) {
    HRESULT _hr = raw_LoadDisplaySetup(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1480)
inline HRESULT IApp::SetStoreMode ( long Mode ) {
    HRESULT _hr = raw_SetStoreMode(Mode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1481)
inline IAlarmsPtr IApp::GetAlarms ( ) {
    struct IAlarms * _result = 0;
    HRESULT _hr = get_Alarms(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAlarmsPtr(_result, false);
}

#pragma implementation_key(1482)
inline IDaqGroupPtr IApp::GetDaqGroup ( ) {
    struct IDaqGroup * _result = 0;
    HRESULT _hr = get_DaqGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDaqGroupPtr(_result, false);
}

#pragma implementation_key(1483)
inline VARIANT_BOOL IApp::GetIsSetupMode ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsSetupMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1484)
inline HRESULT IApp::SetMainDataDir ( _bstr_t DataDir ) {
    HRESULT _hr = raw_SetMainDataDir(DataDir);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1485)
inline IFileNameSettingsPtr IApp::GetFileNameSettings ( ) {
    struct IFileNameSettings * _result = 0;
    HRESULT _hr = get_FileNameSettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFileNameSettingsPtr(_result, false);
}

#pragma implementation_key(1486)
inline VARIANT_BOOL IApp::GetHasFRF ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasFRF(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1487)
inline IDaqPtr IApp::GetDaq ( ) {
    struct IDaq * _result = 0;
    HRESULT _hr = get_Daq(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDaqPtr(_result, false);
}

#pragma implementation_key(1488)
inline IGlobalHeaderPtr IApp::GetGlobalHeader ( ) {
    struct IGlobalHeader * _result = 0;
    HRESULT _hr = get_GlobalHeader(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGlobalHeaderPtr(_result, false);
}

#pragma implementation_key(1489)
inline VARIANT_BOOL IApp::GetFixedExternalClock ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FixedExternalClock(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1490)
inline void IApp::PutFixedExternalClock ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_FixedExternalClock(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1491)
inline HRESULT IApp::WriteErrorLog ( _bstr_t Str ) {
    HRESULT _hr = raw_WriteErrorLog(Str);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1492)
inline HRESULT IApp::UpdateSetupScreen ( ) {
    HRESULT _hr = raw_UpdateSetupScreen();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1493)
inline HRESULT IApp::NotifyTrackingChanged ( VARIANT_BOOL Tracking, double TimeDiff ) {
    HRESULT _hr = raw_NotifyTrackingChanged(Tracking, TimeDiff);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1494)
inline ITimingPtr IApp::GetTiming ( ) {
    struct ITiming * _result = 0;
    HRESULT _hr = get_Timing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITimingPtr(_result, false);
}

#pragma implementation_key(1495)
inline IUserInterfacePtr IApp::GetUserInterface ( ) {
    struct IUserInterface * _result = 0;
    HRESULT _hr = get_UserInterface(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUserInterfacePtr(_result, false);
}

#pragma implementation_key(1496)
inline IAveragedFFTPtr IApp::GetAveragedFFT ( ) {
    struct IAveragedFFT * _result = 0;
    HRESULT _hr = get_AveragedFFT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAveragedFFTPtr(_result, false);
}

#pragma implementation_key(1497)
inline HRESULT IApp::ExportDataEx ( long ExportType, long TimeAxis, long ExportDataType, long ExportOptions, _bstr_t FileName ) {
    HRESULT _hr = raw_ExportDataEx(ExportType, TimeAxis, ExportDataType, ExportOptions, FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1498)
inline double IApp::GetMeasureSampleRateEx ( ) {
    double _result = 0;
    HRESULT _hr = get_MeasureSampleRateEx(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1499)
inline void IApp::PutMeasureSampleRateEx ( double Value ) {
    HRESULT _hr = put_MeasureSampleRateEx(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1500)
inline IPowerModulesPtr IApp::GetPowerModules ( ) {
    struct IPowerModules * _result = 0;
    HRESULT _hr = get_PowerModules(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPowerModulesPtr(_result, false);
}

#pragma implementation_key(1501)
inline float IApp::GetReducedRate ( ) {
    float _result = 0;
    HRESULT _hr = get_ReducedRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1502)
inline void IApp::PutReducedRate ( float Value ) {
    HRESULT _hr = put_ReducedRate(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1503)
inline HRESULT IApp::HideCaptionBar ( ) {
    HRESULT _hr = raw_HideCaptionBar();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1504)
inline HRESULT IApp::ExecuteModulesFunction ( enum ModulesFunction Func, unsigned char Group, long Value ) {
    HRESULT _hr = raw_ExecuteModulesFunction(Func, Group, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1505)
inline HRESULT IApp::ShowCaptionBar ( ) {
    HRESULT _hr = raw_ShowCaptionBar();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1506)
inline float IApp::FirstScanDonePercent ( ) {
    float _result = 0;
    HRESULT _hr = raw_FirstScanDonePercent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1507)
inline long IApp::GetSetupSampleRate ( ) {
    long _result = 0;
    HRESULT _hr = get_SetupSampleRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1508)
inline void IApp::PutSetupSampleRate ( long Value ) {
    HRESULT _hr = put_SetupSampleRate(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1509)
inline long IApp::GetNETMode ( ) {
    long _result = 0;
    HRESULT _hr = get_NETMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1510)
inline VARIANT_BOOL IApp::Start ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Start(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1511)
inline VARIANT_BOOL IApp::GetRemoteControlled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RemoteControlled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1512)
inline VARIANT_BOOL IApp::GetIsAcqRunning ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsAcqRunning(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1513)
inline IMathPtr IApp::GetMath ( ) {
    struct IMath * _result = 0;
    HRESULT _hr = get_Math(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMathPtr(_result, false);
}

#pragma implementation_key(1514)
inline HRESULT IApp::LoadProject ( _bstr_t Name ) {
    HRESULT _hr = raw_LoadProject(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1515)
inline HRESULT IApp::Analyze ( ) {
    HRESULT _hr = raw_Analyze();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1516)
inline HRESULT IApp::SetMainToolBar ( _bstr_t TabName, _bstr_t ButtonName ) {
    HRESULT _hr = raw_SetMainToolBar(TabName, ButtonName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1517)
inline long IApp::GetMainWindowHandle ( ) {
    long _result = 0;
    HRESULT _hr = get_MainWindowHandle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1518)
inline _bstr_t IApp::GetSpecDir ( enum SpecDirectory DirType ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetSpecDir(DirType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1519)
inline IAmplInterfacesPtr IApp::GetAmplInterfaces ( ) {
    struct IAmplInterfaces * _result = 0;
    HRESULT _hr = get_AmplInterfaces(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAmplInterfacesPtr(_result, false);
}

#pragma implementation_key(1520)
inline VARIANT_BOOL IApp::GetSuppressMessages ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SuppressMessages(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1521)
inline void IApp::PutSuppressMessages ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_SuppressMessages(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1522)
inline IOfflineCalcPtr IApp::GetOfflineCalc ( ) {
    struct IOfflineCalc * _result = 0;
    HRESULT _hr = get_OfflineCalc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IOfflineCalcPtr(_result, false);
}

#pragma implementation_key(1523)
inline VARIANT_BOOL IApp::GetConfigMode ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ConfigMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1524)
inline VARIANT_BOOL IApp::GetShowInstrumentsInFullScreen ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowInstrumentsInFullScreen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1525)
inline void IApp::PutShowInstrumentsInFullScreen ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_ShowInstrumentsInFullScreen(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1526)
inline VARIANT_BOOL IApp::GetDisableKeyboardShortcuts ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisableKeyboardShortcuts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1527)
inline void IApp::PutDisableKeyboardShortcuts ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_DisableKeyboardShortcuts(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1528)
inline HRESULT IApp::SaveSetupToXML ( BSTR * XML ) {
    HRESULT _hr = raw_SaveSetupToXML(XML);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1529)
inline HRESULT IApp::LoadSetupFromXML ( _bstr_t XML ) {
    HRESULT _hr = raw_LoadSetupFromXML(XML);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1530)
inline IProjectManagerPtr IApp::GetProjectManager ( ) {
    struct IProjectManager * _result = 0;
    HRESULT _hr = get_ProjectManager(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IProjectManagerPtr(_result, false);
}

#pragma implementation_key(1531)
inline IVideoPtr IApp::GetVideo ( ) {
    struct IVideo * _result = 0;
    HRESULT _hr = get_Video(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVideoPtr(_result, false);
}

#pragma implementation_key(1532)
inline HRESULT IApp::LoadSequence ( _bstr_t FileName ) {
    HRESULT _hr = raw_LoadSequence(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1533)
inline HRESULT IApp::GetDewesoftVersion ( long * Super, long * Major, long * Minor, long * Build, char * State ) {
    HRESULT _hr = raw_GetDewesoftVersion(Super, Major, Minor, Build, State);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1534)
inline long IApp::GetSamplesEx ( double SampleRate, VARIANT_BOOL SetupMode, long Level ) {
    long _result = 0;
    HRESULT _hr = raw_GetSamplesEx(SampleRate, SetupMode, Level, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1535)
inline ILockableCursorsPtr IApp::GetLockableCursors ( ) {
    struct ILockableCursors * _result = 0;
    HRESULT _hr = get_LockableCursors(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILockableCursorsPtr(_result, false);
}

#pragma implementation_key(1536)
inline HRESULT IApp::ReportMessage ( enum ReportMessageType MsgType, _bstr_t MsgSource, _bstr_t Msg ) {
    HRESULT _hr = raw_ReportMessage(MsgType, MsgSource, Msg);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1537)
inline HRESULT IApp::ChangeSetupFolder ( _bstr_t FolderName ) {
    HRESULT _hr = raw_ChangeSetupFolder(FolderName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1538)
inline HRESULT IApp::ChangeDataFolder ( _bstr_t FolderName ) {
    HRESULT _hr = raw_ChangeDataFolder(FolderName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1539)
inline enum TimeFormat IApp::GetTimeFormat ( ) {
    enum TimeFormat _result;
    HRESULT _hr = get_TimeFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1540)
inline void IApp::PutTimeFormat ( enum TimeFormat Value ) {
    HRESULT _hr = put_TimeFormat(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1541)
inline ISequencerPtr IApp::GetSequencer ( ) {
    struct ISequencer * _result = 0;
    HRESULT _hr = get_Sequencer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISequencerPtr(_result, false);
}

#pragma implementation_key(1542)
inline long IApp::SendPluginCommand ( _bstr_t PluginGUID, long CommandID, const _variant_t & Input, VARIANT * Output ) {
    long _result = 0;
    HRESULT _hr = raw_SendPluginCommand(PluginGUID, CommandID, Input, Output, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1543)
inline unsigned int IApp::GetDialogHandle ( ) {
    unsigned int _result = 0;
    HRESULT _hr = get_DialogHandle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1544)
inline void IApp::PutDialogHandle ( unsigned int Value ) {
    HRESULT _hr = put_DialogHandle(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1545)
inline HRESULT IApp::SetFreezeMode ( VARIANT_BOOL Enabled ) {
    HRESULT _hr = raw_SetFreezeMode(Enabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1546)
inline HRESULT IApp::StopStoring ( ) {
    HRESULT _hr = raw_StopStoring();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1547)
inline HRESULT IApp::ImportDataFile ( _bstr_t FileName, long ReferenceType, const _variant_t & Params, _bstr_t ChannelFilter ) {
    HRESULT _hr = raw_ImportDataFile(FileName, ReferenceType, Params, ChannelFilter);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1548)
inline HRESULT IApp::SaveChangesToDataFile ( ) {
    HRESULT _hr = raw_SaveChangesToDataFile();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1549)
inline enum TimingType IApp::GetTimingType ( ) {
    enum TimingType _result;
    HRESULT _hr = raw_GetTimingType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1550)
inline IRemoteManagerPtr IApp::GetRemoteManager ( ) {
    struct IRemoteManager * _result = 0;
    HRESULT _hr = get_RemoteManager(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRemoteManagerPtr(_result, false);
}

#pragma implementation_key(1551)
inline IChannelListExPtr IApp::CreateChannelList ( ) {
    struct IChannelListEx * _result = 0;
    HRESULT _hr = raw_CreateChannelList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChannelListExPtr(_result, false);
}

#pragma implementation_key(1552)
inline HRESULT IApp::FillModuleChannelList ( _bstr_t SerialNumber, long GroupID, struct IChannelListEx * * List ) {
    HRESULT _hr = raw_FillModuleChannelList(SerialNumber, GroupID, List);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1553)
inline HRESULT IApp::AskUserToDeleteDisplays ( _bstr_t PluginGUID ) {
    HRESULT _hr = raw_AskUserToDeleteDisplays(PluginGUID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1554)
inline IXMLHelperPtr IApp::GetXMLHelper ( ) {
    struct IXMLHelper * _result = 0;
    HRESULT _hr = get_XMLHelper(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IXMLHelperPtr(_result, false);
}

#pragma implementation_key(1555)
inline IAcqLoopPtr IApp::GetAcqLoop ( ) {
    struct IAcqLoop * _result = 0;
    HRESULT _hr = get_AcqLoop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcqLoopPtr(_result, false);
}

#pragma implementation_key(1556)
inline HRESULT IApp::UpdateTopology ( ) {
    HRESULT _hr = raw_UpdateTopology();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1557)
inline IRTCorePtr IApp::GetRTCore ( ) {
    struct IRTCore * _result = 0;
    HRESULT _hr = get_RTCore(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRTCorePtr(_result, false);
}

#pragma implementation_key(1558)
inline HRESULT IApp::ZeroCntChannels ( ) {
    HRESULT _hr = raw_ZeroCntChannels();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1559)
inline IReportPtr IApp::GetReport ( ) {
    struct IReport * _result = 0;
    HRESULT _hr = get_Report(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IReportPtr(_result, false);
}

#pragma implementation_key(1560)
inline long IApp::GetAnalyseMenuIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_AnalyseMenuIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1561)
inline IRTCPtr IApp::GetRTC ( ) {
    struct IRTC * _result = 0;
    HRESULT _hr = get_RTC(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRTCPtr(_result, false);
}

#pragma implementation_key(1562)
inline HRESULT IApp::ZeroAutoChannelsByGroup ( VARIANT_BOOL Zero, char GroupID ) {
    HRESULT _hr = raw_ZeroAutoChannelsByGroup(Zero, GroupID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1563)
inline HRESULT IApp::ExportToDewesoft ( _bstr_t FileName ) {
    HRESULT _hr = raw_ExportToDewesoft(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1564)
inline long IApp::AskSaveDataFile ( VARIANT_BOOL AskWithoutAnySettingChanged ) {
    long _result = 0;
    HRESULT _hr = raw_AskSaveDataFile(AskWithoutAnySettingChanged, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1565)
inline long IApp::GetMeasureMenuIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_MeasureMenuIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IPlugin wrapper method implementations
//

#pragma implementation_key(1566)
inline HRESULT IPlugin::SetData ( struct IData * Data ) {
    HRESULT _hr = raw_SetData(Data);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1567)
inline HRESULT IPlugin::OnTrigger ( double Time ) {
    HRESULT _hr = raw_OnTrigger(Time);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1568)
inline HRESULT IPlugin::Configure ( ) {
    HRESULT _hr = raw_Configure();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1569)
inline HRESULT IPlugin::OnGetData ( ) {
    HRESULT _hr = raw_OnGetData();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1570)
inline HRESULT IPlugin::OnStartAcq ( ) {
    HRESULT _hr = raw_OnStartAcq();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1571)
inline HRESULT IPlugin::OnStopAcq ( ) {
    HRESULT _hr = raw_OnStopAcq();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1572)
inline HRESULT IPlugin::OnStartStoring ( ) {
    HRESULT _hr = raw_OnStartStoring();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1573)
inline HRESULT IPlugin::OnStopStoring ( ) {
    HRESULT _hr = raw_OnStopStoring();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1574)
inline HRESULT IPlugin::Initiate ( ) {
    HRESULT _hr = raw_Initiate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1575)
inline HRESULT IPlugin::SetApp ( struct IApp * App ) {
    HRESULT _hr = raw_SetApp(App);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IPlugin2 wrapper method implementations
//

#pragma implementation_key(1576)
inline HRESULT IPlugin2::Initiate ( struct IApp * DeweApp ) {
    HRESULT _hr = raw_Initiate(DeweApp);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1577)
inline HRESULT IPlugin2::OnStartAcq ( ) {
    HRESULT _hr = raw_OnStartAcq();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1578)
inline HRESULT IPlugin2::OnStopAcq ( ) {
    HRESULT _hr = raw_OnStopAcq();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1579)
inline HRESULT IPlugin2::OnStartStoring ( ) {
    HRESULT _hr = raw_OnStartStoring();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1580)
inline HRESULT IPlugin2::OnStopStoring ( ) {
    HRESULT _hr = raw_OnStopStoring();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1581)
inline HRESULT IPlugin2::OnGetData ( ) {
    HRESULT _hr = raw_OnGetData();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1582)
inline HRESULT IPlugin2::OnTrigger ( double Time ) {
    HRESULT _hr = raw_OnTrigger(Time);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1583)
inline HRESULT IPlugin2::Configure ( ) {
    HRESULT _hr = raw_Configure();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1584)
inline _bstr_t IPlugin2::GetId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1585)
inline HRESULT IPlugin2::SaveSetup ( VARIANT * Data ) {
    HRESULT _hr = raw_SaveSetup(Data);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1586)
inline HRESULT IPlugin2::LoadSetup ( const _variant_t & Data ) {
    HRESULT _hr = raw_LoadSetup(Data);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1587)
inline HRESULT IPlugin2::NewSetup ( ) {
    HRESULT _hr = raw_NewSetup();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1588)
inline HRESULT IPlugin2::ClearChannelsInstance ( ) {
    HRESULT _hr = raw_ClearChannelsInstance();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1589)
inline VARIANT_BOOL IPlugin2::ShowFrame ( long Parent ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ShowFrame(Parent, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1590)
inline HRESULT IPlugin2::HideFrame ( ) {
    HRESULT _hr = raw_HideFrame();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1591)
inline HRESULT IPlugin2::UpdateFrame ( ) {
    HRESULT _hr = raw_UpdateFrame();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1592)
inline VARIANT_BOOL IPlugin2::GetUsed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Used(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1593)
inline void IPlugin2::PutUsed ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Used(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1594)
inline HRESULT IPlugin2::OnOleMsg ( long Msg, long Param ) {
    HRESULT _hr = raw_OnOleMsg(Msg, Param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ICustomExport wrapper method implementations
//

#pragma implementation_key(1595)
inline _bstr_t ICustomExport::GetFileName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FileName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1596)
inline void ICustomExport::PutFileName ( _bstr_t Value ) {
    HRESULT _hr = put_FileName(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1597)
inline HRESULT ICustomExport::StartExport ( struct IApp * App ) {
    HRESULT _hr = raw_StartExport(App);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1598)
inline HRESULT ICustomExport::EndExport ( ) {
    HRESULT _hr = raw_EndExport();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1599)
inline enum ExportTypes ICustomExport::GetExportType ( ) {
    enum ExportTypes _result;
    HRESULT _hr = get_ExportType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1600)
inline VARIANT_BOOL ICustomExport::GetAbsoluteTime ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AbsoluteTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1601)
inline void ICustomExport::PutAbsoluteTime ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_AbsoluteTime(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1602)
inline HRESULT ICustomExport::StartDataFolder ( _bstr_t FolderName, DATE AbsTime ) {
    HRESULT _hr = raw_StartDataFolder(FolderName, AbsTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1603)
inline HRESULT ICustomExport::EndDataFolder ( ) {
    HRESULT _hr = raw_EndDataFolder();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1604)
inline HRESULT ICustomExport::StartInfo ( _bstr_t Info ) {
    HRESULT _hr = raw_StartInfo(Info);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1605)
inline HRESULT ICustomExport::WriteInfoString ( _bstr_t Description, _bstr_t Value ) {
    HRESULT _hr = raw_WriteInfoString(Description, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1606)
inline HRESULT ICustomExport::WriteInfoInteger ( _bstr_t Description, long Param ) {
    HRESULT _hr = raw_WriteInfoInteger(Description, Param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1607)
inline HRESULT ICustomExport::WriteInfoSingle ( _bstr_t Description, float Value ) {
    HRESULT _hr = raw_WriteInfoSingle(Description, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1608)
inline HRESULT ICustomExport::WriteInfoDate ( _bstr_t Description, DATE Value ) {
    HRESULT _hr = raw_WriteInfoDate(Description, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1609)
inline HRESULT ICustomExport::EndInfo ( ) {
    HRESULT _hr = raw_EndInfo();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1610)
inline HRESULT ICustomExport::StartTimeField ( _bstr_t FieldName, _bstr_t FieldUnit ) {
    HRESULT _hr = raw_StartTimeField(FieldName, FieldUnit);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1611)
inline HRESULT ICustomExport::StartDataField ( _bstr_t FieldName, _bstr_t FieldUnit, long ExportRate ) {
    HRESULT _hr = raw_StartDataField(FieldName, FieldUnit, ExportRate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1612)
inline HRESULT ICustomExport::EndHeader ( ) {
    HRESULT _hr = raw_EndHeader();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1613)
inline HRESULT ICustomExport::StartValue ( double TimeValue ) {
    HRESULT _hr = raw_StartValue(TimeValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1614)
inline HRESULT ICustomExport::StartAbsValue ( DATE DateTime ) {
    HRESULT _hr = raw_StartAbsValue(DateTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1615)
inline HRESULT ICustomExport::WriteValue ( float Value ) {
    HRESULT _hr = raw_WriteValue(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1616)
inline HRESULT ICustomExport::WriteAsyncValue ( double TimeStamp, float Value ) {
    HRESULT _hr = raw_WriteAsyncValue(TimeStamp, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1617)
inline HRESULT ICustomExport::StartChannel ( _bstr_t FieldName, _bstr_t FieldUnit, VARIANT_BOOL Async ) {
    HRESULT _hr = raw_StartChannel(FieldName, FieldUnit, Async);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1618)
inline _bstr_t ICustomExport::GetExtension ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Extension(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1619)
inline double ICustomExport::GetTimeIncrease ( ) {
    double _result = 0;
    HRESULT _hr = get_TimeIncrease(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1620)
inline void ICustomExport::PutTimeIncrease ( double Value ) {
    HRESULT _hr = put_TimeIncrease(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1621)
inline HRESULT ICustomExport::EndChannel ( ) {
    HRESULT _hr = raw_EndChannel();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1622)
inline HRESULT ICustomExport::EndValue ( ) {
    HRESULT _hr = raw_EndValue();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1623)
inline VARIANT_BOOL ICustomExport::GetSupportsAsync ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SupportsAsync(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1624)
inline VARIANT_BOOL ICustomExport::GetSupportsSRDiv ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SupportsSRDiv(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1625)
inline unsigned __int64 ICustomExport::GetDataCount ( ) {
    unsigned __int64 _result = 0;
    HRESULT _hr = get_DataCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1626)
inline void ICustomExport::PutDataCount ( unsigned __int64 Value ) {
    HRESULT _hr = put_DataCount(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IPlugin3 wrapper method implementations
//

#pragma implementation_key(1627)
inline HRESULT IPlugin3::OnStartSetup ( ) {
    HRESULT _hr = raw_OnStartSetup();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1628)
inline HRESULT IPlugin3::OnStopSetup ( ) {
    HRESULT _hr = raw_OnStopSetup();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1629)
inline HRESULT IPlugin3::OnBeforeStartAcq ( VARIANT_BOOL * AllowStart ) {
    HRESULT _hr = raw_OnBeforeStartAcq(AllowStart);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1630)
inline HRESULT IPlugin3::OnAfterStartAcq ( ) {
    HRESULT _hr = raw_OnAfterStartAcq();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1631)
inline HRESULT IPlugin3::OnBeforeStopAcq ( VARIANT_BOOL * AllowStop ) {
    HRESULT _hr = raw_OnBeforeStopAcq(AllowStop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1632)
inline HRESULT IPlugin3::OnAfterStopAcq ( ) {
    HRESULT _hr = raw_OnAfterStopAcq();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1633)
inline HRESULT IPlugin3::OnRepaintFrame ( ) {
    HRESULT _hr = raw_OnRepaintFrame();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1634)
inline HRESULT IPlugin3::OnTriggerStop ( double Time, double TrigDuration ) {
    HRESULT _hr = raw_OnTriggerStop(Time, TrigDuration);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1635)
inline HRESULT IPlugin3::OnAfterCalcMath ( ) {
    HRESULT _hr = raw_OnAfterCalcMath();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1636)
inline long IPlugin3::GetDWTypeLibVersion ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetDWTypeLibVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1637)
inline HRESULT IPlugin3::OnGetSetupData ( ) {
    HRESULT _hr = raw_OnGetSetupData();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1638)
inline HRESULT IPlugin3::OnResizeFrame ( long Width, long Height ) {
    HRESULT _hr = raw_OnResizeFrame(Width, Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1639)
inline HRESULT IPlugin3::ProvidesClock ( VARIANT_BOOL * Value ) {
    HRESULT _hr = raw_ProvidesClock(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1640)
inline HRESULT IPlugin3::OnGetClock ( long * ClockLow, long * ClockHigh ) {
    HRESULT _hr = raw_OnGetClock(ClockLow, ClockHigh);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1641)
inline HRESULT IPlugin3::SetCANPort ( long Port ) {
    HRESULT _hr = raw_SetCANPort(Port);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1642)
inline HRESULT IPlugin3::OnAlarm ( long CondIndex, VARIANT_BOOL Status ) {
    HRESULT _hr = raw_OnAlarm(CondIndex, Status);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1643)
inline HRESULT IPlugin3::OnBigListLoad ( _bstr_t TextSetup ) {
    HRESULT _hr = raw_OnBigListLoad(TextSetup);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1644)
inline HRESULT IPlugin3::OnExit ( ) {
    HRESULT _hr = raw_OnExit();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1645)
inline VARIANT_BOOL IPlugin3::OnShowHWFrame ( long Parent ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_OnShowHWFrame(Parent, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1646)
inline HRESULT IPlugin3::OnHideHWFrame ( ) {
    HRESULT _hr = raw_OnHideHWFrame();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ICustomExport2 wrapper method implementations
//

#pragma implementation_key(1647)
inline HRESULT ICustomExport2::SetAbsMin ( float AbsMin ) {
    HRESULT _hr = raw_SetAbsMin(AbsMin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1648)
inline HRESULT ICustomExport2::SetAbsMax ( float AbsMax ) {
    HRESULT _hr = raw_SetAbsMax(AbsMax);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1649)
inline HRESULT ICustomExport2::SetTrigOffset ( double TrigTime ) {
    HRESULT _hr = raw_SetTrigOffset(TrigTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1650)
inline HRESULT ICustomExport2::SetChannelColor ( long Color ) {
    HRESULT _hr = raw_SetChannelColor(Color);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1651)
inline HRESULT ICustomExport2::SetRangeMax ( float Value ) {
    HRESULT _hr = raw_SetRangeMax(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1652)
inline HRESULT ICustomExport2::SetRangeMin ( float Value ) {
    HRESULT _hr = raw_SetRangeMin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1653)
inline HRESULT ICustomExport2::WriteDoubleValue ( double Value ) {
    HRESULT _hr = raw_WriteDoubleValue(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1654)
inline HRESULT ICustomExport2::WriteAsyncDoubleValue ( double TimeStamp, double Value ) {
    HRESULT _hr = raw_WriteAsyncDoubleValue(TimeStamp, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1655)
inline long ICustomExport2::GetDWTypeLibVersion ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetDWTypeLibVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1656)
inline VARIANT_BOOL ICustomExport2::GetSupportsDouble ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SupportsDouble(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1657)
inline HRESULT ICustomExport2::SetDoubleFloat ( VARIANT_BOOL DoubleFloat ) {
    HRESULT _hr = raw_SetDoubleFloat(DoubleFloat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1658)
inline HRESULT ICustomExport2::StartEvents ( ) {
    HRESULT _hr = raw_StartEvents();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1659)
inline HRESULT ICustomExport2::StopEvents ( ) {
    HRESULT _hr = raw_StopEvents();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1660)
inline HRESULT ICustomExport2::WriteEvent ( long EventType, _bstr_t EventTypeString, double Time, _bstr_t Comment ) {
    HRESULT _hr = raw_WriteEvent(EventType, EventTypeString, Time, Comment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1661)
inline HRESULT ICustomExport2::SetApp ( struct IApp * App ) {
    HRESULT _hr = raw_SetApp(App);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1662)
inline HRESULT ICustomExport2::SetChannel ( struct IChannel * Ch ) {
    HRESULT _hr = raw_SetChannel(Ch);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ICustomDAQ wrapper method implementations
//

#pragma implementation_key(1663)
inline VARIANT_BOOL ICustomDAQ::GetCardFound ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CardFound(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1664)
inline long ICustomDAQ::GetNumChannels ( ) {
    long _result = 0;
    HRESULT _hr = get_NumChannels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1665)
inline HRESULT ICustomDAQ::GetDeviceType ( ) {
    HRESULT _hr = raw_GetDeviceType();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1666)
inline HRESULT ICustomDAQ::GetBitResolution ( long ChIndex, long * Bits ) {
    HRESULT _hr = raw_GetBitResolution(ChIndex, Bits);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1667)
inline HRESULT ICustomDAQ::GetSampleRates ( VARIANT * List ) {
    HRESULT _hr = raw_GetSampleRates(List);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1668)
inline HRESULT ICustomDAQ::CheckSampleRate ( long WantedRate, long NumChannels, const _variant_t & ChList, long * AdjustedRate ) {
    HRESULT _hr = raw_CheckSampleRate(WantedRate, NumChannels, ChList, AdjustedRate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1669)
inline HRESULT ICustomDAQ::StartAcq ( long SampleRate, VARIANT_BOOL SetupMode ) {
    HRESULT _hr = raw_StartAcq(SampleRate, SetupMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1670)
inline HRESULT ICustomDAQ::StopAcq ( ) {
    HRESULT _hr = raw_StopAcq();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1671)
inline HRESULT ICustomDAQ::GetData ( long * Samples ) {
    HRESULT _hr = raw_GetData(Samples);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1672)
inline HRESULT ICustomDAQ::GetCurrentTime ( __int64 * Time ) {
    HRESULT _hr = raw_GetCurrentTime(Time);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1673)
inline HRESULT ICustomDAQ::SetApp ( struct IApp * App ) {
    HRESULT _hr = raw_SetApp(App);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1674)
inline HRESULT ICustomDAQ::GetCardName ( BSTR * Name ) {
    HRESULT _hr = raw_GetCardName(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1675)
inline HRESULT ICustomDAQ::GetDWTypeLibVersion ( long * Version ) {
    HRESULT _hr = raw_GetDWTypeLibVersion(Version);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1676)
inline HRESULT ICustomDAQ::GetBufferSize ( long * Value ) {
    HRESULT _hr = raw_GetBufferSize(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1677)
inline HRESULT ICustomDAQ::ShowSetupFrame ( long AppHandle, long Handle ) {
    HRESULT _hr = raw_ShowSetupFrame(AppHandle, Handle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1678)
inline HRESULT ICustomDAQ::HideSetupFrame ( ) {
    HRESULT _hr = raw_HideSetupFrame();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1679)
inline HRESULT ICustomDAQ::GetChannelGain ( float * Gain ) {
    HRESULT _hr = raw_GetChannelGain(Gain);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1680)
inline HRESULT ICustomDAQ::GetMinMax ( long ChnIndex, float * Min, float * Max ) {
    HRESULT _hr = raw_GetMinMax(ChnIndex, Min, Max);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1681)
inline HRESULT ICustomDAQ::GetOptionsCount ( long * Cnt ) {
    HRESULT _hr = raw_GetOptionsCount(Cnt);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1682)
inline HRESULT ICustomDAQ::GetOptionName ( long Index, BSTR * Name ) {
    HRESULT _hr = raw_GetOptionName(Index, Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1683)
inline long ICustomDAQ::GetNumCNTChannels ( ) {
    long _result = 0;
    HRESULT _hr = get_NumCNTChannels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1684)
inline HRESULT ICustomDAQ::GetCNTBitResolution ( long ChIndex, long * Bits ) {
    HRESULT _hr = raw_GetCNTBitResolution(ChIndex, Bits);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1685)
inline HRESULT ICustomDAQ::GetDeviceCode ( BSTR * Code, BSTR * Verify ) {
    HRESULT _hr = raw_GetDeviceCode(Code, Verify);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IExportFrame wrapper method implementations
//

#pragma implementation_key(1686)
inline HRESULT IExportFrame::ShowFrame ( long Handle, long * FrameHeight ) {
    HRESULT _hr = raw_ShowFrame(Handle, FrameHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1687)
inline HRESULT IExportFrame::HideFrame ( ) {
    HRESULT _hr = raw_HideFrame();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1688)
inline HRESULT IExportFrame::Apply ( ) {
    HRESULT _hr = raw_Apply();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1689)
inline HRESULT IExportFrame::SetExpApp ( struct IApp * App ) {
    HRESULT _hr = raw_SetExpApp(App);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IVCContext wrapper method implementations
//

#pragma implementation_key(1690)
inline IChannelListPtr IVCContext::GetDChannels ( ) {
    struct IChannelList * _result = 0;
    HRESULT _hr = get_DChannels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChannelListPtr(_result, false);
}

#pragma implementation_key(1691)
inline HRESULT IVCContext::Repaint ( ) {
    HRESULT _hr = raw_Repaint();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1692)
inline HRESULT IVCContext::DataRegionChanged ( ) {
    HRESULT _hr = raw_DataRegionChanged();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1693)
inline HRESULT IVCContext::BroadcastPosChanged ( ) {
    HRESULT _hr = raw_BroadcastPosChanged();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1694)
inline HRESULT IVCContext::BroadcastScaleChanged ( struct T_RecordPosition Min, struct T_RecordPosition Max, long ZoomLevel, double DeltaT ) {
    HRESULT _hr = raw_BroadcastScaleChanged(Min, Max, ZoomLevel, DeltaT);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1695)
inline IInputGroupsPtr IVCContext::GetDInputGroups ( ) {
    struct IInputGroups * _result = 0;
    HRESULT _hr = get_DInputGroups(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IInputGroupsPtr(_result, false);
}

#pragma implementation_key(1696)
inline HRESULT IVCContext::NeedData ( struct T_RecordPosition StartPos, struct T_RecordPosition EndPos, long MinLevel, VARIANT_BOOL Expand, struct IChannelList * ChList ) {
    HRESULT _hr = raw_NeedData(StartPos, EndPos, MinLevel, Expand, ChList);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1697)
inline HRESULT IVCContext::RefreshVisualProperties ( ) {
    HRESULT _hr = raw_RefreshVisualProperties();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1698)
inline VARIANT_BOOL IVCContext::ShowInputField ( long X, long Y, BSTR * Text ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ShowInputField(X, Y, Text, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1699)
inline IInputSlotsPtr IVCContext::GetInputSlots ( ) {
    struct IInputSlots * _result = 0;
    HRESULT _hr = raw_GetInputSlots(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IInputSlotsPtr(_result, false);
}

#pragma implementation_key(1700)
inline IProcessingMarkerPtr IVCContext::CreateProcessingMarker ( _bstr_t Guid ) {
    struct IProcessingMarker * _result = 0;
    HRESULT _hr = raw_CreateProcessingMarker(Guid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IProcessingMarkerPtr(_result, false);
}

#pragma implementation_key(1701)
inline VARIANT_BOOL IVCContext::InitProcessingMarker ( struct IProcessingMarker * ProcessingMarker, struct IChannel * Channel, VARIANT_BOOL ShowSetupFrame ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_InitProcessingMarker(ProcessingMarker, Channel, ShowSetupFrame, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1702)
inline HRESULT IVCContext::DeleteProcessingMarker ( struct IProcessingMarker * ProcessingMarker ) {
    HRESULT _hr = raw_DeleteProcessingMarker(ProcessingMarker);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1703)
inline HRESULT IVCContext::ProcessingMarkerChanged ( struct IProcessingMarker * ProcessingMarker, struct IMarkerInput * MarkerInput ) {
    HRESULT _hr = raw_ProcessingMarkerChanged(ProcessingMarker, MarkerInput);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1704)
inline HRESULT IVCContext::EditProcessingMarker ( struct IProcessingMarker * ProcessingMarker, struct IChannel * Channel, VARIANT_BOOL ShowSetupFrame ) {
    HRESULT _hr = raw_EditProcessingMarker(ProcessingMarker, Channel, ShowSetupFrame);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1705)
inline HRESULT IVCContext::DisplaySyncAcquire ( ) {
    HRESULT _hr = raw_DisplaySyncAcquire();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1706)
inline HRESULT IVCContext::DisplaySyncRelease ( ) {
    HRESULT _hr = raw_DisplaySyncRelease();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1707)
inline double IVCContext::GetCurrentValue ( struct IChannel * Channel, enum ComplexPresentation ComplexPresent ) {
    double _result = 0;
    HRESULT _hr = raw_GetCurrentValue(Channel, ComplexPresent, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1708)
inline long IVCContext::GetCurrentSamplePosition ( struct IChannel * Channel ) {
    long _result = 0;
    HRESULT _hr = raw_GetCurrentSamplePosition(Channel, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IMathContext wrapper method implementations
//

#pragma implementation_key(1709)
inline IChannelPtr IMathContext::MountChannel ( long Id, _bstr_t Descriptor ) {
    struct IChannel * _result = 0;
    HRESULT _hr = raw_MountChannel(Id, Descriptor, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChannelPtr(_result, false);
}

#pragma implementation_key(1710)
inline IChannelListPtr IMathContext::GetInputChannels ( ) {
    struct IChannelList * _result = 0;
    HRESULT _hr = get_InputChannels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChannelListPtr(_result, false);
}

#pragma implementation_key(1711)
inline IChannelListPtr IMathContext::GetOutputChannels ( ) {
    struct IChannelList * _result = 0;
    HRESULT _hr = get_OutputChannels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChannelListPtr(_result, false);
}

#pragma implementation_key(1712)
inline IChannelPtr IMathContext::MountChannelEx ( VARIANT_BOOL * Created, long Id, _bstr_t Descriptor, _bstr_t AUnit, _bstr_t Name, long Color ) {
    struct IChannel * _result = 0;
    HRESULT _hr = raw_MountChannelEx(Created, Id, Descriptor, AUnit, Name, Color, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChannelPtr(_result, false);
}

#pragma implementation_key(1713)
inline IInputGroupPtr IMathContext::MountInputGroup ( long Id ) {
    struct IInputGroup * _result = 0;
    HRESULT _hr = raw_MountInputGroup(Id, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IInputGroupPtr(_result, false);
}

#pragma implementation_key(1714)
inline long IMathContext::GetSubItemCount ( ) {
    long _result = 0;
    HRESULT _hr = get_SubItemCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1715)
inline IMathContextPtr IMathContext::GetSubItem ( long Index ) {
    struct IMathContext * _result = 0;
    HRESULT _hr = get_SubItem(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMathContextPtr(_result, false);
}

#pragma implementation_key(1716)
inline HRESULT IMathContext::UnmountChannel ( struct IChannel * * Ch ) {
    HRESULT _hr = raw_UnmountChannel(Ch);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1717)
inline HRESULT IMathContext::SetDefaultChProps ( VARIANT_BOOL Force ) {
    HRESULT _hr = raw_SetDefaultChProps(Force);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1718)
inline IMathContextPtr IMathContext::GetObjectContext ( ) {
    struct IMathContext * _result = 0;
    HRESULT _hr = get_ObjectContext(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMathContextPtr(_result, false);
}

#pragma implementation_key(1719)
inline IMathModulePtr IMathContext::GetCurrentModule ( ) {
    struct IMathModule * _result = 0;
    HRESULT _hr = get_CurrentModule(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMathModulePtr(_result, false);
}

#pragma implementation_key(1720)
inline IMathObjContextPtr IMathContext::GetCurrentContext ( ) {
    struct IMathObjContext * _result = 0;
    HRESULT _hr = get_CurrentContext(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMathObjContextPtr(_result, false);
}

#pragma implementation_key(1721)
inline HRESULT IMathContext::Apply ( ) {
    HRESULT _hr = raw_Apply();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1722)
inline VARIANT_BOOL IMathContext::HasError ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_HasError(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1723)
inline HRESULT IMathContext::SetAsOffline ( ) {
    HRESULT _hr = raw_SetAsOffline();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1724)
inline long IMathContext::GetInputCalcDelay ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetInputCalcDelay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1725)
inline _variant_t IMathContext::MathContextPointer ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_MathContextPointer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1726)
inline _variant_t IMathContext::MathModulePointer ( long Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_MathModulePointer(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1727)
inline HRESULT IMathContext::SetCustomOfflinePercentage ( long Percentage ) {
    HRESULT _hr = raw_SetCustomOfflinePercentage(Percentage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IMathFrameContext wrapper method implementations
//

#pragma implementation_key(1728)
inline HRESULT IMathFrameContext::Apply ( const _variant_t & Props ) {
    HRESULT _hr = raw_Apply(Props);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1729)
inline IMathModulePtr IMathFrameContext::GetCurrentModule ( ) {
    struct IMathModule * _result = 0;
    HRESULT _hr = get_CurrentModule(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMathModulePtr(_result, false);
}

//
// interface IMath wrapper method implementations
//

#pragma implementation_key(1730)
inline long IMath::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1731)
inline IMathObjectPtr IMath::GetMathObject ( long Index ) {
    struct IMathObject * _result = 0;
    HRESULT _hr = get_MathObject(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMathObjectPtr(_result, false);
}

#pragma implementation_key(1732)
inline IUnknownPtr IMath::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1733)
inline IMathObjectPtr IMath::FindObjByID ( long Index ) {
    struct IMathObject * _result = 0;
    HRESULT _hr = raw_FindObjByID(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMathObjectPtr(_result, false);
}

#pragma implementation_key(1734)
inline IMathObjectPtr IMath::AddObj ( _bstr_t Guid ) {
    struct IMathObject * _result = 0;
    HRESULT _hr = raw_AddObj(Guid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMathObjectPtr(_result, false);
}

#pragma implementation_key(1735)
inline HRESULT IMath::RemoveObj ( long I ) {
    HRESULT _hr = raw_RemoveObj(I);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IMathObject wrapper method implementations
//

#pragma implementation_key(1736)
inline long IMathObject::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1737)
inline IMathModulePtr IMathObject::GetMathModule ( long Index ) {
    struct IMathModule * _result = 0;
    HRESULT _hr = get_MathModule(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMathModulePtr(_result, false);
}

#pragma implementation_key(1738)
inline IUnknownPtr IMathObject::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1739)
inline IMathObjContextPtr IMathObject::GetMathObjContext ( ) {
    struct IMathObjContext * _result = 0;
    HRESULT _hr = get_MathObjContext(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMathObjContextPtr(_result, false);
}

#pragma implementation_key(1740)
inline _bstr_t IMathObject::GetMathGUID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MathGUID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1741)
inline long IMathObject::GetId ( ) {
    long _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1742)
inline IMathModulePtr IMathObject::FindModuleByID ( long I ) {
    struct IMathModule * _result = 0;
    HRESULT _hr = raw_FindModuleByID(I, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMathModulePtr(_result, false);
}

#pragma implementation_key(1743)
inline _bstr_t IMathObject::GetMathType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MathType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1744)
inline _bstr_t IMathObject::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1745)
inline void IMathObject::PutName ( _bstr_t Value ) {
    HRESULT _hr = put_Name(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1746)
inline HRESULT IMathObject::MarkAsOffline ( ) {
    HRESULT _hr = raw_MarkAsOffline();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IMathModule wrapper method implementations
//

#pragma implementation_key(1747)
inline long IMathModule::GetId ( ) {
    long _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1748)
inline IMathObjectPtr IMathModule::GetMathObject ( ) {
    struct IMathObject * _result = 0;
    HRESULT _hr = get_MathObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMathObjectPtr(_result, false);
}

//
// interface IMathObjContext wrapper method implementations
//

#pragma implementation_key(1749)
inline IMathObjectPtr IMathObjContext::GetMathObject ( ) {
    struct IMathObject * _result = 0;
    HRESULT _hr = get_MathObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMathObjectPtr(_result, false);
}

//
// interface IMathChannel wrapper method implementations
//

#pragma implementation_key(1750)
inline double IMathChannel::GetDefaultMin ( ) {
    double _result = 0;
    HRESULT _hr = get_DefaultMin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1751)
inline void IMathChannel::PutDefaultMin ( double Value ) {
    HRESULT _hr = put_DefaultMin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1752)
inline double IMathChannel::GetDefaultMax ( ) {
    double _result = 0;
    HRESULT _hr = get_DefaultMax(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1753)
inline void IMathChannel::PutDefaultMax ( double Value ) {
    HRESULT _hr = put_DefaultMax(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1754)
inline long IMathChannel::GetDefaultRes ( ) {
    long _result = 0;
    HRESULT _hr = get_DefaultRes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1755)
inline void IMathChannel::PutDefaultRes ( long Value ) {
    HRESULT _hr = put_DefaultRes(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1756)
inline IMathObjectPtr IMathChannel::GetMathObject ( ) {
    struct IMathObject * _result = 0;
    HRESULT _hr = get_MathObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMathObjectPtr(_result, false);
}

//
// interface IInputSlot wrapper method implementations
//

#pragma implementation_key(1757)
inline _bstr_t IInputSlot::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1758)
inline void IInputSlot::PutName ( _bstr_t Value ) {
    HRESULT _hr = put_Name(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1759)
inline VARIANT_BOOL IInputSlot::GetIsStatic ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsStatic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1760)
inline void IInputSlot::PutIsStatic ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_IsStatic(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1761)
inline VARIANT_BOOL IInputSlot::GetIsOptional ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsOptional(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1762)
inline void IInputSlot::PutIsOptional ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_IsOptional(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1763)
inline _bstr_t IInputSlot::GetTag ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Tag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1764)
inline void IInputSlot::PutTag ( _bstr_t Value ) {
    HRESULT _hr = put_Tag(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1765)
inline _bstr_t IInputSlot::GetGroupTag ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_GroupTag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1766)
inline void IInputSlot::PutGroupTag ( _bstr_t Value ) {
    HRESULT _hr = put_GroupTag(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1767)
inline VARIANT_BOOL IInputSlot::GetActive ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Active(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1768)
inline void IInputSlot::PutActive ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Active(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1769)
inline VARIANT_BOOL IInputSlot::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1770)
inline void IInputSlot::PutVisible ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Visible(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1771)
inline _bstr_t IInputSlot::GetInputDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_InputDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1772)
inline _bstr_t IInputSlot::GetLongInputDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LongInputDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1773)
inline HRESULT IInputSlot::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1774)
inline VARIANT_BOOL IInputSlot::IsAssigned ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAssigned(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1775)
inline VARIANT_BOOL IInputSlot::HasDescriptor ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_HasDescriptor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1776)
inline void IInputSlot::PutOnAcceptChannel ( struct IAcceptChannel * _arg1 ) {
    HRESULT _hr = put_OnAcceptChannel(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1777)
inline void IInputSlot::PutOnAcceptGroup ( struct IAcceptGroup * _arg1 ) {
    HRESULT _hr = put_OnAcceptGroup(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1778)
inline IInputChPtr IInputSlot::GetInputCh ( ) {
    struct IInputCh * _result = 0;
    HRESULT _hr = get_InputCh(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IInputChPtr(_result, false);
}

#pragma implementation_key(1779)
inline void IInputSlot::PutInputCh ( struct IInputCh * Value ) {
    HRESULT _hr = put_InputCh(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1780)
inline IInputGroupPtr IInputSlot::GetInputGroup ( ) {
    struct IInputGroup * _result = 0;
    HRESULT _hr = get_InputGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IInputGroupPtr(_result, false);
}

#pragma implementation_key(1781)
inline void IInputSlot::PutInputGroup ( struct IInputGroup * Value ) {
    HRESULT _hr = put_InputGroup(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1782)
inline long IInputSlot::GetSlotType ( ) {
    long _result = 0;
    HRESULT _hr = get_SlotType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1783)
inline VARIANT_BOOL IInputSlot::SendMessageEvent ( _bstr_t MsgHeader, _bstr_t MsgData, BSTR * MsgOut ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SendMessageEvent(MsgHeader, MsgData, MsgOut, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1784)
inline long IInputSlot::GetIndentLevel ( ) {
    long _result = 0;
    HRESULT _hr = get_IndentLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1785)
inline void IInputSlot::PutIndentLevel ( long Value ) {
    HRESULT _hr = put_IndentLevel(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1786)
inline HRESULT IInputSlot::SetChannel ( struct IChannel * Value, long Ind ) {
    HRESULT _hr = raw_SetChannel(Value, Ind);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1787)
inline IChannelPtr IInputSlot::GetChannel ( ) {
    struct IChannel * _result = 0;
    HRESULT _hr = raw_GetChannel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChannelPtr(_result, false);
}

//
// interface IInputSlots wrapper method implementations
//

#pragma implementation_key(1788)
inline IInputSlotPtr IInputSlots::AddSlotByTag ( _bstr_t Tag ) {
    struct IInputSlot * _result = 0;
    HRESULT _hr = raw_AddSlotByTag(Tag, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IInputSlotPtr(_result, false);
}

#pragma implementation_key(1789)
inline IInputSlotPtr IInputSlots::AddSlot ( VARIANT_BOOL Extending ) {
    struct IInputSlot * _result = 0;
    HRESULT _hr = raw_AddSlot(Extending, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IInputSlotPtr(_result, false);
}

#pragma implementation_key(1790)
inline IInputSlotPtr IInputSlots::InsertSlot ( long Index ) {
    struct IInputSlot * _result = 0;
    HRESULT _hr = raw_InsertSlot(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IInputSlotPtr(_result, false);
}

#pragma implementation_key(1791)
inline IInputSlotPtr IInputSlots::FindOrAddSlot ( _bstr_t Tag ) {
    struct IInputSlot * _result = 0;
    HRESULT _hr = raw_FindOrAddSlot(Tag, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IInputSlotPtr(_result, false);
}

#pragma implementation_key(1792)
inline VARIANT_BOOL IInputSlots::HasEmptySlot ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_HasEmptySlot(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1793)
inline long IInputSlots::GetUsedSlots ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetUsedSlots(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1794)
inline IInputSlotPtr IInputSlots::GetFirstUsedSlot ( ) {
    struct IInputSlot * _result = 0;
    HRESULT _hr = raw_GetFirstUsedSlot(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IInputSlotPtr(_result, false);
}

#pragma implementation_key(1795)
inline long IInputSlots::GetFirstUsedIndex ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetFirstUsedIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1796)
inline IInputSlotPtr IInputSlots::GetLastUsedSlot ( ) {
    struct IInputSlot * _result = 0;
    HRESULT _hr = raw_GetLastUsedSlot(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IInputSlotPtr(_result, false);
}

#pragma implementation_key(1797)
inline long IInputSlots::FindChannel ( struct IChannel * Channel ) {
    long _result = 0;
    HRESULT _hr = raw_FindChannel(Channel, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1798)
inline VARIANT_BOOL IInputSlots::HasSyncChannels ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_HasSyncChannels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1799)
inline HRESULT IInputSlots::Save ( ) {
    HRESULT _hr = raw_Save();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1800)
inline HRESULT IInputSlots::Restore ( ) {
    HRESULT _hr = raw_Restore();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1801)
inline long IInputSlots::FindInput ( struct IInputSlot * Input ) {
    long _result = 0;
    HRESULT _hr = raw_FindInput(Input, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1802)
inline long IInputSlots::FindByTag ( _bstr_t Tag ) {
    long _result = 0;
    HRESULT _hr = raw_FindByTag(Tag, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1803)
inline IInputSlotPtr IInputSlots::FindSlotByTag ( _bstr_t Tag ) {
    struct IInputSlot * _result = 0;
    HRESULT _hr = raw_FindSlotByTag(Tag, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IInputSlotPtr(_result, false);
}

#pragma implementation_key(1804)
inline HRESULT IInputSlots::ClearSlotsInGroup ( struct IInputSlot * Input ) {
    HRESULT _hr = raw_ClearSlotsInGroup(Input);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1805)
inline _bstr_t IInputSlots::ToString ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_ToString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1806)
inline IInputSlotPtr IInputSlots::GetItems ( long Index ) {
    struct IInputSlot * _result = 0;
    HRESULT _hr = get_Items(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IInputSlotPtr(_result, false);
}

#pragma implementation_key(1807)
inline long IInputSlots::GetActiveCount ( ) {
    long _result = 0;
    HRESULT _hr = get_ActiveCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1808)
inline long IInputSlots::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1809)
inline HRESULT IInputSlots::Delete ( long Index ) {
    HRESULT _hr = raw_Delete(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAcceptChannel wrapper method implementations
//

#pragma implementation_key(1810)
inline VARIANT_BOOL IAcceptChannel::Call ( struct IInputSlot * Slot, struct IInputCh * InputCh ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Call(Slot, InputCh, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAcceptGroup wrapper method implementations
//

#pragma implementation_key(1811)
inline VARIANT_BOOL IAcceptGroup::Call ( struct IInputSlot * Slot, struct IInputGroup * Group ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Call(Slot, Group, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}
